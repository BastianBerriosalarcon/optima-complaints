import { ServiceResponse, AIAnalysis, Lead, WhatsAppMessage, WorkflowContext } from '../../../types/core';import { IAIService, IConfigurationService } from '../../interfaces/IExternalServices';export class MessageAnalysisHandler implements ILeadAnalysisHandler {    constructor(        private aiService: IAIService,        private configService: IConfigurationService    ) {}    async handle(message: WhatsAppMessage, leadContext: Lead | null, context: WorkflowContext): Promise<ServiceResponse<AIAnalysis>> {        try {            const aiConfig = await this.configService.getAISettings(context.tenant_id, context);            if (!aiConfig.success) {                return { success: false, error: 'No se pudo obtener configuración de IA' };            }            const analysisContext = this.buildAnalysisContext(message, leadContext);            const analysis = await this.aiService.analyzeMessage(                message.body,                analysisContext,                aiConfig.data,                context            );            return analysis;        } catch (error) {            return { success: false, error: `Error en análisis de mensaje: ${error.message}` };        }    }    private buildAnalysisContext(message: WhatsAppMessage, leadContext: Lead | null): string {        let context = `Mensaje: "${message.body}"
`;        if (leadContext) {            context += `Cliente existente: ${leadContext.nombre_cliente || 'Anónimo'}
`;            context += `Estado actual: ${leadContext.estado}
`;            context += `Interés previo: ${leadContext.vehiculo_interes || 'No especificado'}
`;            context += `Historial: ${leadContext.notas_ia}
`;        } else {            context += `Cliente nuevo
`;        }        return context;    }}