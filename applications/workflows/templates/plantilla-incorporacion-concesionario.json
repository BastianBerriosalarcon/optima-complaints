{
  "name": "Plantilla - Onboarding Automatizado de Tenant",
  "description": "Workflow template que automatiza la creación y configuración completa de un nuevo concesionario en Óptima-CX. Incluye creación de BD, configuración multitenant, secrets, workflows y validación.",
  "tags": [
    "template",
    "onboarding",
    "multitenant", 
    "automation",
    "critical"
  ],
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/webhook/new-tenant-onboarding",
        "options": {
          "responseData": "firstEntryJson"
        }
      },
      "id": "webhook-onboarding-trigger",
      "name": "Webhook Nuevo Tenant",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Validación exhaustiva de datos de entrada para nuevo tenant\nconst inputData = $input.first().json;\n\n// Campos obligatorios\nconst requiredFields = [\n  'tenant_name',\n  'tenant_email', \n  'admin_email',\n  'whatsapp_phone_number',\n  'whatsapp_business_token',\n  'smtp_host',\n  'smtp_user',\n  'smtp_password'\n];\n\n// Validar campos obligatorios\nfor (const field of requiredFields) {\n  if (!inputData[field] || inputData[field].trim() === '') {\n    throw new Error(`Campo requerido faltante: ${field}`);\n  }\n}\n\n// Generar IDs únicos\nconst tenantId = `tenant_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\nconst apiKeyId = `api_${tenantId}`;\nconst webhookToken = `whk_${Math.random().toString(36).substr(2, 16)}`;\n\n// Estructura completa del tenant\nconst tenantConfig = {\n  // Identificación\n  tenant_id: tenantId,\n  tenant_name: inputData.tenant_name,\n  tenant_slug: inputData.tenant_name.toLowerCase().replace(/[^a-z0-9]/g, '-'),\n  \n  // Configuración de contacto\n  admin_email: inputData.admin_email,\n  tenant_email: inputData.tenant_email,\n  whatsapp_phone_number: inputData.whatsapp_phone_number,\n  \n  // Credenciales WhatsApp\n  whatsapp_config: {\n    business_token: inputData.whatsapp_business_token,\n    phone_number_id: inputData.whatsapp_phone_number_id || null,\n    verify_token: webhookToken,\n    webhook_url: `https://n8n-optimacx.run.app/webhook/${tenantId}/whatsapp`\n  },\n  \n  // Configuración SMTP\n  email_config: {\n    smtp_host: inputData.smtp_host,\n    smtp_port: inputData.smtp_port || 587,\n    smtp_user: inputData.smtp_user,\n    smtp_password: inputData.smtp_password,\n    from_email: inputData.from_email || inputData.tenant_email,\n    from_name: inputData.from_name || inputData.tenant_name\n  },\n  \n  // Configuración IA por defecto\n  ai_config: {\n    provider: 'google',\n    model: 'gemini-2.5-pro',\n    embedding_model: 'gemini-embedding-001',\n    temperatura: 0.7,\n    max_tokens: 1000,\n    custom_prompts: {\n      lead_analysis: `Analiza este mensaje de WhatsApp para ${inputData.tenant_name}...`,\n      complaint_analysis: `Procesa este reclamo para ${inputData.tenant_name}...`\n    }\n  },\n  \n  // Horarios de negocio por defecto\n  business_hours: {\n    lunes_a_viernes: { inicio: '09:00', fin: '18:00' },\n    sabados: { inicio: '09:00', fin: '14:00' },\n    domingos: { activo: false },\n    timezone: 'America/Santiago'\n  },\n  \n  // Configuración inicial de la plataforma\n  platform_config: {\n    chatwoot_subdomain: `${tenantConfig.tenant_slug}.chat.optimacx.com`,\n    api_key: apiKeyId,\n    webhook_token: webhookToken,\n    rag_index_name: `rag_${tenantId}`,\n    created_at: new Date().toISOString(),\n    status: 'provisioning'\n  }\n};\n\nconsole.log('Tenant config validated:', {\n  tenant_id: tenantConfig.tenant_id,\n  tenant_name: tenantConfig.tenant_name,\n  required_fields_count: requiredFields.length\n});\n\nreturn tenantConfig;"
      },
      "id": "validate-tenant-data",
      "name": "Validar Datos Tenant",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [470, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Crear registro del concesionario\nINSERT INTO concesionarios (\n  id,\n  nombre,\n  email_contacto,\n  telefono_principal,\n  whatsapp_phone_number_id,\n  configuracion_ai,\n  configuracion_horarios,\n  configuracion_smtp,\n  api_key,\n  webhook_token,\n  chatwoot_subdomain,\n  activo,\n  fecha_creacion\n) VALUES (\n  $1,\n  $2,\n  $3,\n  $4,\n  $5,\n  $6::jsonb,\n  $7::jsonb,\n  $8::jsonb,\n  $9,\n  $10,\n  $11,\n  true,\n  CURRENT_TIMESTAMP\n) RETURNING *;",
        "additionalFields": {
          "queryParameters": "=[\n  $json.tenant_id,\n  $json.tenant_name,\n  $json.tenant_email,\n  $json.whatsapp_phone_number,\n  $json.whatsapp_config.phone_number_id,\n  JSON.stringify($json.ai_config),\n  JSON.stringify($json.business_hours),\n  JSON.stringify($json.email_config),\n  $json.platform_config.api_key,\n  $json.platform_config.webhook_token,\n  $json.platform_config.chatwoot_subdomain,\n]"
        }
      },
      "id": "create-tenant-db",
      "name": "Crear Tenant en BD",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [690, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Crear usuarios por defecto para el tenant\nINSERT INTO usuarios (\n  concesionario_id,\n  email,\n  nombre,\n  rol,\n  activo,\n  fecha_creacion\n) VALUES \n-- Super admin del tenant\n($1, $2, 'Administrador Principal', 'super_usuario', true, CURRENT_TIMESTAMP),\n-- Roles básicos de ejemplo\n($1, $3, 'Jefe de Ventas', 'jefe_ventas', true, CURRENT_TIMESTAMP),\n($1, $4, 'Jefe de Servicio', 'jefe_servicio', true, CURRENT_TIMESTAMP),\n($1, $5, 'Contact Center', 'contact_center', true, CURRENT_TIMESTAMP)\nRETURNING *;",
        "additionalFields": {
          "queryParameters": "=[\n  $json.tenant_id,\n  $json.admin_email,\n  `ventas@${$json.tenant_slug}.com`,\n  `servicio@${$json.tenant_slug}.com`,\n  `contactcenter@${$json.tenant_slug}.com`\n]"
        }
      },
      "id": "create-default-users",
      "name": "Crear Usuarios por Defecto",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [910, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Crear sucursal principal por defecto\nINSERT INTO sucursales (\n  concesionario_id,\n  nombre,\n  direccion,\n  telefono,\n  email,\n  es_principal,\n  activa,\n  fecha_creacion\n) VALUES (\n  $1,\n  $2,\n  'Dirección por definir',\n  $3,\n  $4,\n  true,\n  true,\n  CURRENT_TIMESTAMP\n) RETURNING *;",
        "additionalFields": {
          "queryParameters": "=[\n  $json.tenant_id,\n  `${$json.tenant_name} - Sucursal Principal`,\n  $json.whatsapp_phone_number,\n  $json.tenant_email\n]"
        }
      },
      "id": "create-default-branch",
      "name": "Crear Sucursal Principal",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1130, 300]
    },
    {
      "parameters": {
        "jsCode": "// Crear configuración específica para n8n workflows del tenant\nconst tenantData = $input.first().json;\n\n// Configuración específica para workflows de este tenant\nconst workflowConfig = {\n  tenant_id: tenantData.tenant_id,\n  \n  // Configuración de workflows de leads\n  leads_config: {\n    webhook_url: `https://n8n-optimacx.run.app/webhook/${tenantData.tenant_id}/leads`,\n    scoring_threshold: 0.7,\n    auto_assignment: true,\n    ai_analysis: true\n  },\n  \n  // Configuración de workflows de encuestas\n  surveys_config: {\n    webhook_url: `https://n8n-optimacx.run.app/webhook/${tenantData.tenant_id}/surveys`,\n    channels: ['QR', 'WhatsApp', 'Llamada'],\n    low_score_threshold: 8,\n    reminder_hours: 6\n  },\n  \n  // Configuración de workflows de reclamos\n  complaints_config: {\n    webhook_url: `https://n8n-optimacx.run.app/webhook/${tenantData.tenant_id}/complaints`,\n    rag_enabled: true,\n    auto_classification: true,\n    escalation_hours: 24\n  },\n  \n  // Lista de workflows a provisionar\n  workflows_to_create: [\n    'procesador-whatsapp-leads',\n    'analisis-ia-leads', \n    'asignacion-asesores',\n    'procesador-qr',\n    'enviador-whatsapp',\n    'procesador-rag-reclamos',\n    'notificaciones-reclamos'\n  ],\n  \n  // Variables de entorno específicas\n  environment_variables: {\n    TENANT_ID: tenantData.tenant_id,\n    TENANT_NAME: tenantData.tenant_name,\n    WHATSAPP_TOKEN: tenantData.whatsapp_config.business_token,\n    WEBHOOK_VERIFY_TOKEN: tenantData.platform_config.webhook_token,\n    SMTP_CONFIG: JSON.stringify(tenantData.email_config),\n    AI_CONFIG: JSON.stringify(tenantData.ai_config)\n  }\n};\n\nconsole.log('Workflow configuration prepared:', {\n  tenant_id: workflowConfig.tenant_id,\n  workflows_count: workflowConfig.workflows_to_create.length\n});\n\nreturn { \n  ...tenantData,\n  workflow_config: workflowConfig\n};"
      },
      "id": "prepare-workflow-config",
      "name": "Preparar Config Workflows",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1350, 300]
    },
    {
      "parameters": {
        "jsCode": "// Crear tabla RAG específica para el tenant\nconst tenantData = $input.first().json;\nconst tenantId = tenantData.tenant_id;\n\n// SQL para crear tabla de vectores RAG específica del tenant\nconst createRagTableSQL = `\n-- Crear tabla de documentos RAG para el tenant\nCREATE TABLE IF NOT EXISTS rag_documents_${tenantId.replace(/-/g, '_')} (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  tenant_id VARCHAR(255) NOT NULL DEFAULT '${tenantId}',\n  document_id VARCHAR(255) NOT NULL,\n  title TEXT NOT NULL,\n  content TEXT NOT NULL,\n  chunk_index INTEGER NOT NULL,\n  total_chunks INTEGER NOT NULL,\n  embedding vector(768), -- gemini-embedding-001 dimensions\n  metadata JSONB DEFAULT '{}',\n  category VARCHAR(100),\n  tags TEXT[],\n  version VARCHAR(50) DEFAULT '1.0.0',\n  status VARCHAR(50) DEFAULT 'active',\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  \n  -- Índices para optimización\n  CONSTRAINT unique_tenant_doc_chunk UNIQUE (tenant_id, document_id, chunk_index)\n);\n\n-- Crear índice vectorial para búsqueda semántica\nCREATE INDEX IF NOT EXISTS idx_rag_${tenantId.replace(/-/g, '_')}_embedding \nON rag_documents_${tenantId.replace(/-/g, '_')} \nUSING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);\n\n-- Crear índices adicionales\nCREATE INDEX IF NOT EXISTS idx_rag_${tenantId.replace(/-/g, '_')}_tenant \nON rag_documents_${tenantId.replace(/-/g, '_')} (tenant_id);\n\nCREATE INDEX IF NOT EXISTS idx_rag_${tenantId.replace(/-/g, '_')}_status \nON rag_documents_${tenantId.replace(/-/g, '_')} (status);\n\nCREATE INDEX IF NOT EXISTS idx_rag_${tenantId.replace(/-/g, '_')}_category \nON rag_documents_${tenantId.replace(/-/g, '_')} (category);\n`;\n\nreturn {\n  ...tenantData,\n  rag_table_sql: createRagTableSQL,\n  rag_table_name: `rag_documents_${tenantId.replace(/-/g, '_')}`\n};"
      },
      "id": "prepare-rag-tables",
      "name": "Preparar Tablas RAG",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1570, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.rag_table_sql }}"
      },
      "id": "execute-rag-setup",
      "name": "Ejecutar Setup RAG",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1790, 300]
    },
    {
      "parameters": {
        "jsCode": "// Validación completa del onboarding\nconst tenantData = $input.first().json;\n\n// Lista de validaciones a realizar\nconst validations = [\n  'tenant_created_in_db',\n  'default_users_created',\n  'main_branch_created', \n  'rag_tables_created',\n  'workflow_config_prepared'\n];\n\n// Simular validaciones (en producción serían llamadas reales a BD)\nconst validationResults = validations.map(validation => ({\n  validation,\n  status: 'success',\n  timestamp: new Date().toISOString()\n}));\n\n// Preparar notificación de éxito\nconst onboardingReport = {\n  tenant_id: tenantData.tenant_id,\n  tenant_name: tenantData.tenant_name,\n  onboarding_status: 'completed',\n  validations: validationResults,\n  \n  // URLs de acceso\n  access_urls: {\n    dashboard: `https://app.optimacx.com/dashboard?tenant=${tenantData.tenant_id}`,\n    chatwoot: `https://${tenantData.platform_config.chatwoot_subdomain}`,\n    webhooks: {\n      whatsapp: tenantData.whatsapp_config.webhook_url,\n      leads: tenantData.workflow_config.leads_config.webhook_url,\n      surveys: tenantData.workflow_config.surveys_config.webhook_url,\n      complaints: tenantData.workflow_config.complaints_config.webhook_url\n    }\n  },\n  \n  // Credenciales y tokens (para envío seguro)\n  credentials: {\n    api_key: tenantData.platform_config.api_key,\n    webhook_token: tenantData.platform_config.webhook_token,\n    rag_table: tenantData.rag_table_name\n  },\n  \n  // Próximos pasos\n  next_steps: [\n    'Configurar WhatsApp Business Webhook',\n    'Subir documentos RAG iniciales',\n    'Configurar usuarios y permisos',\n    'Realizar pruebas de integración'\n  ],\n  \n  completed_at: new Date().toISOString()\n};\n\nconsole.log('Onboarding completed successfully:', {\n  tenant_id: onboardingReport.tenant_id,\n  tenant_name: onboardingReport.tenant_name,\n  validations_passed: validationResults.length\n});\n\nreturn onboardingReport;"
      },
      "id": "validate-onboarding",
      "name": "Validar Onboarding",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2010, 300]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "requestMethod": "POST",
        "url": "={{ $json.email_config.smtp_host }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"to\": \"{{ $json.admin_email }}\",\n  \"subject\": \"🎉 Onboarding Completado - {{ $json.tenant_name }}\",\n  \"html\": `\n    <h2>¡Bienvenido a Óptima-CX!</h2>\n    <p>Su onboarding se ha completado exitosamente.</p>\n    \n    <h3>📊 Información del Tenant</h3>\n    <ul>\n      <li><strong>ID:</strong> {{ $json.tenant_id }}</li>\n      <li><strong>Nombre:</strong> {{ $json.tenant_name }}</li>\n      <li><strong>Estado:</strong> {{ $json.onboarding_status }}</li>\n    </ul>\n    \n    <h3>🔗 URLs de Acceso</h3>\n    <ul>\n      <li><a href=\"{{ $json.access_urls.dashboard }}\">Dashboard Principal</a></li>\n      <li><a href=\"{{ $json.access_urls.chatwoot }}\">Chatwoot (Conversaciones)</a></li>\n    </ul>\n    \n    <h3>🔑 Credenciales</h3>\n    <ul>\n      <li><strong>API Key:</strong> {{ $json.credentials.api_key }}</li>\n      <li><strong>Webhook Token:</strong> {{ $json.credentials.webhook_token }}</li>\n    </ul>\n    \n    <h3>📋 Próximos Pasos</h3>\n    <ol>\n      {{ $json.next_steps.map(step => `<li>${step}</li>`).join('') }}\n    </ol>\n    \n    <p>¡Gracias por elegir Óptima-CX!</p>\n  `\n}"
      },
      "id": "send-welcome-email",
      "name": "Enviar Email Bienvenida",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2230, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Actualizar estado del tenant a 'active'\nUPDATE concesionarios \nSET \n  activo = true,\n  estado_onboarding = 'completed',\n  fecha_activacion = CURRENT_TIMESTAMP\nWHERE id = $1\nRETURNING *;",
        "additionalFields": {
          "queryParameters": "=[$json.tenant_id]"
        }
      },
      "id": "activate-tenant",
      "name": "Activar Tenant",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [2450, 300]
    },
    {
      "parameters": {
        "respondWithOptions": "responseData",
        "responseData": "={\n  \"success\": true,\n  \"message\": \"Onboarding completado exitosamente\",\n  \"tenant_id\": \"{{ $json.id }}\",\n  \"tenant_name\": \"{{ $json.nombre }}\",\n  \"status\": \"{{ $json.estado_onboarding }}\",\n  \"activated_at\": \"{{ $json.fecha_activacion }}\",\n  \"next_steps\": [\n    \"Configurar WhatsApp Business\",\n    \"Cargar documentos RAG\",\n    \"Configurar usuarios\",\n    \"Realizar pruebas\"\n  ]\n}"
      },
      "id": "respond-success",
      "name": "Respuesta Final",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2670, 300]
    }
  ],
  "connections": {
    "Webhook Nuevo Tenant": {
      "main": [[{"node": "Validar Datos Tenant", "type": "main", "index": 0}]]
    },
    "Validar Datos Tenant": {
      "main": [[{"node": "Crear Tenant en BD", "type": "main", "index": 0}]]
    },
    "Crear Tenant en BD": {
      "main": [[{"node": "Crear Usuarios por Defecto", "type": "main", "index": 0}]]
    },
    "Crear Usuarios por Defecto": {
      "main": [[{"node": "Crear Sucursal Principal", "type": "main", "index": 0}]]
    },
    "Crear Sucursal Principal": {
      "main": [[{"node": "Preparar Config Workflows", "type": "main", "index": 0}]]
    },
    "Preparar Config Workflows": {
      "main": [[{"node": "Preparar Tablas RAG", "type": "main", "index": 0}]]
    },
    "Preparar Tablas RAG": {
      "main": [[{"node": "Ejecutar Setup RAG", "type": "main", "index": 0}]]
    },
    "Ejecutar Setup RAG": {
      "main": [[{"node": "Validar Onboarding", "type": "main", "index": 0}]]
    },
    "Validar Onboarding": {
      "main": [[{"node": "Enviar Email Bienvenida", "type": "main", "index": 0}]]
    },
    "Enviar Email Bienvenida": {
      "main": [[{"node": "Activar Tenant", "type": "main", "index": 0}]]
    },
    "Activar Tenant": {
      "main": [[{"node": "Respuesta Final", "type": "main", "index": 0}]]
    }
  },
  "settings": {
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "manejador-errores"
  },
  "staticData": {},
  "variables": {
    "ONBOARDING_VERSION": "1.0.0",
    "DEFAULT_TIMEZONE": "America/Santiago",
    "RAG_EMBEDDING_MODEL": "gemini-embedding-001",
    "AI_DEFAULT_MODEL": "gemini-2.5-pro"
  }
}