{
  "name": "Portal de Super-Admin para Gestión de Tenants",
  "description": "Workflow que proporciona un portal completo de administración para Super-Admin, incluyendo onboarding automatizado de concesionarios, monitoreo en tiempo real y gestión centralizada de la plataforma multitenant.",
  "tags": [
    "super-admin",
    "gestion-tenants",
    "onboarding",
    "multitenant",
    "escalabilidad",
    "critico"
  ],
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/webhook/super-admin-portal",
        "options": {
          "responseData": "firstEntryJson"
        }
      },
      "id": "portal-webhook-trigger",
      "name": "Webhook Portal Admin",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Procesar y validar solicitud de Super-Admin\nconst input = $input.first().json;\n\n// Validar estructura de la solicitud\nif (!input.action) {\n  throw new Error('MISSING_ACTION: El campo action es requerido');\n}\n\nif (!input.admin_user) {\n  throw new Error('MISSING_ADMIN_USER: El campo admin_user es requerido');\n}\n\n// Validar acciones permitidas\nconst supportedActions = [\n  'create_tenant',\n  'get_platform_metrics', \n  'get_tenant_dashboard',\n  'update_tenant_config',\n  'suspend_tenant',\n  'activate_tenant',\n  'bulk_tenant_operation'\n];\n\nif (!supportedActions.includes(input.action)) {\n  throw new Error(`UNSUPPORTED_ACTION: Acción '${input.action}' no soportada. Acciones válidas: ${supportedActions.join(', ')}`);\n}\n\n// Generar ID único para la acción\nconst actionId = `admin_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n// Validar datos específicos por acción\nlet validatedData = {\n  action_id: actionId,\n  action: input.action,\n  admin_user: input.admin_user,\n  admin_ip: input.admin_ip || 'unknown',\n  timestamp: new Date().toISOString(),\n  action_data: input.action_data || {}\n};\n\n// Validaciones específicas por tipo de acción\nswitch (input.action) {\n  case 'create_tenant':\n    const requiredFields = ['tenant_name', 'business_name', 'contact_email'];\n    for (const field of requiredFields) {\n      if (!input.action_data[field]) {\n        throw new Error(`MISSING_FIELD: El campo '${field}' es requerido para crear tenant`);\n      }\n    }\n    \n    // Generar tenant_id si no existe\n    if (!input.action_data.tenant_id) {\n      validatedData.action_data.tenant_id = `tenant_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    // Valores por defecto\n    validatedData.action_data.plan_type = input.action_data.plan_type || 'basic';\n    validatedData.action_data.features_enabled = input.action_data.features_enabled || ['leads', 'surveys', 'complaints'];\n    validatedData.action_data.initial_users = input.action_data.initial_users || 5;\n    break;\n    \n  case 'get_tenant_dashboard':\n    if (!input.action_data.tenant_id) {\n      throw new Error('MISSING_TENANT_ID: El campo tenant_id es requerido para obtener dashboard');\n    }\n    validatedData.action_data.metrics_period = input.action_data.metrics_period || '30d';\n    break;\n    \n  case 'get_platform_metrics':\n    validatedData.action_data.period = input.action_data.period || '30d';\n    break;\n}\n\n// Log de la acción procesada\nconsole.log('Admin action processed:', {\n  action_id: actionId,\n  action: input.action,\n  admin_user: input.admin_user,\n  timestamp: validatedData.timestamp\n});\n\nreturn [{ json: validatedData }];"
      },
      "id": "process-admin-request",
      "name": "Procesar Solicitud Admin",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [
        470,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.action }}",
              "operation": "equal",
              "value2": "create_tenant"
            }
          ]
        }
      },
      "id": "check-create-tenant",
      "name": "¿Crear Tenant?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        690,
        200
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Verificar si el tenant ya existe (nombre único y ID único)\nSELECT \n  id,\n  nombre,\n  activo,\n  created_at,\n  'duplicate_id' as conflict_type\nFROM concesionarios \nWHERE id = $1\nUNION ALL\nSELECT \n  id,\n  nombre,\n  activo,\n  created_at,\n  'duplicate_name' as conflict_type\nFROM concesionarios \nWHERE LOWER(TRIM(nombre)) = LOWER(TRIM($2))\nLIMIT 1;",
        "additionalFields": {
          "queryParameters": "=[$json.action_data.tenant_id, $json.action_data.tenant_name]"
        }
      },
      "id": "check-tenant-exists",
      "name": "Verificar Tenant Existente",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        910,
        120
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $('Verificar Tenant Existente').all().length }}",
              "operation": "equal",
              "value2": 0
            }
          ]
        }
      },
      "id": "check-tenant-unique",
      "name": "¿Tenant Único?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        1130,
        120
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Crear nuevo concesionario con configuración completa\nINSERT INTO concesionarios (\n  id,\n  nombre,\n  rut,\n  direccion,\n  ciudad,\n  region,\n  telefono,\n  email_contacto,\n  \n  -- Configuración técnica\n  subdomain,\n  plan_tipo,\n  features_habilitadas,\n  limite_usuarios,\n  \n  -- Configuraciones de integración (JSON)\n  configuracion_whatsapp,\n  configuracion_chatwoot,\n  configuracion_email,\n  configuracion_ia,\n  \n  -- Estado y metadata\n  activo,\n  fecha_activacion,\n  metadata_admin,\n  created_at,\n  created_by\n) VALUES (\n  $1,  -- id\n  $2,  -- nombre\n  $3,  -- rut\n  $4,  -- direccion\n  $5,  -- ciudad\n  $6,  -- region\n  $7,  -- telefono\n  $8,  -- email_contacto\n  $9,  -- subdomain\n  $10, -- plan_tipo\n  $11, -- features_habilitadas\n  $12, -- limite_usuarios\n  '{}', -- configuracion_whatsapp (vacía inicialmente)\n  '{}', -- configuracion_chatwoot (vacía inicialmente)\n  '{}', -- configuracion_email (vacía inicialmente)\n  '{}', -- configuracion_ia (vacía inicialmente)\n  true, -- activo\n  CURRENT_TIMESTAMP, -- fecha_activacion\n  $13::jsonb, -- metadata_admin\n  CURRENT_TIMESTAMP, -- created_at\n  $14  -- created_by\n) RETURNING *;",
        "additionalFields": {
          "queryParameters": "=[\n  $('Procesar Solicitud Admin').first().json.action_data.tenant_id,\n  $('Procesar Solicitud Admin').first().json.action_data.business_name,\n  $('Procesar Solicitud Admin').first().json.action_data.rut,\n  $('Procesar Solicitud Admin').first().json.action_data.address,\n  $('Procesar Solicitud Admin').first().json.action_data.city,\n  $('Procesar Solicitud Admin').first().json.action_data.region,\n  $('Procesar Solicitud Admin').first().json.action_data.contact_phone,\n  $('Procesar Solicitud Admin').first().json.action_data.contact_email,\n  $('Procesar Solicitud Admin').first().json.action_data.subdomain,\n  $('Procesar Solicitud Admin').first().json.action_data.plan_type,\n  JSON.stringify($('Procesar Solicitud Admin').first().json.action_data.features_enabled),\n  $('Procesar Solicitud Admin').first().json.action_data.initial_users,\n  JSON.stringify({\n    created_by_admin: $('Procesar Solicitud Admin').first().json.admin_user,\n    created_via: 'super_admin_portal',\n    creation_timestamp: $('Procesar Solicitud Admin').first().json.timestamp,\n    initial_config: $('Procesar Solicitud Admin').first().json.action_data\n  }),\n  $('Procesar Solicitud Admin').first().json.admin_user\n]"
        }
      },
      "id": "create-new-tenant",
      "name": "Crear Nuevo Tenant",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        1350,
        60
      ]
    },
    {
      "parameters": {
        "operation": "create",
        "resource": "execution",
        "workflowId": "provision-workflows-automatica",
        "data": "={{ JSON.stringify({\n  tenant_id: $('Crear Nuevo Tenant').first().json.id,\n  tenant_name: $('Crear Nuevo Tenant').first().json.nombre,\n  features_enabled: JSON.parse($('Crear Nuevo Tenant').first().json.features_habilitadas || '[]'),\n  admin_email: $('Crear Nuevo Tenant').first().json.email_contacto,\n  provisioning_source: 'super_admin_portal',\n  priority: 'very_high'\n}) }}"
      },
      "id": "trigger-workflow-provisioning",
      "name": "Activar Provisión Workflows",
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 2.1,
      "position": [
        1570,
        60
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.action }}",
              "operation": "equal",
              "value2": "get_platform_metrics"
            }
          ]
        }
      },
      "id": "check-platform-metrics",
      "name": "¿Métricas Plataforma?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        690,
        400
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Obtener métricas comprehensivas de la plataforma\nWITH tenant_stats AS (\n  SELECT \n    COUNT(*) as total_tenants,\n    COUNT(*) FILTER (WHERE activo = true) as active_tenants,\n    COUNT(*) FILTER (WHERE created_at >= CURRENT_DATE - INTERVAL '30 days') as new_tenants_30d,\n    COUNT(*) FILTER (WHERE created_at >= CURRENT_DATE - INTERVAL '7 days') as new_tenants_7d\n  FROM concesionarios\n),\nuser_stats AS (\n  SELECT \n    COUNT(*) as total_users,\n    COUNT(*) FILTER (WHERE activo = true) as active_users,\n    COUNT(DISTINCT concesionario_id) as tenants_with_users\n  FROM usuarios\n),\nlead_stats AS (\n  SELECT \n    COUNT(*) as total_leads,\n    COUNT(*) FILTER (WHERE fecha_creacion >= CURRENT_DATE - INTERVAL '7 days') as leads_7d,\n    COUNT(*) FILTER (WHERE estado = 'vendido') as converted_leads,\n    ROUND(AVG(score_calidad), 2) as avg_lead_score\n  FROM leads\n  WHERE fecha_creacion >= CURRENT_DATE - INTERVAL '30 days'\n),\nsurvey_stats AS (\n  SELECT \n    COUNT(*) as total_surveys,\n    COUNT(*) FILTER (WHERE fecha_respuesta >= CURRENT_DATE - INTERVAL '7 days') as surveys_7d,\n    ROUND(AVG(recomendacion), 2) as avg_nps,\n    COUNT(*) FILTER (WHERE recomendacion >= 9) as promoters,\n    COUNT(*) FILTER (WHERE recomendacion <= 6) as detractors\n  FROM encuestas_postventa\n  WHERE fecha_respuesta IS NOT NULL\n    AND fecha_respuesta >= CURRENT_DATE - INTERVAL '30 days'\n),\ncomplaint_stats AS (\n  SELECT \n    COUNT(*) as total_complaints,\n    COUNT(*) FILTER (WHERE fecha_creacion >= CURRENT_DATE - INTERVAL '7 days') as complaints_7d,\n    COUNT(*) FILTER (WHERE estado = 'cerrado') as resolved_complaints,\n    COUNT(*) FILTER (WHERE black_alert = true) as black_alerts\n  FROM reclamos\n  WHERE fecha_creacion >= CURRENT_DATE - INTERVAL '30 days'\n)\nSELECT \n  -- Estadísticas de tenants\n  ts.total_tenants,\n  ts.active_tenants,\n  ts.new_tenants_30d,\n  ts.new_tenants_7d,\n  ROUND((ts.active_tenants::decimal / NULLIF(ts.total_tenants, 0)) * 100, 2) as tenant_activation_rate,\n  \n  -- Estadísticas de usuarios\n  us.total_users,\n  us.active_users,\n  us.tenants_with_users,\n  ROUND(us.total_users::decimal / NULLIF(ts.active_tenants, 0), 2) as avg_users_per_tenant,\n  \n  -- Estadísticas de leads\n  ls.total_leads,\n  ls.leads_7d,\n  ls.converted_leads,\n  ls.avg_lead_score,\n  ROUND((ls.converted_leads::decimal / NULLIF(ls.total_leads, 0)) * 100, 2) as lead_conversion_rate,\n  \n  -- Estadísticas de encuestas\n  ss.total_surveys,\n  ss.surveys_7d,\n  ss.avg_nps,\n  ss.promoters,\n  ss.detractors,\n  ROUND(((ss.promoters - ss.detractors)::decimal / NULLIF(ss.total_surveys, 0)) * 100, 2) as nps_score,\n  \n  -- Estadísticas de reclamos\n  cs.total_complaints,\n  cs.complaints_7d,\n  cs.resolved_complaints,\n  cs.black_alerts,\n  ROUND((cs.resolved_complaints::decimal / NULLIF(cs.total_complaints, 0)) * 100, 2) as complaint_resolution_rate,\n  \n  -- Metadata\n  CURRENT_TIMESTAMP as generated_at,\n  '{{ $json.action_data.period }}' as metrics_period\n  \nFROM tenant_stats ts\nCROSS JOIN user_stats us\nCROSS JOIN lead_stats ls\nCROSS JOIN survey_stats ss\nCROSS JOIN complaint_stats cs;",
        "additionalFields": {}
      },
      "id": "get-platform-metrics",
      "name": "Obtener Métricas Plataforma",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        910,
        340
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.action }}",
              "operation": "equal",
              "value2": "get_tenant_dashboard"
            }
          ]
        }
      },
      "id": "check-tenant-dashboard",
      "name": "¿Dashboard Tenant?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        690,
        600
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Obtener dashboard completo de un tenant específico\nWITH tenant_info AS (\n  SELECT \n    id,\n    nombre,\n    activo,\n    plan_tipo,\n    limite_usuarios,\n    features_habilitadas,\n    fecha_activacion,\n    created_at\n  FROM concesionarios \n  WHERE id = $1\n),\ntenant_users AS (\n  SELECT \n    COUNT(*) as total_users,\n    COUNT(*) FILTER (WHERE activo = true) as active_users,\n    COUNT(*) FILTER (WHERE ultimo_acceso >= CURRENT_DATE - INTERVAL '7 days') as recent_active_users\n  FROM usuarios \n  WHERE concesionario_id = $1\n),\ntenant_leads AS (\n  SELECT \n    COUNT(*) as total_leads,\n    COUNT(*) FILTER (WHERE fecha_creacion >= CURRENT_DATE - INTERVAL '7 days') as leads_7d,\n    COUNT(*) FILTER (WHERE estado = 'vendido') as converted_leads,\n    ROUND(AVG(score_calidad), 2) as avg_lead_score,\n    SUM(monto_cotizacion) FILTER (WHERE monto_cotizacion > 0) as total_quoted_value\n  FROM leads \n  WHERE concesionario_id = $1\n    AND fecha_creacion >= CURRENT_DATE - INTERVAL '30 days'\n),\ntenant_surveys AS (\n  SELECT \n    COUNT(*) as total_surveys,\n    COUNT(*) FILTER (WHERE fecha_respuesta >= CURRENT_DATE - INTERVAL '7 days') as surveys_7d,\n    ROUND(AVG(recomendacion), 2) as avg_nps,\n    ROUND(AVG(satisfaccion), 2) as avg_satisfaction,\n    COUNT(*) FILTER (WHERE recomendacion <= 6) as detractors_count\n  FROM encuestas_postventa \n  WHERE concesionario_id = $1\n    AND fecha_respuesta IS NOT NULL\n    AND fecha_respuesta >= CURRENT_DATE - INTERVAL '30 days'\n),\ntenant_complaints AS (\n  SELECT \n    COUNT(*) as total_complaints,\n    COUNT(*) FILTER (WHERE fecha_creacion >= CURRENT_DATE - INTERVAL '7 days') as complaints_7d,\n    COUNT(*) FILTER (WHERE estado = 'cerrado') as resolved_complaints,\n    COUNT(*) FILTER (WHERE black_alert = true) as black_alerts,\n    ROUND(AVG(EXTRACT(EPOCH FROM (COALESCE(fecha_actualizacion, CURRENT_TIMESTAMP) - fecha_creacion))/3600), 2) as avg_resolution_hours\n  FROM reclamos \n  WHERE concesionario_id = $1\n    AND fecha_creacion >= CURRENT_DATE - INTERVAL '30 days'\n)\nSELECT \n  -- Información del tenant\n  ti.id as tenant_id,\n  ti.nombre as tenant_name,\n  ti.activo as is_active,\n  ti.plan_tipo as plan_type,\n  ti.limite_usuarios as user_limit,\n  ti.features_habilitadas as enabled_features,\n  ti.fecha_activacion as activation_date,\n  ti.created_at as creation_date,\n  \n  -- Estadísticas de usuarios\n  tu.total_users,\n  tu.active_users,\n  tu.recent_active_users,\n  ROUND((tu.active_users::decimal / NULLIF(ti.limite_usuarios, 0)) * 100, 2) as user_capacity_usage,\n  \n  -- Estadísticas de leads\n  tl.total_leads,\n  tl.leads_7d,\n  tl.converted_leads,\n  tl.avg_lead_score,\n  tl.total_quoted_value,\n  ROUND((tl.converted_leads::decimal / NULLIF(tl.total_leads, 0)) * 100, 2) as conversion_rate,\n  \n  -- Estadísticas de encuestas\n  ts.total_surveys,\n  ts.surveys_7d,\n  ts.avg_nps,\n  ts.avg_satisfaction,\n  ts.detractors_count,\n  \n  -- Estadísticas de reclamos\n  tc.total_complaints,\n  tc.complaints_7d,\n  tc.resolved_complaints,\n  tc.black_alerts,\n  tc.avg_resolution_hours,\n  ROUND((tc.resolved_complaints::decimal / NULLIF(tc.total_complaints, 0)) * 100, 2) as complaint_resolution_rate,\n  \n  -- Scoring de salud del tenant (0-100)\n  LEAST(100, GREATEST(0, \n    COALESCE(tu.active_users * 20, 0) + \n    COALESCE(LEAST(30, tl.avg_lead_score * 3), 0) +\n    COALESCE(LEAST(25, ts.avg_nps * 2.5), 0) +\n    COALESCE(LEAST(25, tc.complaint_resolution_rate * 0.25), 0)\n  )) as tenant_health_score,\n  \n  -- Metadata\n  CURRENT_TIMESTAMP as dashboard_generated_at,\n  '{{ $json.action_data.metrics_period }}' as metrics_period\n  \nFROM tenant_info ti\nCROSS JOIN tenant_users tu\nCROSS JOIN tenant_leads tl\nCROSS JOIN tenant_surveys ts\nCROSS JOIN tenant_complaints tc;",
        "additionalFields": {
          "queryParameters": "=[$json.action_data.tenant_id]"
        }
      },
      "id": "get-tenant-dashboard",
      "name": "Obtener Dashboard Tenant",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        910,
        540
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generar respuesta estructurada para Super-Admin\nconst allInputs = $input.all();\nconst originalRequest = $('Procesar Solicitud Admin').first().json;\n\n// Función para formatear respuestas según el tipo de acción\nfunction formatResponse(action, data, originalRequest) {\n  const baseResponse = {\n    success: true,\n    action: action,\n    action_id: originalRequest.action_id,\n    timestamp: new Date().toISOString(),\n    admin_user: originalRequest.admin_user\n  };\n  \n  switch (action) {\n    case 'create_tenant':\n      return {\n        ...baseResponse,\n        message: 'Tenant creado exitosamente',\n        data: {\n          tenant_id: data.id,\n          tenant_name: data.nombre,\n          activation_date: data.fecha_activacion,\n          features_enabled: JSON.parse(data.features_habilitadas || '[]'),\n          plan_type: data.plan_tipo,\n          user_limit: data.limite_usuarios,\n          subdomain: data.subdomain,\n          next_steps: [\n            'Configurar integración WhatsApp',\n            'Configurar Chatwoot',\n            'Crear usuarios iniciales',\n            'Configurar workflows específicos'\n          ],\n          provisioning_status: 'initiated',\n          estimated_setup_time: '15-30 minutos'\n        }\n      };\n      \n    case 'get_platform_metrics':\n      return {\n        ...baseResponse,\n        message: 'Métricas de plataforma obtenidas exitosamente',\n        data: {\n          platform_overview: {\n            total_tenants: data.total_tenants,\n            active_tenants: data.active_tenants,\n            tenant_activation_rate: `${data.tenant_activation_rate}%`,\n            new_tenants_7d: data.new_tenants_7d,\n            new_tenants_30d: data.new_tenants_30d\n          },\n          user_metrics: {\n            total_users: data.total_users,\n            active_users: data.active_users,\n            avg_users_per_tenant: data.avg_users_per_tenant,\n            tenants_with_users: data.tenants_with_users\n          },\n          business_metrics: {\n            leads: {\n              total: data.total_leads,\n              recent_7d: data.leads_7d,\n              conversion_rate: `${data.lead_conversion_rate}%`,\n              avg_quality_score: data.avg_lead_score\n            },\n            surveys: {\n              total: data.total_surveys,\n              recent_7d: data.surveys_7d,\n              nps_score: data.nps_score,\n              avg_rating: data.avg_nps,\n              promoters: data.promoters,\n              detractors: data.detractors\n            },\n            complaints: {\n              total: data.total_complaints,\n              recent_7d: data.complaints_7d,\n              resolution_rate: `${data.complaint_resolution_rate}%`,\n              black_alerts: data.black_alerts\n            }\n          },\n          generated_at: data.generated_at,\n          metrics_period: data.metrics_period\n        }\n      };\n      \n    case 'get_tenant_dashboard':\n      const healthStatus = data.tenant_health_score >= 80 ? 'excellent' : \n                          data.tenant_health_score >= 60 ? 'good' : \n                          data.tenant_health_score >= 40 ? 'warning' : 'critical';\n      \n      return {\n        ...baseResponse,\n        message: 'Dashboard de tenant obtenido exitosamente',\n        data: {\n          tenant_info: {\n            id: data.tenant_id,\n            name: data.tenant_name,\n            status: data.is_active ? 'active' : 'inactive',\n            plan_type: data.plan_type,\n            activation_date: data.activation_date,\n            health_score: data.tenant_health_score,\n            health_status: healthStatus\n          },\n          performance_summary: {\n            user_utilization: `${data.user_capacity_usage}%`,\n            lead_conversion: `${data.conversion_rate}%`,\n            customer_satisfaction: data.avg_nps,\n            complaint_resolution: `${data.complaint_resolution_rate}%`\n          },\n          detailed_metrics: {\n            users: {\n              total: data.total_users,\n              active: data.active_users,\n              recent_active: data.recent_active_users,\n              capacity_usage: `${data.user_capacity_usage}%`\n            },\n            leads: {\n              total_30d: data.total_leads,\n              recent_7d: data.leads_7d,\n              converted: data.converted_leads,\n              avg_score: data.avg_lead_score,\n              total_quoted_value: data.total_quoted_value\n            },\n            surveys: {\n              total_30d: data.total_surveys,\n              recent_7d: data.surveys_7d,\n              nps: data.avg_nps,\n              satisfaction: data.avg_satisfaction,\n              detractors: data.detractors_count\n            },\n            complaints: {\n              total_30d: data.total_complaints,\n              recent_7d: data.complaints_7d,\n              resolved: data.resolved_complaints,\n              black_alerts: data.black_alerts,\n              avg_resolution_hours: data.avg_resolution_hours\n            }\n          },\n          recommendations: getRecommendations(data, healthStatus),\n          dashboard_generated_at: data.dashboard_generated_at\n        }\n      };\n      \n    default:\n      return {\n        ...baseResponse,\n        message: 'Acción procesada exitosamente',\n        data: data\n      };\n  }\n}\n\n// Función para generar recomendaciones basadas en métricas\nfunction getRecommendations(data, healthStatus) {\n  const recommendations = [];\n  \n  if (data.user_capacity_usage > 90) {\n    recommendations.push({\n      type: 'warning',\n      category: 'capacity',\n      message: 'Capacidad de usuarios cerca del límite',\n      action: 'Considerar upgrade de plan o optimización de usuarios'\n    });\n  }\n  \n  if (data.conversion_rate < 10) {\n    recommendations.push({\n      type: 'improvement',\n      category: 'sales',\n      message: 'Baja tasa de conversión de leads',\n      action: 'Revisar proceso de seguimiento y calidad de leads'\n    });\n  }\n  \n  if (data.avg_nps < 7) {\n    recommendations.push({\n      type: 'critical',\n      category: 'satisfaction',\n      message: 'NPS por debajo del promedio',\n      action: 'Implementar plan de mejora de experiencia al cliente'\n    });\n  }\n  \n  if (data.black_alerts > 0) {\n    recommendations.push({\n      type: 'urgent',\n      category: 'complaints',\n      message: `${data.black_alerts} alertas Black Alert activas`,\n      action: 'Atención inmediata requerida para reclamos críticos'\n    });\n  }\n  \n  if (recommendations.length === 0) {\n    recommendations.push({\n      type: 'success',\n      category: 'overall',\n      message: 'Tenant funcionando correctamente',\n      action: 'Mantener las mejores prácticas actuales'\n    });\n  }\n  \n  return recommendations;\n}\n\n// Procesar la respuesta\nlet responseData;\nlet success = true;\n\ntry {\n  if (allInputs.length === 0) {\n    throw new Error('No hay datos para procesar');\n  }\n  \n  const data = allInputs[0].json;\n  responseData = formatResponse(originalRequest.action, data, originalRequest);\n  \n} catch (error) {\n  success = false;\n  responseData = {\n    success: false,\n    error: 'PROCESSING_ERROR',\n    message: error.message,\n    action: originalRequest.action,\n    action_id: originalRequest.action_id,\n    timestamp: new Date().toISOString(),\n    admin_user: originalRequest.admin_user\n  };\n}\n\n// Log del resultado\nconsole.log('Admin response generated:', {\n  action_id: originalRequest.action_id,\n  action: originalRequest.action,\n  success: success,\n  timestamp: new Date().toISOString()\n});\n\nreturn [{ json: { ...responseData, success } }];"
      },
      "id": "generate-admin-response",
      "name": "Generar Respuesta Admin",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [
        1790,
        400
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Registrar todas las acciones del Super-Admin para auditoría\nINSERT INTO auditoria_super_admin (\n  action_id,\n  admin_user,\n  admin_ip,\n  action_type,\n  target_tenant_id,\n  action_data,\n  success,\n  response_data,\n  timestamp,\n  created_at\n) VALUES (\n  $1,\n  $2,\n  $3,\n  $4,\n  $5,\n  $6::jsonb,\n  $7,\n  $8::jsonb,\n  $9::timestamp,\n  CURRENT_TIMESTAMP\n) RETURNING *;",
        "additionalFields": {
          "queryParameters": "=[\n  $('Procesar Solicitud Admin').first().json.action_id,\n  $('Procesar Solicitud Admin').first().json.admin_user,\n  $('Procesar Solicitud Admin').first().json.admin_ip,\n  $('Procesar Solicitud Admin').first().json.action,\n  $('Procesar Solicitud Admin').first().json.action_data.tenant_id || null,\n  JSON.stringify($('Procesar Solicitud Admin').first().json.action_data),\n  $json.success,\n  JSON.stringify($json),\n  $('Procesar Solicitud Admin').first().json.timestamp\n]"
        }
      },
      "id": "log-admin-action",
      "name": "Registrar Acción Admin",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        2010,
        400
      ]
    },
    {
      "parameters": {
        "respondWithOptions": "responseData",
        "responseData": "={{ JSON.stringify($json, null, 2) }}"
      },
      "id": "respond-admin-portal",
      "name": "Respuesta Portal Admin",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 2.1,
      "position": [
        2230,
        400
      ]
    },
    {
      "parameters": {
        "respondWithOptions": "responseData",
        "responseData": "={\n  \"success\": false,\n  \"error\": \"TENANT_ALREADY_EXISTS\",\n  \"message\": \"El tenant ya existe en el sistema\",\n  \"existing_tenant\": {\n    \"id\": \"{{ $json.id }}\",\n    \"name\": \"{{ $json.nombre }}\",\n    \"active\": {{ $json.activo }},\n    \"created_at\": \"{{ $json.created_at }}\"\n  },\n  \"action_id\": \"{{ $('Procesar Solicitud Admin').first().json.action_id }}\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}"
      },
      "id": "respond-tenant-exists",
      "name": "Respuesta Tenant Existente",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 2.1,
      "position": [
        1350,
        220
      ]
    }
  ],
  "connections": {
    "Webhook Portal Admin": {
      "main": [
        [
          {
            "node": "Procesar Solicitud Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar Solicitud Admin": {
      "main": [
        [
          {
            "node": "¿Crear Tenant?",
            "type": "main",
            "index": 0
          },
          {
            "node": "¿Métricas Plataforma?",
            "type": "main",
            "index": 0
          },
          {
            "node": "¿Dashboard Tenant?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Crear Tenant?": {
      "main": [
        [
          {
            "node": "Verificar Tenant Existente",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Verificar Tenant Existente": {
      "main": [
        [
          {
            "node": "¿Tenant Único?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Tenant Único?": {
      "main": [
        [
          {
            "node": "Crear Nuevo Tenant",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respuesta Tenant Existente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crear Nuevo Tenant": {
      "main": [
        [
          {
            "node": "Activar Provisión Workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Activar Provisión Workflows": {
      "main": [
        [
          {
            "node": "Generar Respuesta Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Métricas Plataforma?": {
      "main": [
        [
          {
            "node": "Obtener Métricas Plataforma",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Obtener Métricas Plataforma": {
      "main": [
        [
          {
            "node": "Generar Respuesta Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Dashboard Tenant?": {
      "main": [
        [
          {
            "node": "Obtener Dashboard Tenant",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Obtener Dashboard Tenant": {
      "main": [
        [
          {
            "node": "Generar Respuesta Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generar Respuesta Admin": {
      "main": [
        [
          {
            "node": "Registrar Acción Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Registrar Acción Admin": {
      "main": [
        [
          {
            "node": "Respuesta Portal Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "manejador-errores"
  },
  "staticData": {},
  "variables": {
    "PORTAL_VERSION": "1.0.0",
    "WEBHOOK_PATH": "/webhook/super-admin-portal",
    "SUPPORTED_ACTIONS": [
      "create_tenant",
      "get_platform_metrics",
      "get_tenant_dashboard",
      "update_tenant_config",
      "suspend_tenant",
      "activate_tenant",
      "bulk_tenant_operation"
    ],
    "ADMIN_SECURITY": {
      "REQUIRE_TOKEN": true,
      "LOG_ALL_ACTIONS": true,
      "MAX_BULK_SIZE": 10
    },
    "TENANT_HEALTH_THRESHOLDS": {
      "CRITICAL": 40,
      "WARNING": 60,
      "GOOD": 80
    },
    "DEFAULT_FEATURES": [
      "leads",
      "surveys",
      "complaints"
    ],
    "DEFAULT_USER_LIMIT": 5
  },
  "version": "1.0.0",
  "category": "administracion",
  "metadata": {
    "lastUpdated": "2025-08-09T04:50:00Z",
    "apiVersion": "n8n/1.0",
    "author": "OptimaCX Team",
    "support": {
      "email": "support@optimacx.com",
      "docs": "https://docs.optimacx.com/workflows/administracion"
    }
  }
}
