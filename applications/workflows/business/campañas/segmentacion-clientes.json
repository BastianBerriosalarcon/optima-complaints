{
  "name": "Segmentación de Clientes",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.WEBHOOK_URL }}/segmentacion/clientes",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "id": "webhook-segmentacion",
      "name": "Webhook Segmentación",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [240, 300],
      "webhookId": "segmentation-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "tenant-validation",
              "leftValue": "={{ $json.concesionario_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "criteria-validation",
              "leftValue": "={{ $json.criterios_segmentacion }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "validar-parametros",
      "name": "Validar Parámetros",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "value": "public"
        },
        "table": {
          "value": "clientes"
        },
        "where": {
          "values": [
            {
              "column": "concesionario_id",
              "condition": "equal",
              "value": "={{ $json.concesionario_id }}"
            },
            {
              "column": "activo",
              "condition": "equal",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "obtener-clientes",
      "name": "Obtener Clientes",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [680, 240],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase OptimaCX"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "value": "public"
        },
        "table": {
          "value": "vehiculos_clientes"
        },
        "where": {
          "values": [
            {
              "column": "concesionario_id",
              "condition": "equal",
              "value": "={{ $('webhook-segmentacion').first().$json.concesionario_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "obtener-vehiculos",
      "name": "Obtener Vehículos",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [680, 360],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase OptimaCX"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "value": "public"
        },
        "table": {
          "value": "encuestas_postventa"
        },
        "where": {
          "values": [
            {
              "column": "concesionario_id",
              "condition": "equal",
              "value": "={{ $('webhook-segmentacion').first().$json.concesionario_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "obtener-encuestas",
      "name": "Obtener Encuestas",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [680, 480],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase OptimaCX"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Procesar segmentación de clientes\nconst clientes = $input.first().json;\nconst vehiculos = $input.all()[1].json;\nconst encuestas = $input.all()[2].json;\nconst criterios = $('webhook-segmentacion').first().json.criterios_segmentacion;\n\n// Crear mapa de vehículos por cliente\nconst vehiculosPorCliente = {};\nvehiculos.forEach(vehiculo => {\n  if (!vehiculosPorCliente[vehiculo.cliente_id]) {\n    vehiculosPorCliente[vehiculo.cliente_id] = [];\n  }\n  vehiculosPorCliente[vehiculo.cliente_id].push(vehiculo);\n});\n\n// Crear mapa de encuestas por cliente\nconst encuestasPorCliente = {};\nencuestas.forEach(encuesta => {\n  if (!encuestasPorCliente[encuesta.rut_cliente]) {\n    encuestasPorCliente[encuesta.rut_cliente] = [];\n  }\n  encuestasPorCliente[encuesta.rut_cliente].push(encuesta);\n});\n\n// Función para calcular satisfacción promedio\nfunction calcularSatisfaccionPromedio(encuestasCliente) {\n  if (!encuestasCliente || encuestasCliente.length === 0) return null;\n  \n  const promedios = encuestasCliente.map(enc => {\n    const total = (enc.satisfaccion_general + enc.calidad_atencion + \n                  enc.tiempo_respuesta + enc.resolucion_problema) / 4;\n    return total;\n  });\n  \n  return promedios.reduce((sum, prom) => sum + prom, 0) / promedios.length;\n}\n\n// Función para determinar segmento del cliente\nfunction determinarSegmento(cliente, vehiculosCliente, encuestasCliente) {\n  const segmentos = [];\n  \n  // Segmentación por edad del vehículo\n  if (vehiculosCliente && vehiculosCliente.length > 0) {\n    const vehiculoMasReciente = vehiculosCliente.reduce((mas_reciente, vehiculo) => {\n      return new Date(vehiculo.fecha_compra) > new Date(mas_reciente.fecha_compra) ? vehiculo : mas_reciente;\n    });\n    \n    const añosVehiculo = new Date().getFullYear() - vehiculoMasReciente.año;\n    \n    if (añosVehiculo <= 1) {\n      segmentos.push('vehiculo_nuevo');\n    } else if (añosVehiculo <= 3) {\n      segmentos.push('vehiculo_semi_nuevo');\n    } else {\n      segmentos.push('vehiculo_usado');\n    }\n  }\n  \n  // Segmentación por satisfacción\n  const satisfaccionPromedio = calcularSatisfaccionPromedio(encuestasCliente);\n  if (satisfaccionPromedio !== null) {\n    if (satisfaccionPromedio >= 8) {\n      segmentos.push('alta_satisfaccion');\n    } else if (satisfaccionPromedio >= 6) {\n      segmentos.push('satisfaccion_media');\n    } else {\n      segmentos.push('baja_satisfaccion');\n    }\n  }\n  \n  // Segmentación por frecuencia de servicio\n  if (encuestasCliente && encuestasCliente.length > 0) {\n    if (encuestasCliente.length >= 4) {\n      segmentos.push('cliente_frecuente');\n    } else if (encuestasCliente.length >= 2) {\n      segmentos.push('cliente_regular');\n    } else {\n      segmentos.push('cliente_nuevo');\n    }\n  } else {\n    segmentos.push('sin_servicios');\n  }\n  \n  return segmentos;\n}\n\n// Aplicar criterios de segmentación\nconst clientesSegmentados = clientes.map(cliente => {\n  const vehiculosCliente = vehiculosPorCliente[cliente.id] || [];\n  const encuestasCliente = encuestasPorCliente[cliente.rut] || [];\n  \n  const segmentos = determinarSegmento(cliente, vehiculosCliente, encuestasCliente);\n  const satisfaccionPromedio = calcularSatisfaccionPromedio(encuestasCliente);\n  \n  return {\n    ...cliente,\n    segmentos: segmentos,\n    cantidad_vehiculos: vehiculosCliente.length,\n    cantidad_servicios: encuestasCliente.length,\n    satisfaccion_promedio: satisfaccionPromedio ? parseFloat(satisfaccionPromedio.toFixed(2)) : null,\n    ultimo_servicio: encuestasCliente.length > 0 ? \n      encuestasCliente.reduce((ultimo, enc) => \n        new Date(enc.fecha_encuesta) > new Date(ultimo.fecha_encuesta) ? enc : ultimo\n      ).fecha_encuesta : null\n  };\n});\n\n// Filtrar según criterios específicos si se proporcionan\nlet clientesFiltrados = clientesSegmentados;\n\nif (criterios.segmentos && criterios.segmentos.length > 0) {\n  clientesFiltrados = clientesFiltrados.filter(cliente => \n    criterios.segmentos.some(segmento => cliente.segmentos.includes(segmento))\n  );\n}\n\nif (criterios.satisfaccion_minima) {\n  clientesFiltrados = clientesFiltrados.filter(cliente => \n    cliente.satisfaccion_promedio !== null && \n    cliente.satisfaccion_promedio >= criterios.satisfaccion_minima\n  );\n}\n\nif (criterios.satisfaccion_maxima) {\n  clientesFiltrados = clientesFiltrados.filter(cliente => \n    cliente.satisfaccion_promedio !== null && \n    cliente.satisfaccion_promedio <= criterios.satisfaccion_maxima\n  );\n}\n\n// Crear resumen de segmentación\nconst resumenSegmentos = {};\nclientesFiltrados.forEach(cliente => {\n  cliente.segmentos.forEach(segmento => {\n    resumenSegmentos[segmento] = (resumenSegmentos[segmento] || 0) + 1;\n  });\n});\n\nconst resultado = {\n  total_clientes_originales: clientes.length,\n  total_clientes_filtrados: clientesFiltrados.length,\n  criterios_aplicados: criterios,\n  resumen_segmentos: resumenSegmentos,\n  clientes_segmentados: clientesFiltrados,\n  concesionario_id: $('webhook-segmentacion').first().json.concesionario_id\n};\n\nreturn { resultado };"
      },
      "id": "procesar-segmentacion",
      "name": "Procesar Segmentación",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "value": "public"
        },
        "table": {
          "value": "segmentaciones_clientes"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "concesionario_id": "={{ $json.resultado.concesionario_id }}",
            "fecha_segmentacion": "={{ new Date().toISOString() }}",
            "criterios_aplicados": "={{ JSON.stringify($json.resultado.criterios_aplicados) }}",
            "total_clientes": "={{ $json.resultado.total_clientes_filtrados }}",
            "resumen_segmentos": "={{ JSON.stringify($json.resultado.resumen_segmentos) }}",
            "lista_clientes": "={{ JSON.stringify($json.resultado.clientes_segmentados) }}"
          }
        },
        "options": {}
      },
      "id": "guardar-segmentacion",
      "name": "Guardar Segmentación",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1120, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase OptimaCX"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  success: true,\n  segmentacion: $json.resultado,\n  mensaje: 'Segmentación de clientes completada exitosamente'\n} }}"
      },
      "id": "respuesta-segmentacion",
      "name": "Respuesta Segmentación",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  success: false,\n  error: 'Parámetros requeridos faltantes',\n  mensaje: 'Se requieren concesionario_id y criterios_segmentacion'\n} }}",
        "options": {
          "responseCode": 400
        }
      },
      "id": "error-parametros",
      "name": "Error Parámetros",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [680, 460]
    }
  ],
  "pinData": {},
  "connections": {
    "webhook-segmentacion": {
      "main": [
        [
          {
            "node": "validar-parametros",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validar-parametros": {
      "main": [
        [
          {
            "node": "obtener-clientes",
            "type": "main",
            "index": 0
          },
          {
            "node": "obtener-vehiculos",
            "type": "main",
            "index": 0
          },
          {
            "node": "obtener-encuestas",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "error-parametros",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtener-clientes": {
      "main": [
        [
          {
            "node": "procesar-segmentacion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtener-vehiculos": {
      "main": [
        [
          {
            "node": "procesar-segmentacion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "obtener-encuestas": {
      "main": [
        [
          {
            "node": "procesar-segmentacion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "procesar-segmentacion": {
      "main": [
        [
          {
            "node": "guardar-segmentacion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "guardar-segmentacion": {
      "main": [
        [
          {
            "node": "respuesta-segmentacion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0.0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "client-segmentation"
  },
  "id": "segmentacion-clientes",
  "tags": [
    {
      "createdAt": "2024-01-15T10:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z",
      "id": "campaigns",
      "name": "campaigns"
    }
  ]
}
