{
  "name": "Agregador de Métricas de Encuestas",
  "description": "Workflow que calcula y agrega métricas de encuestas (origen, rendimiento de ejecutivos, NPS) para optimizar dashboards.",
  "tags": ["dashboard", "metrics", "surveys", "aggregation"],
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 4
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Ejecutar cada 4 horas",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Consulta para agregar métricas de encuestas de las últimas 24 horas\nSELECT \n    concesionario_id,\n    origen,\n    COUNT(*) as total_encuestas,\n    COALESCE(jsonb_agg(jsonb_build_object('ejecutivo_id', cc_agent_id, 'nombre', cc_agent_name, 'total', count)) FILTER (WHERE origen = 'Llamada'), '[]'::jsonb) as rendimiento_ejecutivos,\n    AVG(recomendacion) as nps_promedio,\n    AVG(satisfaccion) as satisfaccion_promedio\nFROM \n    encuestas_postventa\nWHERE \n    fecha_completado >= NOW() - INTERVAL '24 hours'\nGROUP BY \n    concesionario_id, origen;"
      },
      "id": "query-survey-metrics",
      "name": "Consultar Métricas de Encuestas",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [470, 300]
    },
    {
      "parameters": {
        "jsCode": "// Procesar y transformar los datos para la tabla de métricas\nconst rawMetrics = $input.all();\nconst processedData = {};\n\nrawMetrics.forEach(item => {\n  const metric = item.json;\n  const tenantId = metric.concesionario_id;\n\n  if (!processedData[tenantId]) {\n    processedData[tenantId] = {\n      concesionario_id: tenantId,\n      periodo: 'ultimas_24_horas',\n      fecha_calculo: new Date().toISOString().split('T')[0],\n      total_qr: 0,\n      total_whatsapp: 0,\n      total_llamada: 0,\n      total_general: 0,\n      rendimiento_ejecutivos: [],\n      nps_general: 0,\n      satisfaccion_promedio: 0,\n      nps_scores: [],\n      satisfaction_scores: []\n    };\n  }\n\n  const tenantData = processedData[tenantId];\n  tenantData.total_general += parseInt(metric.total_encuestas, 10);\n\n  if (metric.origen === 'QR') tenantData.total_qr = parseInt(metric.total_encuestas, 10);\n  if (metric.origen === 'WhatsApp') tenantData.total_whatsapp = parseInt(metric.total_encuestas, 10);\n  if (metric.origen === 'Llamada') {\n    tenantData.total_llamada = parseInt(metric.total_encuestas, 10);\n    tenantData.rendimiento_ejecutivos = metric.rendimiento_ejecutivos;\n  }\n\n  if (metric.nps_promedio) tenantData.nps_scores.push(parseFloat(metric.nps_promedio));\n  if (metric.satisfaccion_promedio) tenantData.satisfaction_scores.push(parseFloat(metric.satisfaccion_promedio));\n});\n\n// Calcular promedios finales\nObject.values(processedData).forEach(tenant => {\n  if (tenant.nps_scores.length > 0) {\n    tenant.nps_general = tenant.nps_scores.reduce((a, b) => a + b, 0) / tenant.nps_scores.length;\n  }\n  if (tenant.satisfaction_scores.length > 0) {\n    tenant.satisfaccion_promedio = tenant.satisfaction_scores.reduce((a, b) => a + b, 0) / tenant.satisfaction_scores.length;\n  }\n  delete tenant.nps_scores;\n  delete tenant.satisfaction_scores;\n});\n\nreturn Object.values(processedData).map(item => ({ json: item }));"
      },
      "id": "process-metrics",
      "name": "Procesar Métricas",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [690, 300]
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": "public",
        "table": "metricas_dashboard_encuestas",
        "conflictKey": "concesionario_id,periodo,fecha_calculo",
        "columns": "concesionario_id,periodo,fecha_calculo,total_qr,total_whatsapp,total_llamada,total_general,rendimiento_ejecutivos,nps_general,satisfaccion_promedio",
        "additionalFields": {
          "values": "={{ [$json.concesionario_id, $json.periodo, $json.fecha_calculo, $json.total_qr, $json.total_whatsapp, $json.total_llamada, $json.total_general, JSON.stringify($json.rendimiento_ejecutivos), $json.nps_general, $json.satisfaccion_promedio] }}"
        }
      },
      "id": "upsert-metrics",
      "name": "Guardar Métricas en BD",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [910, 300]
    }
  ],
  "connections": {
    "Ejecutar cada 4 horas": {
      "main": [
        [
          {
            "node": "Consultar Métricas de Encuestas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consultar Métricas de Encuestas": {
      "main": [
        [
          {
            "node": "Procesar Métricas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar Métricas": {
      "main": [
        [
          {
            "node": "Guardar Métricas en BD",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  }
}