{
  "name": "Actualizador Automático de Estados de Leads",
  "description": "Workflow que actualiza automáticamente estados de leads basado en reglas de tiempo y actividad",
  "tags": ["leads", "estados", "automatico", "srp"],
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 6
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Trigger Cada 6 Horas",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Inicializar contexto de actualización automática\nreturn [{\n  json: {\n    execution_start: new Date().toISOString(),\n    batch_id: `update_${Date.now()}`,\n    max_updates_per_execution: 50,\n    execution_timeout_minutes: 30\n  }\n}];"
      },
      "id": "init-context",
      "name": "Inicializar Contexto",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH leads_para_actualizacion AS (\n  -- Leads nuevos sin asignar por más de 24 horas\n  SELECT \n    'abandono_sin_asignar' as razon_actualizacion,\n    'perdido' as nuevo_estado,\n    'alta' as prioridad_actualizacion,\n    l.id as lead_id,\n    l.nombre_cliente,\n    l.telefono_cliente,\n    l.estado as estado_actual,\n    l.concesionario_id,\n    con.nombre as concesionario_nombre,\n    l.fecha_creacion,\n    NULL as asesor_asignado_id,\n    'Sin asignar' as asesor_nombre,\n    EXTRACT(EPOCH FROM (NOW() - l.fecha_creacion))/3600 as horas_sin_asignar,\n    'Marcado como perdido: más de 24 horas sin asignar asesor' as observacion_automatica\n  FROM leads l\n  JOIN concesionarios con ON l.concesionario_id = con.id\n  WHERE l.estado = 'nuevo'\n    AND l.asesor_asignado_id IS NULL\n    AND l.fecha_creacion < NOW() - INTERVAL '24 hours'\n    AND l.fecha_creacion > NOW() - INTERVAL '30 days'\n    \n  UNION ALL\n  \n  -- Leads asignados sin contacto por más de 7 días\n  SELECT \n    'abandono_sin_contacto' as razon_actualizacion,\n    'perdido' as nuevo_estado,\n    'media' as prioridad_actualizacion,\n    l.id as lead_id,\n    l.nombre_cliente,\n    l.telefono_cliente,\n    l.estado as estado_actual,\n    l.concesionario_id,\n    con.nombre as concesionario_nombre,\n    l.fecha_asignacion as fecha_referencia,\n    l.asesor_asignado_id,\n    COALESCE(a.nombre, 'Asesor no encontrado') as asesor_nombre,\n    EXTRACT(EPOCH FROM (NOW() - l.fecha_asignacion))/3600 as horas_sin_contacto,\n    'Marcado como perdido: más de 7 días sin primer contacto' as observacion_automatica\n  FROM leads l\n  JOIN concesionarios con ON l.concesionario_id = con.id\n  LEFT JOIN asesores a ON l.asesor_asignado_id = a.id\n  WHERE l.estado = 'asignado'\n    AND l.fecha_primer_contacto IS NULL\n    AND l.fecha_asignacion < NOW() - INTERVAL '7 days'\n    AND l.fecha_asignacion > NOW() - INTERVAL '60 days'\n    \n  UNION ALL\n  \n  -- Leads en seguimiento sin actividad por más de 30 días\n  SELECT \n    'inactividad_prolongada' as razon_actualizacion,\n    'inactivo' as nuevo_estado,\n    'baja' as prioridad_actualizacion,\n    l.id as lead_id,\n    l.nombre_cliente,\n    l.telefono_cliente,\n    l.estado as estado_actual,\n    l.concesionario_id,\n    con.nombre as concesionario_nombre,\n    COALESCE(l.fecha_ultimo_seguimiento, l.fecha_primer_contacto) as fecha_referencia,\n    l.asesor_asignado_id,\n    COALESCE(a.nombre, 'Asesor no encontrado') as asesor_nombre,\n    EXTRACT(EPOCH FROM (NOW() - COALESCE(l.fecha_ultimo_seguimiento, l.fecha_primer_contacto)))/3600 as horas_sin_actividad,\n    'Marcado como inactivo: más de 30 días sin seguimiento' as observacion_automatica\n  FROM leads l\n  JOIN concesionarios con ON l.concesionario_id = con.id\n  LEFT JOIN asesores a ON l.asesor_asignado_id = a.id\n  WHERE l.estado IN ('contactado', 'seguimiento', 'en_seguimiento')\n    AND COALESCE(l.fecha_ultimo_seguimiento, l.fecha_primer_contacto) < NOW() - INTERVAL '30 days'\n    AND COALESCE(l.fecha_ultimo_seguimiento, l.fecha_primer_contacto) > NOW() - INTERVAL '90 days'\n)\nSELECT *\nFROM leads_para_actualizacion\nORDER BY \n  CASE prioridad_actualizacion\n    WHEN 'alta' THEN 1\n    WHEN 'media' THEN 2\n    WHEN 'baja' THEN 3\n  END,\n  fecha_referencia ASC\nLIMIT {{ $json.max_updates_per_execution || 50 }};",
        "options": {}
      },
      "id": "get-leads-to-update",
      "name": "Obtener Leads para Actualizar",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [600, 300]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $input.all().length }}",
              "operation": "greaterThan",
              "value2": 0
            }
          ]
        }
      },
      "id": "has-updates",
      "name": "¿Hay Actualizaciones?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [800, 300]
    },
    {
      "parameters": {
        "jsCode": "// Procesar actualizaciones con manejo de errores\ntry {\n  const items = $input.all();\n  const batchId = $('Inicializar Contexto').first().json.batch_id;\n  const actualizaciones = [];\n  const stats = {\n    total: items.length,\n    por_razon: {},\n    por_estado: {},\n    errores: []\n  };\n\n  for (const item of items) {\n    try {\n      const data = item.json;\n      \n      // Validar datos requeridos\n      if (!data.lead_id || !data.nuevo_estado || !data.razon_actualizacion) {\n        stats.errores.push(`Lead ${data.lead_id || 'ID desconocido'}: Datos incompletos`);\n        continue;\n      }\n      \n      const actualizacion = {\n        batch_id: batchId,\n        lead_id: data.lead_id,\n        estado_anterior: data.estado_actual,\n        nuevo_estado: data.nuevo_estado,\n        razon_actualizacion: data.razon_actualizacion,\n        prioridad: data.prioridad_actualizacion,\n        \n        // Datos del cliente\n        cliente_nombre: data.nombre_cliente || 'Sin nombre',\n        cliente_telefono: data.telefono_cliente,\n        \n        // Datos del concesionario\n        concesionario_id: data.concesionario_id,\n        concesionario_nombre: data.concesionario_nombre,\n        \n        // Datos del asesor\n        asesor_id: data.asesor_asignado_id,\n        asesor_nombre: data.asesor_nombre || 'Sin asignar',\n        \n        // Observaciones y metadatos\n        observacion_automatica: data.observacion_automatica,\n        motivo_perdida: data.nuevo_estado.includes('perdido') ? (data.razon_actualizacion === 'abandono_sin_asignar' ? 'Sin asignación de asesor' : 'Sin contacto inicial') : null,\n        timestamp: new Date().toISOString(),\n        cambio_automatico: true\n      };\n      \n      actualizaciones.push({ json: actualizacion });\n      \n      // Actualizar estadísticas\n      stats.por_razon[data.razon_actualizacion] = (stats.por_razon[data.razon_actualizacion] || 0) + 1;\n      stats.por_estado[data.nuevo_estado] = (stats.por_estado[data.nuevo_estado] || 0) + 1;\n      \n    } catch (error) {\n      stats.errores.push(`Error procesando lead ${item.json.lead_id}: ${error.message}`);\n    }\n  }\n  \n  // Guardar estadísticas en contexto\n  $execution.set('update_stats', stats);\n  \n  return actualizaciones;\n  \n} catch (error) {\n  return [{\n    json: {\n      status: 'error',\n      message: 'Error al procesar actualizaciones de leads',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "process-updates",
      "name": "Procesar Actualizaciones",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.status }}",
              "operation": "notEqual",
              "value2": "error"
            }
          ]
        }
      },
      "id": "processing-success",
      "name": "¿Procesamiento Exitoso?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE leads SET estado = $1, motivo_perdida = $2, fecha_cierre = $3, observaciones = COALESCE(observaciones, '') || CASE WHEN COALESCE(observaciones, '') = '' THEN '' ELSE ' | ' END || $4, fecha_actualizacion_automatica = $5, actualizado_automaticamente = true WHERE id = $6",
        "additionalFields": {
          "queryParameters": "={{ [$json.nuevo_estado, $json.motivo_perdida, ($json.nuevo_estado.includes('perdido') || $json.nuevo_estado.includes('inactivo') ? $json.timestamp : null), $json.observacion_automatica, $json.timestamp, $json.lead_id] }}"
        }
      },
      "id": "update-lead-status",
      "name": "Actualizar Estado Lead",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [1400, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO historial_estados_leads (lead_id, estado_anterior, estado_nuevo, razon_cambio, cambio_automatico, observaciones, fecha_cambio, batch_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)",
        "additionalFields": {
          "queryParameters": "={{ [$json.lead_id, $json.estado_anterior, $json.nuevo_estado, $json.razon_actualizacion, true, $json.observacion_automatica, $json.timestamp, $json.batch_id] }}"
        }
      },
      "id": "log-state-change",
      "name": "Registrar Cambio de Estado",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [1600, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generar resumen de actualizaciones realizadas\nconst stats = $execution.get('update_stats') || { total: 0, por_razon: {}, por_estado: {}, errores: [] };\nconst batchId = $('Inicializar Contexto').first().json.batch_id;\n\nreturn [{\n  json: {\n    status: 'success',\n    message: 'Actualización automática de estados completada',\n    batch_id: batchId,\n    summary: {\n      total_actualizaciones: stats.total,\n      actualizaciones_exitosas: stats.total - stats.errores.length,\n      errores: stats.errores.length,\n      por_razon: stats.por_razon,\n      por_nuevo_estado: stats.por_estado\n    },\n    errors: stats.errores,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "generate-summary",
      "name": "Generar Resumen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1800, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO actualizaciones_automaticas_log (tipo_actualizacion, total_procesados, por_razon, por_estado, errores_count, fecha_ejecucion, batch_id, metadata) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)",
        "additionalFields": {
          "queryParameters": "={{ ['estados_leads', $json.summary.total_actualizaciones, JSON.stringify($json.summary.por_razon), JSON.stringify($json.summary.por_nuevo_estado), $json.summary.errores, $json.timestamp, $json.batch_id, JSON.stringify($json.summary)] }}"
        }
      },
      "id": "log-execution",
      "name": "Registrar Ejecución",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "jsCode": "// Respuesta cuando no hay leads para actualizar\nreturn [{\n  json: {\n    status: 'no_updates',\n    message: 'No hay leads que requieran actualización automática',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "no-updates-response",
      "name": "Sin Actualizaciones",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1000, 500]
    },
    {
      "parameters": {
        "jsCode": "// Respuesta de error en el procesamiento\nreturn [{\n  json: {\n    status: 'error',\n    message: 'Error en el procesamiento de actualizaciones',\n    error_details: $json,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "error-response",
      "name": "Respuesta Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1400, 500]
    }
  ],
  "connections": {
    "Trigger Cada 6 Horas": { "main": [[{ "node": "Inicializar Contexto", "type": "main", "index": 0 }]] },
    "Inicializar Contexto": { "main": [[{ "node": "Obtener Leads para Actualizar", "type": "main", "index": 0 }]] },
    "Obtener Leads para Actualizar": { "main": [[{ "node": "¿Hay Actualizaciones?", "type": "main", "index": 0 }]] },
    "¿Hay Actualizaciones?": { "main": [
      [{ "node": "Procesar Actualizaciones", "type": "main", "index": 0 }],
      [{ "node": "Sin Actualizaciones", "type": "main", "index": 0 }]
    ] },
    "Procesar Actualizaciones": { "main": [[{ "node": "¿Procesamiento Exitoso?", "type": "main", "index": 0 }]] },
    "¿Procesamiento Exitoso?": { "main": [
      [{ "node": "Actualizar Estado Lead", "type": "main", "index": 0 }],
      [{ "node": "Respuesta Error", "type": "main", "index": 0 }]
    ] },
    "Actualizar Estado Lead": { "main": [[{ "node": "Registrar Cambio de Estado", "type": "main", "index": 0 }]] },
    "Registrar Cambio de Estado": { "main": [[{ "node": "Generar Resumen", "type": "main", "index": 0 }]] },
    "Generar Resumen": { "main": [[{ "node": "Registrar Ejecución", "type": "main", "index": 0 }]] }
  },
  "settings": {
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "executionTimeout": 1800
  }
}
