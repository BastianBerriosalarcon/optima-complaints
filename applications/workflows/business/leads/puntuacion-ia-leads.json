{
  "name": "Lead - Scoring de Calidad",
  "description": "Workflow enfocado en calcular el score de calidad de un lead basado en el análisis de IA.",
  "tags": [
    "scoring",
    "lead",
    "srp"
  ],
  "nodes": [
    {
      "parameters": {
        "workflowId": "{{ $json.workflowId }}"
      },
      "id": "workflow-trigger",
      "name": "Trigger del Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 2.1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "jsCode": "// Validar payload para scoring de leads\nconst inData = $input.first().json || {};\nconst required = ['intent', 'priority', 'urgency_level', 'confidence_score'];\nconst missing = required.filter(field => !inData[field]);\nconst valid = missing.length === 0 && typeof inData.urgency_level === 'number' && typeof inData.confidence_score === 'number';\nreturn [{ json: { ...inData, valid, missing_fields: missing } }];"
      },
      "id": "validate-scoring-payload",
      "name": "Validar Payload Scoring",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": { "caseSensitive": true, "typeValidation": "strict" },
          "conditions": [
            {
              "leftValue": "={{ $json.valid }}",
              "operator": { "type": "boolean", "operation": "isTrue" },
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-valid-scoring-payload",
      "name": "¿Payload Válido?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [600, 300]
    },
    {
      "parameters": {
        "jsCode": "// Calcular score de calidad del lead basado en análisis IA\nconst data = $input.first().json;\nlet score = 0;\nlet factors = [];\n\n// Factor 1: Intención (40% del score)\nconst intentScores = {\n  'lead_generation': 100,\n  'information_request': 80,\n  'support': 60,\n  'complaint': 40,\n  'other': 30\n};\nconst intentScore = intentScores[data.intent] || 30;\nscore += intentScore * 0.4;\nfactors.push({ factor: 'intent', value: data.intent, score: intentScore, weight: 0.4 });\n\n// Factor 2: Prioridad (25% del score)\nconst priorityScores = { 'high': 100, 'medium': 70, 'low': 40 };\nconst priorityScore = priorityScores[data.priority] || 40;\nscore += priorityScore * 0.25;\nfactors.push({ factor: 'priority', value: data.priority, score: priorityScore, weight: 0.25 });\n\n// Factor 3: Nivel de urgencia (20% del score)\nconst urgencyScore = Math.min(100, Math.max(0, data.urgency_level * 10));\nscore += urgencyScore * 0.2;\nfactors.push({ factor: 'urgency_level', value: data.urgency_level, score: urgencyScore, weight: 0.2 });\n\n// Factor 4: Confianza de IA (15% del score)\nconst confidenceScore = Math.min(100, Math.max(0, data.confidence_score));\nscore += confidenceScore * 0.15;\nfactors.push({ factor: 'confidence_score', value: data.confidence_score, score: confidenceScore, weight: 0.15 });\n\n// Bonificaciones adicionales\nif (data.products_mentioned && data.products_mentioned.length > 0) {\n  score += 10;\n  factors.push({ factor: 'products_mentioned', value: data.products_mentioned.length, score: 10, weight: 'bonus' });\n}\n\nif (data.existing_lead_found) {\n  score += 5;\n  factors.push({ factor: 'existing_lead', value: true, score: 5, weight: 'bonus' });\n}\n\n// Normalizar score final\nconst finalScore = Math.round(Math.min(100, Math.max(0, score)));\n\n// Determinar categoría del lead\nlet category = 'cold';\nif (finalScore >= 80) category = 'hot';\nelse if (finalScore >= 60) category = 'warm';\nelse if (finalScore >= 40) category = 'lukewarm';\n\nreturn [{\n  json: {\n    ...data,\n    lead_score: finalScore,\n    lead_category: category,\n    scoring_factors: factors,\n    scoring_timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "calculate-lead-score",
      "name": "Calcular Score Lead",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [800, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE leads SET score_calidad = $1, categoria_lead = $2, scoring_factors = $3, updated_at = NOW() WHERE id = $4",
        "additionalFields": {
          "queryParameters": "={{ [$json.lead_score, $json.lead_category, JSON.stringify($json.scoring_factors), $json.lead_id] }}"
        }
      },
      "id": "update-lead-score",
      "name": "Actualizar Score en BD",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "jsCode": "// Respuesta exitosa con score calculado\nreturn [{\n  json: {\n    status: 'success',\n    lead_score: $json.lead_score,\n    lead_category: $json.lead_category,\n    scoring_factors: $json.scoring_factors,\n    message: `Score calculado: ${$json.lead_score}/100 (${$json.lead_category})`,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "success-response",
      "name": "Respuesta Exitosa",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "jsCode": "// Respuesta de error por payload inválido\nreturn [{\n  json: {\n    status: 'error',\n    message: 'Payload inválido para scoring de leads',\n    missing_fields: $json.missing_fields,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "error-response",
      "name": "Respuesta Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [800, 500]
    }
  ],
  "connections": {
    "Trigger del Workflow": { "main": [[{ "node": "Validar Payload Scoring", "type": "main", "index": 0 }]] },
    "Validar Payload Scoring": { "main": [[{ "node": "¿Payload Válido?", "type": "main", "index": 0 }]] },
    "¿Payload Válido?": { "main": [
      [{ "node": "Calcular Score Lead", "type": "main", "index": 0 }],
      [{ "node": "Respuesta Error", "type": "main", "index": 0 }]
    ] },
    "Calcular Score Lead": { "main": [[{ "node": "Actualizar Score en BD", "type": "main", "index": 0 }]] },
    "Actualizar Score en BD": { "main": [[{ "node": "Respuesta Exitosa", "type": "main", "index": 0 }]] }
  },
  "settings": {
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  }
}
