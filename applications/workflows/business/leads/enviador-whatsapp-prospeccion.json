{
  "meta": {
    "instanceId": "whatsapp-prospection-sender-001"
  },
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Obtener leads pendientes de prospecci√≥n con configuraci√≥n del concesionario\nWITH leads_prospecci√≥n AS (\n  SELECT \n    l.id as lead_id,\n    l.telefono_cliente,\n    l.nombre_cliente,\n    l.concesionario_id,\n    l.modelo_interes,\n    l.fecha_creacion,\n    con.nombre as concesionario_nombre,\n    con.whatsapp_business_token,\n    con.whatsapp_phone_id,\n    tc.whatsapp_config,\n    tc.workflow_variables,\n    ROW_NUMBER() OVER (PARTITION BY l.concesionario_id ORDER BY l.fecha_creacion DESC) as rn\n  FROM leads l\n  JOIN concesionarios con ON l.concesionario_id = con.id\n  LEFT JOIN tenant_configurations tc ON l.concesionario_id::text = tc.tenant_id\n  WHERE l.fuente_lead = 'excel_masivo'\n    AND l.estado = 'pendiente_prospecci√≥n'\n    AND l.fecha_creacion > NOW() - INTERVAL '7 days'\n    AND NOT EXISTS (\n      SELECT 1 FROM mensajes_whatsapp mw \n      WHERE mw.lead_id = l.id \n        AND mw.tipo = 'prospecci√≥n'\n        AND mw.fecha_envio > NOW() - INTERVAL '24 hours'\n    )\n),\nconfiguraciones AS (\n  SELECT DISTINCT\n    concesionario_id,\n    concesionario_nombre,\n    whatsapp_business_token,\n    whatsapp_phone_id,\n    COALESCE(\n      (whatsapp_config->>'business_token'),\n      whatsapp_business_token\n    ) as token_activo,\n    COALESCE(\n      (whatsapp_config->>'phone_number_id'),\n      whatsapp_phone_id\n    ) as phone_id_activo,\n    (\n      workflow_variables->>'custom_messages'->>'prospection_template'\n    ) as template_personalizado\n  FROM leads_prospecci√≥n\n)\nSELECT \n  lp.*,\n  c.token_activo,\n  c.phone_id_activo,\n  c.template_personalizado\nFROM leads_prospecci√≥n lp\nJOIN configuraciones c ON lp.concesionario_id = c.concesionario_id\nWHERE lp.rn <= 50 -- Limitar a 50 leads por ejecuci√≥n\nORDER BY lp.fecha_creacion ASC;",
        "options": {}
      },
      "id": "get-leads-pendientes",
      "name": "Obtener Leads para Prospecci√≥n",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [240, 300],
      "credentials": {
        "postgres": {
          "id": "supabase-main",
          "name": "Supabase Main DB"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Procesar y personalizar mensajes de prospecci√≥n por concesionario\nconst items = $input.all();\nconst mensajesPorConcesionario = {};\n\n// Templates de mensajes por defecto\nconst templateDefault = {\n  saludo: \"¬°Hola {nombre}! üëã\",\n  presentacion: \"Soy {asesor} de {concesionario}, especialista en veh√≠culos.\",\n  proposito: \"Vimos que podr√≠as estar interesado en un {modelo}. ¬øTe gustar√≠a recibir informaci√≥n actualizada sobre nuestras mejores ofertas?\",\n  llamada_accion: \"Responde S√ç si te interesa o NO si prefieres que no te contactemos m√°s.\",\n  cierre: \"¬°Esperamos poder ayudarte a encontrar tu veh√≠culo ideal! üöó‚ú®\"\n};\n\n// Plantillas espec√≠ficas por tipo de lead\nconst templatesPorTipo = {\n  premium: {\n    saludo: \"Estimado/a {nombre}, üåü\",\n    presentacion: \"Me comunico desde {concesionario}, donde nos especializamos en veh√≠culos premium.\",\n    proposito: \"He notado su inter√©s en el {modelo}. Tenemos excelentes oportunidades y financiamiento exclusivo.\",\n    llamada_accion: \"¬øLe gustar√≠a agendar una cita personalizada para conocer nuestras ofertas VIP?\",\n    cierre: \"Quedamos atentos a su respuesta. Saludos cordiales.\"\n  },\n  economico: {\n    saludo: \"¬°Hola {nombre}! üòä\",\n    presentacion: \"Te escribo desde {concesionario}, tu concesionario de confianza.\",\n    proposito: \"Sabemos que est√°s buscando un {modelo} y tenemos ofertas incre√≠bles que te van a encantar.\",\n    llamada_accion: \"¬øTe interesa conocer nuestras promociones especiales? ¬°Solo responde S√ç!\",\n    cierre: \"¬°Te esperamos para hacer realidad tu sue√±o del auto propio! üéâ\"\n  },\n  familiar: {\n    saludo: \"¬°Hola {nombre}! üë®‚Äçüë©‚Äçüëß‚Äçüë¶\",\n    presentacion: \"Somos {concesionario}, expertos en veh√≠culos para familias.\",\n    proposito: \"Vimos tu inter√©s en el {modelo}, perfecto para la familia. Tenemos opciones seguras y espaciosas.\",\n    llamada_accion: \"¬øTe gustar√≠a ver nuestros veh√≠culos familiares en una visita sin compromiso?\",\n    cierre: \"¬°Esperamos ayudarte a encontrar el auto ideal para tu familia! üöóüë∂\"\n  }\n};\n\nfor (const item of items) {\n  const data = item.json;\n  const concesionarioId = data.concesionario_id;\n  \n  if (!mensajesPorConcesionario[concesionarioId]) {\n    mensajesPorConcesionario[concesionarioId] = {\n      concesionario_id: concesionarioId,\n      concesionario_nombre: data.concesionario_nombre,\n      token_activo: data.token_activo,\n      phone_id_activo: data.phone_id_activo,\n      leads: []\n    };\n  }\n  \n  // Determinar tipo de veh√≠culo para personalizaci√≥n\n  let tipoVehiculo = 'economico'; // default\n  const modelo = (data.modelo_interes || '').toLowerCase();\n  \n  if (modelo.includes('bmw') || modelo.includes('mercedes') || modelo.includes('audi') || modelo.includes('lexus')) {\n    tipoVehiculo = 'premium';\n  } else if (modelo.includes('suv') || modelo.includes('familiar') || modelo.includes('monovolumen')) {\n    tipoVehiculo = 'familiar';\n  }\n  \n  // Seleccionar template\n  let template = templatesPorTipo[tipoVehiculo];\n  \n  // Si hay template personalizado del concesionario, usarlo\n  if (data.template_personalizado) {\n    try {\n      const customTemplate = JSON.parse(data.template_personalizado);\n      template = { ...template, ...customTemplate };\n    } catch (e) {\n      // Si hay error en el template personalizado, usar el por defecto\n      template = templatesPorTipo[tipoVehiculo];\n    }\n  }\n  \n  // Construir mensaje personalizado\n  const nombreCliente = data.nombre_cliente || 'Estimado cliente';\n  const modeloInteres = data.modelo_interes || 'veh√≠culo de tu inter√©s';\n  \n  const mensajePersonalizado = [\n    template.saludo.replace('{nombre}', nombreCliente),\n    template.presentacion.replace('{concesionario}', data.concesionario_nombre).replace('{asesor}', 'nuestro equipo'),\n    template.proposito.replace('{modelo}', modeloInteres),\n    template.llamada_accion,\n    template.cierre\n  ].join('\\n\\n');\n  \n  mensajesPorConcesionario[concesionarioId].leads.push({\n    lead_id: data.lead_id,\n    telefono: data.telefono_cliente,\n    nombre: nombreCliente,\n    modelo: modeloInteres,\n    mensaje: mensajePersonalizado,\n    tipo_vehiculo: tipoVehiculo,\n    timestamp: new Date().toISOString()\n  });\n}\n\n// Convertir a array para procesamiento en N8N\nconst resultado = Object.values(mensajesPorConcesionario).map(grupo => ({ json: grupo }));\n\nreturn resultado;"
      },
      "id": "process-messages",
      "name": "Personalizar Mensajes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "split-by-concesionario",
      "name": "Procesar por Concesionario",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [680, 300]
    },
    {
      "parameters": {
        "batchSize": 5,
        "options": {}
      },
      "id": "split-leads-batch",
      "name": "Lotes de 5 Leads",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Preparar datos para env√≠o por lotes respetando rate limits\nconst concesionarioData = $input.first().json;\nconst leads = concesionarioData.leads;\nconst batchSize = 5; // WhatsApp permite ~20 mensajes/minuto\n\n// Crear lotes de leads para env√≠o\nconst lotes = [];\nfor (let i = 0; i < leads.length; i += batchSize) {\n  const lote = leads.slice(i, i + batchSize);\n  lotes.push({\n    concesionario_id: concesionarioData.concesionario_id,\n    concesionario_nombre: concesionarioData.concesionario_nombre,\n    token_activo: concesionarioData.token_activo,\n    phone_id_activo: concesionarioData.phone_id_activo,\n    lote_numero: Math.floor(i / batchSize) + 1,\n    total_lotes: Math.ceil(leads.length / batchSize),\n    leads_lote: lote,\n    delay_segundos: Math.floor(i / batchSize) * 15 // 15 segundos entre lotes\n  });\n}\n\nreturn lotes.map(lote => ({ json: lote }));"
      },
      "id": "prepare-batches",
      "name": "Preparar Lotes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "amount": "={{ $json.delay_segundos }}",
        "unit": "seconds"
      },
      "id": "wait-rate-limit",
      "name": "Esperar Rate Limit",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/{{ $json.phone_id_activo }}/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $json.token_activo }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "messaging_product",
              "value": "whatsapp"
            }
          ]
        },
        "body": "={\n  \"messaging_product\": \"whatsapp\",\n  \"to\": \"{{ $json.lead.telefono }}\",\n  \"type\": \"text\",\n  \"text\": {\n    \"body\": \"{{ $json.lead.mensaje }}\"\n  }\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "send-whatsapp-message",
      "name": "Enviar WhatsApp",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "jsCode": "// Preparar leads individuales para env√≠o desde el lote\nconst loteData = $input.first().json;\nconst mensajesIndividuales = [];\n\nfor (const lead of loteData.leads_lote) {\n  mensajesIndividuales.push({\n    // Datos del concesionario\n    concesionario_id: loteData.concesionario_id,\n    concesionario_nombre: loteData.concesionario_nombre,\n    token_activo: loteData.token_activo,\n    phone_id_activo: loteData.phone_id_activo,\n    \n    // Datos del lead\n    lead: lead,\n    \n    // Metadatos del lote\n    lote_numero: loteData.lote_numero,\n    total_lotes: loteData.total_lotes\n  });\n}\n\nreturn mensajesIndividuales.map(msg => ({ json: msg }));"
      },
      "id": "split-individual-leads",
      "name": "Separar Leads Individuales",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "mensajes_whatsapp",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "lead_id": "={{ $json.lead.lead_id }}",
            "concesionario_id": "={{ $json.concesionario_id }}",
            "telefono_destinatario": "={{ $json.lead.telefono }}",
            "mensaje": "={{ $json.lead.mensaje }}",
            "tipo": "prospecci√≥n",
            "canal": "whatsapp_business",
            "estado": "enviado",
            "fecha_envio": "={{ $json.lead.timestamp }}",
            "whatsapp_message_id": "={{ $responseJson.messages?.[0]?.id || 'pending' }}",
            "metadata": "={{ JSON.stringify({\n              lote_numero: $json.lote_numero,\n              total_lotes: $json.total_lotes,\n              tipo_vehiculo: $json.lead.tipo_vehiculo,\n              concesionario_nombre: $json.concesionario_nombre\n            }) }}"
          }
        },
        "options": {}
      },
      "id": "log-message",
      "name": "Registrar Env√≠o",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1780, 300],
      "credentials": {
        "postgres": {
          "id": "supabase-main",
          "name": "Supabase Main DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "table": "leads",
        "updateKey": "id",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "estado": "prospecci√≥n_enviada",
            "fecha_ultimo_seguimiento": "={{ $json.lead.timestamp }}",
            "observaciones": "={{ `Mensaje de prospecci√≥n enviado autom√°ticamente. Lote ${$json.lote_numero}/${$json.total_lotes}. Tipo: ${$json.lead.tipo_vehiculo}` }}"
          }
        },
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.lead.lead_id }}"
            },
            {
              "column": "concesionario_id",
              "value": "={{ $json.concesionario_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "update-lead-status",
      "name": "Actualizar Estado Lead",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2000, 300],
      "credentials": {
        "postgres": {
          "id": "supabase-main",
          "name": "Supabase Main DB"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "es-ultimo-lote",
              "leftValue": "={{ $json.lote_numero }}",
              "rightValue": "={{ $json.total_lotes }}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-last-batch",
      "name": "¬øEs √öltimo Lote?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2220, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generar resumen final de campa√±a de prospecci√≥n\nconst items = $input.all();\nconst resumenPorConcesionario = {};\n\nfor (const item of items) {\n  const data = item.json;\n  const concesionarioId = data.concesionario_id;\n  \n  if (!resumenPorConcesionario[concesionarioId]) {\n    resumenPorConcesionario[concesionarioId] = {\n      concesionario_id: concesionarioId,\n      concesionario_nombre: data.concesionario_nombre,\n      total_mensajes: 0,\n      por_tipo: { premium: 0, economico: 0, familiar: 0 },\n      timestamp: new Date().toISOString()\n    };\n  }\n  \n  resumenPorConcesionario[concesionarioId].total_mensajes++;\n  resumenPorConcesionario[concesionarioId].por_tipo[data.lead.tipo_vehiculo]++;\n}\n\nreturn Object.values(resumenPorConcesionario).map(resumen => ({ json: resumen }));"
      },
      "id": "generate-summary",
      "name": "Generar Resumen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2440, 200]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "campa√±as_prospeccion_log",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "concesionario_id": "={{ $json.concesionario_id }}",
            "tipo_campa√±a": "whatsapp_masivo",
            "total_enviados": "={{ $json.total_mensajes }}",
            "segmentacion": "={{ JSON.stringify($json.por_tipo) }}",
            "fecha_ejecucion": "={{ $json.timestamp }}",
            "estado": "completado",
            "metadata": "={{ JSON.stringify({\n              concesionario_nombre: $json.concesionario_nombre,\n              workflow_ejecutor: 'enviador-whatsapp-prospeccion',\n              version: '2.1'\n            }) }}"
          }
        },
        "options": {}
      },
      "id": "log-campaign",
      "name": "Registrar Campa√±a",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2660, 200],
      "credentials": {
        "postgres": {
          "id": "supabase-main",
          "name": "Supabase Main DB"
        }
      }
    }
  ],
  "connections": {
    "Obtener Leads para Prospecci√≥n": {
      "main": [
        [
          {
            "node": "Personalizar Mensajes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Personalizar Mensajes": {
      "main": [
        [
          {
            "node": "Procesar por Concesionario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar por Concesionario": {
      "main": [
        [
          {
            "node": "Preparar Lotes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Lotes": {
      "main": [
        [
          {
            "node": "Esperar Rate Limit",
            "type": "main",
            "index": 0
          },
          {
            "node": "Separar Leads Individuales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Esperar Rate Limit": {
      "main": [
        [
          {
            "node": "Separar Leads Individuales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separar Leads Individuales": {
      "main": [
        [
          {
            "node": "Enviar WhatsApp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar WhatsApp": {
      "main": [
        [
          {
            "node": "Registrar Env√≠o",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Registrar Env√≠o": {
      "main": [
        [
          {
            "node": "Actualizar Estado Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Actualizar Estado Lead": {
      "main": [
        [
          {
            "node": "¬øEs √öltimo Lote?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¬øEs √öltimo Lote?": {
      "main": [
        [
          {
            "node": "Generar Resumen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generar Resumen": {
      "main": [
        [
          {
            "node": "Registrar Campa√±a",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["leads", "prospecci√≥n", "whatsapp", "masivo"],
  "triggerCount": 0,
  "updatedAt": "2024-08-09T05:47:00.000Z",
  "versionId": "whatsapp-prospection-v2.1",
  "name": "Enviador WhatsApp de Prospecci√≥n",
  "active": true,
  "id": "enviador-whatsapp-prospeccion",
  "hash": "whatsapp-prospection-sender"
}
