{
  "meta": {
    "instanceId": "leads-reminders-system-001"
  },
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 2
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Trigger Cada 2 Horas",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Obtener leads que requieren recordatorios seg√∫n las pol√≠ticas de escalaci√≥n\nWITH leads_requieren_recordatorio AS (\n  -- Leads asignados sin primer contacto (> 2 horas)\n  SELECT \n    'primer_contacto' as tipo_recordatorio,\n    'alta' as prioridad,\n    l.id as lead_id,\n    l.nombre_cliente,\n    l.telefono_cliente,\n    l.modelo_interes,\n    l.estado,\n    l.prioridad as lead_prioridad,\n    l.concesionario_id,\n    con.nombre as concesionario_nombre,\n    l.asesor_asignado_id,\n    a.nombre as asesor_nombre,\n    a.email as asesor_email,\n    l.fecha_asignacion,\n    EXTRACT(EPOCH FROM (NOW() - l.fecha_asignacion))/3600 as horas_sin_contacto,\n    NULL as fecha_ultimo_recordatorio\n  FROM leads l\n  JOIN concesionarios con ON l.concesionario_id = con.id\n  LEFT JOIN asesores a ON l.asesor_asignado_id = a.id\n  WHERE l.estado = 'asignado'\n    AND l.fecha_primer_contacto IS NULL\n    AND l.fecha_asignacion < NOW() - INTERVAL '2 hours'\n    AND l.fecha_asignacion > NOW() - INTERVAL '48 hours'\n    AND a.activo = true\n    \n  UNION ALL\n  \n  -- Leads en seguimiento sin actividad reciente (> 24 horas)\n  SELECT \n    'seguimiento_inactivo' as tipo_recordatorio,\n    CASE WHEN l.prioridad = 'alta' THEN 'alta' ELSE 'media' END as prioridad,\n    l.id as lead_id,\n    l.nombre_cliente,\n    l.telefono_cliente,\n    l.modelo_interes,\n    l.estado,\n    l.prioridad as lead_prioridad,\n    l.concesionario_id,\n    con.nombre as concesionario_nombre,\n    l.asesor_asignado_id,\n    a.nombre as asesor_nombre,\n    a.email as asesor_email,\n    l.fecha_ultimo_seguimiento,\n    EXTRACT(EPOCH FROM (NOW() - COALESCE(l.fecha_ultimo_seguimiento, l.fecha_primer_contacto)))/3600 as horas_sin_contacto,\n    NULL as fecha_ultimo_recordatorio\n  FROM leads l\n  JOIN concesionarios con ON l.concesionario_id = con.id\n  LEFT JOIN asesores a ON l.asesor_asignado_id = a.id\n  WHERE l.estado IN ('contactado', 'seguimiento', 'en_seguimiento')\n    AND COALESCE(l.fecha_ultimo_seguimiento, l.fecha_primer_contacto) < NOW() - INTERVAL '24 hours'\n    AND l.fecha_creacion > NOW() - INTERVAL '30 days'\n    AND a.activo = true\n    \n  UNION ALL\n  \n  -- Leads prioritarios sin actividad (> 4 horas) - Escalaci√≥n cr√≠tica\n  SELECT \n    'escalacion_critica' as tipo_recordatorio,\n    'critica' as prioridad,\n    l.id as lead_id,\n    l.nombre_cliente,\n    l.telefono_cliente,\n    l.modelo_interes,\n    l.estado,\n    l.prioridad as lead_prioridad,\n    l.concesionario_id,\n    con.nombre as concesionario_nombre,\n    l.asesor_asignado_id,\n    a.nombre as asesor_nombre,\n    a.email as asesor_email,\n    l.fecha_asignacion,\n    EXTRACT(EPOCH FROM (NOW() - l.fecha_asignacion))/3600 as horas_sin_contacto,\n    NULL as fecha_ultimo_recordatorio\n  FROM leads l\n  JOIN concesionarios con ON l.concesionario_id = con.id\n  LEFT JOIN asesores a ON l.asesor_asignado_id = a.id\n  WHERE l.prioridad = 'alta'\n    AND l.estado = 'asignado'\n    AND l.fecha_primer_contacto IS NULL\n    AND l.fecha_asignacion < NOW() - INTERVAL '4 hours'\n    AND a.activo = true\n    \n  UNION ALL\n  \n  -- Leads tibios que requieren reactivaci√≥n (> 7 d√≠as)\n  SELECT \n    'reactivacion_tibio' as tipo_recordatorio,\n    'baja' as prioridad,\n    l.id as lead_id,\n    l.nombre_cliente,\n    l.telefono_cliente,\n    l.modelo_interes,\n    l.estado,\n    l.prioridad as lead_prioridad,\n    l.concesionario_id,\n    con.nombre as concesionario_nombre,\n    l.asesor_asignado_id,\n    a.nombre as asesor_nombre,\n    a.email as asesor_email,\n    l.fecha_ultimo_seguimiento,\n    EXTRACT(EPOCH FROM (NOW() - COALESCE(l.fecha_ultimo_seguimiento, l.fecha_primer_contacto)))/24/3600 as dias_sin_contacto,\n    NULL as fecha_ultimo_recordatorio\n  FROM leads l\n  JOIN concesionarios con ON l.concesionario_id = con.id\n  LEFT JOIN asesores a ON l.asesor_asignado_id = a.id\n  WHERE l.estado IN ('contactado', 'seguimiento')\n    AND COALESCE(l.fecha_ultimo_seguimiento, l.fecha_primer_contacto) < NOW() - INTERVAL '7 days'\n    AND l.fecha_creacion > NOW() - INTERVAL '60 days'\n    AND a.activo = true\n)\nSELECT \n  lrr.*\nFROM leads_requieren_recordatorio lrr\nWHERE NOT EXISTS (\n  -- Evitar spam: no enviar si ya se envi√≥ recordatorio en las √∫ltimas 4 horas\n  SELECT 1 FROM recordatorios_leads rl\n  WHERE rl.lead_id = lrr.lead_id\n    AND rl.tipo_recordatorio = lrr.tipo_recordatorio\n    AND rl.enviado_at > NOW() - INTERVAL '4 hours'\n)\nORDER BY \n  CASE prioridad\n    WHEN 'critica' THEN 1\n    WHEN 'alta' THEN 2\n    WHEN 'media' THEN 3\n    WHEN 'baja' THEN 4\n  END,\n  horas_sin_contacto DESC\nLIMIT 30; -- Procesar m√°ximo 30 recordatorios por ejecuci√≥n",
        "options": {}
      },
      "id": "get-reminders",
      "name": "Obtener Recordatorios Pendientes",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [460, 300],
      "credentials": {
        "postgres": {
          "id": "supabase-main",
          "name": "Supabase Main DB"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Procesar y categorizar recordatorios por tipo y prioridad\nconst items = $input.all();\nconst recordatoriosPorTipo = {\n  primer_contacto: [],\n  seguimiento_inactivo: [],\n  escalacion_critica: [],\n  reactivacion_tibio: []\n};\n\n// Templates de recordatorios\nconst templates = {\n  primer_contacto: {\n    titulo: '‚è∞ Recordatorio: Lead sin contactar',\n    urgencia: 'media',\n    accion: 'Contactar al cliente inmediatamente',\n    template_email: 'primer_contacto'\n  },\n  seguimiento_inactivo: {\n    titulo: 'üìã Recordatorio: Lead requiere seguimiento',\n    urgencia: 'media',\n    accion: 'Realizar seguimiento programado',\n    template_email: 'seguimiento'\n  },\n  escalacion_critica: {\n    titulo: 'üö® ESCALACI√ìN: Lead prioritario abandonado',\n    urgencia: 'critica',\n    accion: 'Intervenci√≥n inmediata requerida',\n    template_email: 'escalacion'\n  },\n  reactivacion_tibio: {\n    titulo: 'üîÑ Recordatorio: Reactivar lead tibio',\n    urgencia: 'baja',\n    accion: 'Intentar reactivaci√≥n del cliente',\n    template_email: 'reactivacion'\n  }\n};\n\nfor (const item of items) {\n  const data = item.json;\n  const template = templates[data.tipo_recordatorio];\n  \n  if (!template) continue;\n  \n  // Calcular tiempo transcurrido en formato legible\n  let tiempoTranscurrido = '';\n  if (data.horas_sin_contacto) {\n    const horas = Math.floor(data.horas_sin_contacto);\n    const mins = Math.floor((data.horas_sin_contacto % 1) * 60);\n    if (horas >= 24) {\n      const dias = Math.floor(horas / 24);\n      const horasRest = horas % 24;\n      tiempoTranscurrido = `${dias}d ${horasRest}h sin contacto`;\n    } else {\n      tiempoTranscurrido = `${horas}h ${mins}m sin contacto`;\n    }\n  } else if (data.dias_sin_contacto) {\n    tiempoTranscurrido = `${Math.floor(data.dias_sin_contacto)} d√≠as sin contacto`;\n  }\n  \n  const recordatorio = {\n    // Datos b√°sicos\n    tipo_recordatorio: data.tipo_recordatorio,\n    prioridad: data.prioridad,\n    titulo: template.titulo,\n    urgencia: template.urgencia,\n    accion_requerida: template.accion,\n    template_email: template.template_email,\n    \n    // Datos del lead\n    lead_id: data.lead_id,\n    cliente_nombre: data.nombre_cliente,\n    cliente_telefono: data.telefono_cliente,\n    modelo_interes: data.modelo_interes,\n    estado_lead: data.estado,\n    prioridad_lead: data.lead_prioridad,\n    \n    // Datos del concesionario\n    concesionario_id: data.concesionario_id,\n    concesionario_nombre: data.concesionario_nombre,\n    \n    // Datos del asesor\n    asesor_id: data.asesor_asignado_id,\n    asesor_nombre: data.asesor_nombre,\n    asesor_email: data.asesor_email,\n    \n    // Tiempo y m√©tricas\n    tiempo_transcurrido: tiempoTranscurrido,\n    horas_sin_contacto: data.horas_sin_contacto,\n    \n    // Metadatos\n    timestamp: new Date().toISOString(),\n    requiere_escalamiento: data.prioridad === 'critica',\n    link_crm: `https://crm.optimacx.com/leads/${data.lead_id}`\n  };\n  \n  recordatoriosPorTipo[data.tipo_recordatorio].push(recordatorio);\n}\n\n// Convertir a formato para N8N\nconst resultado = [];\nfor (const [tipo, recordatorios] of Object.entries(recordatoriosPorTipo)) {\n  if (recordatorios.length > 0) {\n    resultado.push({\n      json: {\n        tipo_recordatorio: tipo,\n        total_recordatorios: recordatorios.length,\n        recordatorios: recordatorios,\n        timestamp_procesamiento: new Date().toISOString()\n      }\n    });\n  }\n}\n\nreturn resultado;"
      },
      "id": "process-reminders",
      "name": "Procesar Recordatorios",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Expandir recordatorios individuales para env√≠o\nconst tiposData = $input.all();\nconst recordatoriosIndividuales = [];\n\nfor (const tipoItem of tiposData) {\n  const tipoData = tipoItem.json;\n  \n  for (const recordatorio of tipoData.recordatorios) {\n    recordatoriosIndividuales.push({ json: recordatorio });\n  }\n}\n\nreturn recordatoriosIndividuales;"
      },
      "id": "expand-individual",
      "name": "Expandir Recordatorios",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "sendTo": "={{ $json.asesor_email }}",
        "cc": "={{ $json.urgencia === 'critica' ? 'jefe.ventas@' + $json.concesionario_id + '.optimacx.com' : '' }}",
        "subject": "{{ $json.titulo }} - {{ $json.cliente_nombre }}",
        "message": "=**{{ $json.titulo.toUpperCase() }}**\\n\\nüë§ **Detalles del Lead:**\\n‚Ä¢ Cliente: {{ $json.cliente_nombre }}\\n‚Ä¢ Tel√©fono: {{ $json.cliente_telefono }}\\n‚Ä¢ Modelo de Inter√©s: {{ $json.modelo_interes }}\\n‚Ä¢ Estado Actual: {{ $json.estado_lead.toUpperCase() }}\\n‚Ä¢ Prioridad: {{ $json.prioridad_lead.toUpperCase() }}\\n‚Ä¢ Concesionario: {{ $json.concesionario_nombre }}\\n\\n‚è∞ **Tiempo sin Contacto:**\\n{{ $json.tiempo_transcurrido }}\\n\\n‚ö° **Acci√≥n Requerida:**\\n{{ $json.accion_requerida }}\\n\\n{{ $json.urgencia === 'critica' ? 'üö® **NOTA CR√çTICA:** Este es un lead de alta prioridad que requiere atenci√≥n INMEDIATA. Se ha escalado autom√°ticamente al Jefe de Ventas.' : '' }}\\n\\nüîó **Acciones R√°pidas:**\\n‚Ä¢ Ver Lead en CRM: {{ $json.link_crm }}\\n‚Ä¢ Llamar Cliente: {{ $json.cliente_telefono }}\\n‚Ä¢ WhatsApp: https://wa.me/{{ $json.cliente_telefono.replace(/\\D/g, '') }}\\n\\nüí° **Recordatorio:** \\n{{ $json.template_email === 'primer_contacto' ? 'El primer contacto es crucial para la conversi√≥n. Contacte al cliente dentro de las pr√≥ximas 2 horas.' : '' }}\\n{{ $json.template_email === 'seguimiento' ? 'Mantenga el momentum del lead. Un seguimiento oportuno mejora las posibilidades de venta.' : '' }}\\n{{ $json.template_email === 'escalacion' ? 'Lead prioritario abandonado. Requiere intervenci√≥n inmediata para evitar p√©rdida.' : '' }}\\n{{ $json.template_email === 'reactivacion' ? 'Oportunidad de reactivar cliente tibio. Use t√©cnicas de reconexi√≥n para regenerar inter√©s.' : '' }}\\n\\n---\\nSistema de Recordatorios OptimaCX\\nFecha: {{ new Date($json.timestamp).toLocaleString() }}",
        "options": {
          "allowUnauthorizedCerts": false,
          "priority": "={{ $json.urgencia === 'critica' ? 'high' : 'normal' }}"
        }
      },
      "id": "send-reminder-email",
      "name": "Enviar Recordatorio Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [1120, 300],
      "credentials": {
        "smtp": {
          "id": "smtp-optimacx",
          "name": "SMTP OptimaCX"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "es-escalacion",
              "leftValue": "={{ $json.urgencia }}",
              "rightValue": "critica",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-escalation",
      "name": "¬øRequiere Escalaci√≥n?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/{{ $vars.WHATSAPP_PHONE_ID }}/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.WHATSAPP_TOKEN }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "messaging_product",
              "value": "whatsapp"
            },
            {
              "name": "to",
              "value": "+56912345678"
            },
            {
              "name": "type",
              "value": "text"
            },
            {
              "name": "text",
              "value": "={{ { body: `üö® ESCALACI√ìN CR√çTICA: ${$json.titulo} - ${$json.cliente_nombre} (${$json.concesionario_nombre}). Asesor: ${$json.asesor_nombre}. ${$json.tiempo_transcurrido}. Revisar inmediatamente: ${$json.link_crm}` } }}"
            }
          ]
        },
        "options": {}
      },
      "id": "send-escalation-whatsapp",
      "name": "WhatsApp Escalaci√≥n",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "recordatorios_leads",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "lead_id": "={{ $json.lead_id }}",
            "asesor_id": "={{ $json.asesor_id }}",
            "concesionario_id": "={{ $json.concesionario_id }}",
            "tipo_recordatorio": "={{ $json.tipo_recordatorio }}",
            "prioridad": "={{ $json.prioridad }}",
            "canal": "email",
            "destinatario": "={{ $json.asesor_email }}",
            "titulo": "={{ $json.titulo }}",
            "mensaje": "={{ $json.accion_requerida }}",
            "enviado_at": "={{ $json.timestamp }}",
            "escalado": "={{ $json.requiere_escalamiento }}",
            "metadata": "={{ JSON.stringify({\n              tiempo_transcurrido: $json.tiempo_transcurrido,\n              horas_sin_contacto: $json.horas_sin_contacto,\n              urgencia: $json.urgencia,\n              template_usado: $json.template_email\n            }) }}"
          }
        },
        "options": {}
      },
      "id": "log-reminder",
      "name": "Registrar Recordatorio",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1560, 400],
      "credentials": {
        "postgres": {
          "id": "supabase-main",
          "name": "Supabase Main DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "table": "leads",
        "updateKey": "id",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "fecha_ultimo_recordatorio": "={{ $json.timestamp }}",
            "total_recordatorios": "COALESCE(total_recordatorios, 0) + 1",
            "observaciones": "={{ $json.observaciones ? $json.observaciones + ' | ' : '' }}Recordatorio enviado: {{ $json.tipo_recordatorio }} - {{ new Date($json.timestamp).toLocaleString() }}"
          }
        },
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.lead_id }}"
            },
            {
              "column": "concesionario_id",
              "value": "={{ $json.concesionario_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "update-lead-reminder",
      "name": "Actualizar Lead",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1780, 400],
      "credentials": {
        "postgres": {
          "id": "supabase-main",
          "name": "Supabase Main DB"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generar resumen de recordatorios enviados\nconst recordatorios = $input.all();\nconst resumen = {\n  total_recordatorios: recordatorios.length,\n  por_tipo: {},\n  por_prioridad: {},\n  escalaciones: 0,\n  por_concesionario: {},\n  timestamp: new Date().toISOString()\n};\n\nfor (const rec of recordatorios) {\n  const data = rec.json;\n  \n  // Contar por tipo\n  resumen.por_tipo[data.tipo_recordatorio] = (resumen.por_tipo[data.tipo_recordatorio] || 0) + 1;\n  \n  // Contar por prioridad\n  resumen.por_prioridad[data.prioridad] = (resumen.por_prioridad[data.prioridad] || 0) + 1;\n  \n  // Contar escalaciones\n  if (data.urgencia === 'critica') {\n    resumen.escalaciones++;\n  }\n  \n  // Contar por concesionario\n  const concKey = data.concesionario_nombre;\n  if (!resumen.por_concesionario[concKey]) {\n    resumen.por_concesionario[concKey] = 0;\n  }\n  resumen.por_concesionario[concKey]++;\n}\n\nreturn [{ json: resumen }];"
      },
      "id": "generate-summary",
      "name": "Generar Resumen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 300]
    }
  ],
  "connections": {
    "Trigger Cada 2 Horas": {
      "main": [
        [
          {
            "node": "Obtener Recordatorios Pendientes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener Recordatorios Pendientes": {
      "main": [
        [
          {
            "node": "Procesar Recordatorios",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar Recordatorios": {
      "main": [
        [
          {
            "node": "Expandir Recordatorios",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expandir Recordatorios": {
      "main": [
        [
          {
            "node": "Enviar Recordatorio Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar Recordatorio Email": {
      "main": [
        [
          {
            "node": "¬øRequiere Escalaci√≥n?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Registrar Recordatorio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¬øRequiere Escalaci√≥n?": {
      "main": [
        [
          {
            "node": "WhatsApp Escalaci√≥n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Registrar Recordatorio": {
      "main": [
        [
          {
            "node": "Actualizar Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Actualizar Lead": {
      "main": [
        [
          {
            "node": "Generar Resumen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["leads", "recordatorios", "seguimiento"],
  "triggerCount": 0,
  "updatedAt": "2024-08-09T05:47:00.000Z",
  "versionId": "leads-reminders-v2.1",
  "name": "Recordatorios Autom√°ticos de Leads",
  "active": true,
  "id": "recordatorios-leads",
  "hash": "leads-reminders-system"
}
