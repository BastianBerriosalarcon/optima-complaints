{
  "name": "Lead - Análisis con IA",
  "description": "Workflow enfocado en analizar mensajes con IA y extraer insights del lead",
  "tags": ["ai", "analysis", "lead", "srp"],
  "nodes": [
    {
      "parameters": {
        "workflowId": "{{ $json.workflowId }}"
      },
      "id": "workflow-trigger",
      "name": "Trigger del Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 2.1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "jsCode": "// Validar payload para análisis IA\nconst inData = $input.first().json || {};\nconst required = ['validated_message', 'tenant_id'];\nconst missing = required.filter(field => !inData[field]);\nconst valid = missing.length === 0 && inData.validated_message?.from && inData.validated_message?.text;\nreturn [{ json: { ...inData, valid, missing_fields: missing } }];"
      },
      "id": "validate-ai-payload",
      "name": "Validar Payload IA",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": { "caseSensitive": true, "typeValidation": "strict" },
          "conditions": [
            {
              "leftValue": "={{ $json.valid }}",
              "operator": { "type": "boolean", "operation": "isTrue" },
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-valid-ai-payload",
      "name": "¿Payload Válido?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [600, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM leads WHERE telefono_cliente = $1 AND concesionario_id = $2 ORDER BY created_at DESC LIMIT 1",
        "additionalFields": {
          "queryParameters": "={{ [$json.validated_message.from, $json.tenant_id] }}"
        }
      },
      "id": "check-existing-lead",
      "name": "Buscar Lead Existente",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [800, 300]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.length }}",
              "operation": "greaterThan",
              "value2": 0
            }
          ]
        }
      },
      "id": "is-existing-lead",
      "name": "¿Lead Existente?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "jsCode": "// Preparar prompt para análisis IA de leads\nconst data = $input.first().json;\nconst message = data.validated_message || {};\nconst leadExists = data.existing_lead_found || false;\n\nconst prompt = `\nAnaliza el siguiente mensaje de WhatsApp para determinar la intención del cliente:\n\nMensaje: \"${message.text}\"\nContacto: ${message.from}\nLead existente: ${leadExists ? 'Sí' : 'No'}\n\nProporciona un análisis JSON con:\n1. intent: (lead_generation, information_request, complaint, support, other)\n2. priority: (high, medium, low)\n3. products_mentioned: array de productos mencionados\n4. urgency_level: 1-10\n5. next_action: objeto con workflow y params\n6. confidence_score: 0-100\n7. summary: resumen breve\n\nRespuesta en JSON válido:`;\n\nreturn [{\n  json: {\n    prompt,\n    temperature: 0.3,\n    max_tokens: 500,\n    validated_message: message,\n    tenant_id: data.tenant_id,\n    existing_lead_found: leadExists\n  }\n}];"
      },
      "id": "prepare-ai-analysis",
      "name": "Preparar Análisis IA",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "prompt": "={{ $json.prompt }}",
        "options": {
          "temperature": "={{ $json.temperature }}",
          "maxTokens": "={{ $json.max_tokens }}",
          "topP": 1
        }
      },
      "id": "ai-analysis",
      "name": "Análisis con IA",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 2.1,
      "position": [1400, 300]
    },
    {
      "parameters": {
        "jsCode": "// Procesar respuesta de IA y estructurar datos\nconst aiResponse = $input.first().json.response || $input.first().json.text || '';\nlet analysisResult;\n\ntry {\n  // Intentar parsear JSON de la respuesta IA\n  const jsonMatch = aiResponse.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    analysisResult = JSON.parse(jsonMatch[0]);\n  } else {\n    throw new Error('No JSON found in AI response');\n  }\n} catch (error) {\n  // Fallback si no se puede parsear\n  analysisResult = {\n    intent: 'lead_generation',\n    priority: 'medium',\n    products_mentioned: [],\n    urgency_level: 5,\n    next_action: { workflow: 'advisor-assignment', params: {} },\n    confidence_score: 50,\n    summary: 'Análisis por defecto - Error al parsear respuesta IA'\n  };\n}\n\nreturn [{\n  json: {\n    ...analysisResult,\n    ai_response_raw: aiResponse,\n    validated_message: $json.validated_message,\n    tenant_id: $json.tenant_id,\n    processing_timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "process-ai-response",
      "name": "Procesar Respuesta IA",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1600, 300]
    },
    {
      "parameters": {
        "operation": "create",
        "resource": "execution",
        "workflowId": "lead-scoring-ai",
        "data": "={{ JSON.stringify($json) }}"
      },
      "id": "trigger-lead-scoring",
      "name": "Calcular Score de Lead",
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 2.1,
      "position": [1800, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.next_action.workflow === 'advisor-assignment' }}",
              "operation": "equal",
              "value2": true
            }
          ]
        }
      },
      "id": "requires-advisor",
      "name": "¿Requiere Asesor?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "jsCode": "// Respuesta de error por payload inválido\nreturn [{\n  json: {\n    status: 'error',\n    message: 'Payload inválido para análisis IA',\n    missing_fields: $json.missing_fields,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "error-response",
      "name": "Respuesta Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [800, 500]
    }
  ],
  "connections": {
    "Trigger del Workflow": { "main": [[{ "node": "Validar Payload IA", "type": "main", "index": 0 }]] },
    "Validar Payload IA": { "main": [[{ "node": "¿Payload Válido?", "type": "main", "index": 0 }]] },
    "¿Payload Válido?": { "main": [
      [{ "node": "Buscar Lead Existente", "type": "main", "index": 0 }],
      [{ "node": "Respuesta Error", "type": "main", "index": 0 }]
    ] },
    "Buscar Lead Existente": { "main": [[{ "node": "¿Lead Existente?", "type": "main", "index": 0 }]] },
    "¿Lead Existente?": { "main": [
      [{ "node": "Preparar Análisis IA", "type": "main", "index": 0 }],
      [{ "node": "Preparar Análisis IA", "type": "main", "index": 0 }]
    ] },
    "Preparar Análisis IA": { "main": [[{ "node": "Análisis con IA", "type": "main", "index": 0 }]] },
    "Análisis con IA": { "main": [[{ "node": "Procesar Respuesta IA", "type": "main", "index": 0 }]] },
    "Procesar Respuesta IA": { "main": [[{ "node": "Calcular Score de Lead", "type": "main", "index": 0 }]] },
    "Calcular Score de Lead": { "main": [[{ "node": "¿Requiere Asesor?", "type": "main", "index": 0 }]] },
    "¿Requiere Asesor?": { "main": [] }
  },
  "settings": {
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  }
}
