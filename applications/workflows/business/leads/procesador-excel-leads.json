{
  "name": "Procesador de Excel Leads",
  "description": "Procesa archivos Excel con leads masivos, valida datos y los inserta en el sistema",
  "tags": ["leads", "excel", "masivo", "import", "validación"],
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload-excel-leads",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Carga Excel",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300],
      "webhookId": "excel-leads-upload"
    },
    {
      "parameters": {
        "jsCode": "// Validar payload de carga de Excel con validaciones robustas\ntry {\n  const payload = $input.first().json || {};\n  \n  // Validaciones de estructura requerida\n  const validaciones = {\n    has_concesionario_id: !!(payload.concesionario_id),\n    has_usuario_carga_id: !!(payload.usuario_carga_id),\n    has_archivo_excel: !!(payload.archivo_excel),\n    has_usuario_rol: !!(payload.usuario_rol),\n    valid_usuario_rol: ['jefe_ventas', 'admin', 'gerencia'].includes(payload.usuario_rol)\n  };\n  \n  const missing_fields = Object.entries(validaciones)\n    .filter(([key, value]) => !value)\n    .map(([key]) => key);\n  \n  const valid = missing_fields.length === 0;\n  \n  if (!valid) {\n    return [{\n      json: {\n        valid: false,\n        missing_fields,\n        error: 'Payload de carga Excel inválido',\n        payload_received: {\n          concesionario_id: payload.concesionario_id,\n          usuario_carga_id: payload.usuario_carga_id,\n          usuario_rol: payload.usuario_rol,\n          has_archivo: !!(payload.archivo_excel)\n        }\n      }\n    }];\n  }\n  \n  // Procesar datos válidos\n  const uploadData = {\n    valid: true,\n    concesionario_id: payload.concesionario_id,\n    usuario_carga_id: payload.usuario_carga_id,\n    usuario_rol: payload.usuario_rol,\n    archivo_nombre: payload.archivo_nombre || 'leads_import.xlsx',\n    archivo_excel: payload.archivo_excel,\n    timestamp_carga: new Date().toISOString(),\n    configuracion: {\n      campos_requeridos: ['nombre', 'telefono', 'email', 'modelo_interes'],\n      campos_opcionales: ['observaciones', 'presupuesto', 'urgencia'],\n      max_leads_batch: 1000,\n      porcentaje_error_maximo: 0.5\n    }\n  };\n  \n  return [{ json: uploadData }];\n  \n} catch (error) {\n  return [{\n    json: {\n      valid: false,\n      error: 'Error al validar payload',\n      error_message: error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "validate-upload",
      "name": "Validar Carga",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": { "caseSensitive": true, "typeValidation": "strict" },
          "conditions": [
            {
              "leftValue": "={{ $json.valid }}",
              "operator": { "type": "boolean", "operation": "isTrue" },
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-valid-upload",
      "name": "¿Carga Válida?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [600, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  c.id as concesionario_id,\n  c.nombre as concesionario_nombre,\n  c.activo,\n  u.id as usuario_id,\n  u.nombre as usuario_nombre,\n  u.email as usuario_email,\n  u.rol,\n  u.activo as usuario_activo\nFROM concesionarios c\nJOIN usuarios u ON u.concesionario_id = c.id\nWHERE c.id = $1\n  AND u.id = $2\n  AND c.activo = true\n  AND u.activo = true\n  AND u.rol = ANY($3);",
        "additionalFields": {
          "queryParameters": "={{ [$json.concesionario_id, $json.usuario_carga_id, ['jefe_ventas', 'admin', 'gerencia']] }}"
        }
      },
      "id": "verify-permissions",
      "name": "Verificar Permisos",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [800, 300]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $input.all().length }}",
              "operation": "greaterThan",
              "value2": 0
            }
          ]
        }
      },
      "id": "permissions-valid",
      "name": "¿Permisos Válidos?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "jsCode": "// Procesar archivo Excel y validar datos\ntry {\n  const uploadData = $('Validar Carga').first().json;\n  const permissionsData = $input.first().json;\n  \n  // Para demo usar datos de ejemplo\n  const leadsSample = [\n    {\n      nombre: \"Juan Pérez García\",\n      telefono: \"912345678\",\n      email: \"juan.perez@email.com\",\n      modelo_interes: \"Toyota Corolla\",\n      observaciones: \"Cliente referido\",\n      presupuesto: \"15000000\",\n      urgencia: \"alta\"\n    },\n    {\n      nombre: \"María González López\",\n      telefono: \"987654321\",\n      email: \"maria.gonzalez@email.com\",\n      modelo_interes: \"Honda Civic\",\n      observaciones: \"Busca financiamiento\",\n      presupuesto: \"12000000\",\n      urgencia: \"media\"\n    }\n  ];\n  \n  const leadsData = leadsSample;\n  \n  if (leadsData.length > uploadData.configuracion.max_leads_batch) {\n    throw new Error(`Excede el límite de ${uploadData.configuracion.max_leads_batch} leads por lote`);\n  }\n  \n  const leadsValidados = [];\n  const errores = [];\n  \n  for (let i = 0; i < leadsData.length; i++) {\n    const lead = { ...leadsData[i] };\n    const erroresLead = [];\n    \n    // Validar campos requeridos\n    if (!lead.nombre || typeof lead.nombre !== 'string' || lead.nombre.trim() === '') {\n      erroresLead.push('Nombre es requerido');\n    } else {\n      lead.nombre = lead.nombre.trim();\n    }\n    \n    if (!lead.telefono) {\n      erroresLead.push('Teléfono es requerido');\n    } else {\n      lead.telefono = String(lead.telefono).replace(/\\D/g, '');\n      if (lead.telefono.length < 8) {\n        erroresLead.push('Teléfono debe tener al menos 8 dígitos');\n      } else {\n        if (lead.telefono.length === 8) {\n          lead.telefono = '569' + lead.telefono;\n        } else if (!lead.telefono.startsWith('56')) {\n          lead.telefono = '56' + lead.telefono;\n        }\n        lead.telefono = '+' + lead.telefono;\n      }\n    }\n    \n    if (!lead.email || !lead.email.includes('@')) {\n      erroresLead.push('Email inválido');\n    } else {\n      lead.email = lead.email.trim().toLowerCase();\n    }\n    \n    if (!lead.modelo_interes || lead.modelo_interes.trim() === '') {\n      erroresLead.push('Modelo de interés es requerido');\n    } else {\n      lead.modelo_interes = lead.modelo_interes.trim();\n    }\n    \n    if (erroresLead.length > 0) {\n      errores.push({\n        fila: i + 2,\n        datos_originales: leadsData[i],\n        errores: erroresLead\n      });\n    } else {\n      lead.concesionario_id = uploadData.concesionario_id;\n      lead.fuente_lead = 'excel_masivo';\n      lead.estado = 'nuevo';\n      lead.usuario_carga_id = uploadData.usuario_carga_id;\n      lead.fecha_carga = uploadData.timestamp_carga;\n      lead.prioridad_seguimiento = lead.urgencia || 'media';\n      \n      leadsValidados.push(lead);\n    }\n  }\n  \n  const porcentajeError = leadsData.length > 0 ? errores.length / leadsData.length : 0;\n  const procesamiento_exitoso = porcentajeError <= uploadData.configuracion.porcentaje_error_maximo;\n  \n  const resultado = {\n    concesionario_id: uploadData.concesionario_id,\n    concesionario_nombre: permissionsData.concesionario_nombre,\n    usuario_carga: permissionsData.usuario_nombre,\n    archivo_nombre: uploadData.archivo_nombre,\n    timestamp_procesamiento: new Date().toISOString(),\n    total_filas_procesadas: leadsData.length,\n    leads_validos: leadsValidados.length,\n    leads_con_errores: errores.length,\n    porcentaje_error: Math.round(porcentajeError * 100),\n    leads_validados: leadsValidados,\n    errores_validacion: errores,\n    procesamiento_exitoso\n  };\n  \n  return [{ json: resultado }];\n  \n} catch (error) {\n  return [{\n    json: {\n      status: 'error',\n      message: 'Error al procesar archivo Excel',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "process-excel",
      "name": "Procesar Excel",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": { "caseSensitive": true, "typeValidation": "strict" },
          "conditions": [
            {
              "leftValue": "={{ $json.procesamiento_exitoso }}",
              "operator": { "type": "boolean", "operation": "isTrue" },
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-processing",
      "name": "¿Procesamiento Exitoso?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1400, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO leads (\n  concesionario_id,\n  nombre_cliente,\n  telefono_cliente,\n  email_cliente,\n  modelo_interes,\n  observaciones,\n  presupuesto_estimado,\n  prioridad_seguimiento,\n  fuente_lead,\n  estado,\n  usuario_creacion_id,\n  fecha_creacion\n) \nSELECT \n  $1 as concesionario_id,\n  unnest($2::text[]) as nombre_cliente,\n  unnest($3::text[]) as telefono_cliente,\n  unnest($4::text[]) as email_cliente,\n  unnest($5::text[]) as modelo_interes,\n  unnest($6::text[]) as observaciones,\n  unnest($7::integer[]) as presupuesto_estimado,\n  unnest($8::text[]) as prioridad_seguimiento,\n  'excel_masivo' as fuente_lead,\n  'nuevo' as estado,\n  $9 as usuario_creacion_id,\n  NOW() as fecha_creacion\nRETURNING id, nombre_cliente, telefono_cliente, estado;",
        "additionalFields": {
          "queryParameters": "={{ [\n  $json.concesionario_id,\n  $json.leads_validados.map(lead => lead.nombre),\n  $json.leads_validados.map(lead => lead.telefono),\n  $json.leads_validados.map(lead => lead.email),\n  $json.leads_validados.map(lead => lead.modelo_interes),\n  $json.leads_validados.map(lead => lead.observaciones || ''),\n  $json.leads_validados.map(lead => parseInt(lead.presupuesto) || null),\n  $json.leads_validados.map(lead => lead.prioridad_seguimiento || 'media'),\n  $json.usuario_carga_id\n] }}"
        }
      },
      "id": "insert-leads",
      "name": "Insertar Leads",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [1600, 300]
    },
    {
      "parameters": {
        "operation": "create",
        "resource": "execution",
        "workflowId": "asignacion-asesores",
        "data": "={{ JSON.stringify({\n  tipo_asignacion: 'carga_masiva_excel',\n  concesionario_id: $json.concesionario_id,\n  leads_count: $json.leads_validos,\n  prioridad: 'media'\n}) }}"
      },
      "id": "trigger-assignment",
      "name": "Activar Asignación",
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 2.1,
      "position": [1800, 300]
    },
    {
      "parameters": {
        "jsCode": "// Respuesta exitosa de procesamiento Excel\nconst data = $('Procesar Excel').first().json;\nconst leadsInsertados = $('Insertar Leads').all();\n\nreturn [{\n  json: {\n    status: 'success',\n    message: 'Archivo Excel procesado exitosamente',\n    archivo_nombre: data.archivo_nombre,\n    resumen: {\n      total_procesadas: data.total_filas_procesadas,\n      leads_insertados: data.leads_validos,\n      leads_con_errores: data.leads_con_errores,\n      porcentaje_exito: 100 - data.porcentaje_error\n    },\n    leads_insertados: leadsInsertados.map(lead => ({\n      id: lead.json.id,\n      nombre: lead.json.nombre_cliente,\n      telefono: lead.json.telefono_cliente\n    })),\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "success-response",
      "name": "Respuesta Exitosa",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "jsCode": "// Respuesta de error por payload inválido\nreturn [{\n  json: {\n    status: 'error',\n    message: 'Payload de carga Excel inválido',\n    missing_fields: $json.missing_fields,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "invalid-payload-response",
      "name": "Error Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [800, 500]
    },
    {
      "parameters": {
        "jsCode": "// Respuesta de error por permisos insuficientes\nconst uploadData = $('Validar Carga').first().json;\nreturn [{\n  json: {\n    status: 'error',\n    message: 'Permisos insuficientes para carga masiva',\n    usuario_id: uploadData.usuario_carga_id,\n    concesionario_id: uploadData.concesionario_id,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "permissions-error-response",
      "name": "Error Permisos",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1200, 500]
    },
    {
      "parameters": {
        "jsCode": "// Respuesta de error en procesamiento\nreturn [{\n  json: {\n    status: 'error',\n    message: 'Error en procesamiento de archivo Excel',\n    errores_encontrados: $json.errores_validacion || [],\n    porcentaje_error: $json.porcentaje_error || 0,\n    archivo_nombre: $json.archivo_nombre,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "processing-error-response",
      "name": "Error Procesamiento",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1600, 500]
    }
  ],
  "connections": {
    "Webhook Carga Excel": { "main": [[{ "node": "Validar Carga", "type": "main", "index": 0 }]] },
    "Validar Carga": { "main": [[{ "node": "¿Carga Válida?", "type": "main", "index": 0 }]] },
    "¿Carga Válida?": { "main": [
      [{ "node": "Verificar Permisos", "type": "main", "index": 0 }],
      [{ "node": "Error Payload", "type": "main", "index": 0 }]
    ] },
    "Verificar Permisos": { "main": [[{ "node": "¿Permisos Válidos?", "type": "main", "index": 0 }]] },
    "¿Permisos Válidos?": { "main": [
      [{ "node": "Procesar Excel", "type": "main", "index": 0 }],
      [{ "node": "Error Permisos", "type": "main", "index": 0 }]
    ] },
    "Procesar Excel": { "main": [[{ "node": "¿Procesamiento Exitoso?", "type": "main", "index": 0 }]] },
    "¿Procesamiento Exitoso?": { "main": [
      [{ "node": "Insertar Leads", "type": "main", "index": 0 }],
      [{ "node": "Error Procesamiento", "type": "main", "index": 0 }]
    ] },
    "Insertar Leads": { "main": [[{ "node": "Activar Asignación", "type": "main", "index": 0 }]] },
    "Activar Asignación": { "main": [[{ "node": "Respuesta Exitosa", "type": "main", "index": 0 }]] }
  },
  "settings": {
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "executionTimeout": 600
  }
}
