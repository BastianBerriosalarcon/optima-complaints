{
  "name": "Seguimiento de Cotizaciones",
  "description": "Sistema automatizado de seguimiento a cotizaciones con múltiples canales y escalación",
  "tags": ["cotizaciones", "seguimiento", "vencimiento", "whatsapp", "llamadas"],
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 4
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Programar Seguimientos",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Validar configuración de seguimiento de cotizaciones\ntry {\n  const configuracion = {\n    intervalos_horas: 4,\n    max_seguimientos_batch: 25,\n    politicas_seguimiento: {\n      seguimiento_regular: {\n        tiempo_limite_horas: 24,\n        frecuencia_horas: 48,\n        canal_preferido: 'whatsapp'\n      },\n      proximo_vencimiento: {\n        tiempo_limite_dias: 2,\n        frecuencia_horas: 24,\n        canal_preferido: 'whatsapp',\n        urgencia: 'alta'\n      },\n      vencimiento_urgente: {\n        tiempo_limite_dias: 1,\n        frecuencia_horas: 12,\n        canal_preferido: 'llamada',\n        urgencia: 'critica'\n      },\n      seguimiento_prioritario: {\n        tiempo_limite_horas: 12,\n        frecuencia_horas: 12,\n        canal_preferido: 'llamada',\n        solo_alta_prioridad: true\n      },\n      sin_respuesta: {\n        tiempo_limite_horas: 72,\n        frecuencia_horas: 48,\n        canal_preferido: 'whatsapp'\n      }\n    },\n    ventana_analisis_dias: 30,\n    canales_disponibles: ['whatsapp', 'llamada', 'email'],\n    templates_mensaje: {\n      vencimiento_cotizacion: 'urgente',\n      proximo_vencimiento: 'recordatorio',\n      sin_respuesta_72h: 'seguimiento',\n      seguimiento_prioritario: 'prioritario',\n      seguimiento_regular: 'regular'\n    },\n    timestamp: new Date().toISOString()\n  };\n  \n  return [{\n    json: {\n      configuracion_valida: true,\n      configuracion,\n      estado: 'inicializado'\n    }\n  }];\n  \n} catch (error) {\n  return [{\n    json: {\n      configuracion_valida: false,\n      error: error.message,\n      estado: 'error_configuracion',\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "validate-config",
      "name": "Validar Configuración",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": { "caseSensitive": true, "typeValidation": "strict" },
          "conditions": [
            {
              "leftValue": "={{ $json.configuracion_valida }}",
              "operator": { "type": "boolean", "operation": "isTrue" },
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-config-valid",
      "name": "¿Configuración Válida?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [600, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH politicas AS (\n  SELECT \n    $1::integer as seguimiento_regular_horas,\n    $2::integer as proximo_vencimiento_dias,\n    $3::integer as vencimiento_urgente_dias,\n    $4::integer as seguimiento_prioritario_horas,\n    $5::integer as sin_respuesta_horas,\n    $6::integer as ventana_analisis_dias,\n    $7::integer as max_resultados\n),\ncotizaciones_seguimiento AS (\n  SELECT \n    c.id as cotizacion_id,\n    c.lead_id,\n    c.numero_cotizacion,\n    c.monto_total,\n    c.vehiculo_modelo,\n    c.vehiculo_marca,\n    c.fecha_creacion,\n    c.fecha_vencimiento,\n    c.estado,\n    c.prioridad_seguimiento,\n    \n    -- Datos del lead\n    l.telefono_cliente,\n    l.nombre_cliente,\n    l.email_cliente,\n    l.asesor_asignado_id,\n    a.nombre as asesor_nombre,\n    a.telefono as asesor_telefono,\n    a.email as asesor_email,\n    \n    -- Datos del concesionario\n    l.concesionario_id,\n    con.nombre as concesionario_nombre,\n    \n    -- Cálculos de tiempo\n    EXTRACT(EPOCH FROM (NOW() - c.fecha_creacion))/3600 as horas_desde_creacion,\n    EXTRACT(EPOCH FROM (c.fecha_vencimiento - NOW()))/86400 as dias_para_vencimiento,\n    \n    -- Último seguimiento\n    (\n      SELECT MAX(sc.fecha_seguimiento) \n      FROM seguimientos_cotizacion sc \n      WHERE sc.cotizacion_id = c.id\n    ) as ultimo_seguimiento,\n    \n    -- Contar seguimientos previos\n    (\n      SELECT COUNT(*) \n      FROM seguimientos_cotizacion sc \n      WHERE sc.cotizacion_id = c.id\n    ) as total_seguimientos\n    \n  FROM cotizaciones c\n  JOIN leads l ON c.lead_id = l.id\n  LEFT JOIN asesores a ON l.asesor_asignado_id = a.id\n  LEFT JOIN concesionarios con ON l.concesionario_id = con.id\n  CROSS JOIN politicas p\n  \n  WHERE c.estado IN ('pendiente', 'en_revision', 'enviada')\n    AND c.fecha_creacion >= NOW() - INTERVAL '1 day' * p.ventana_analisis_dias\n    AND c.fecha_vencimiento > NOW() - INTERVAL '1 day'\n    AND a.activo = true\n    AND (\n      -- Cotizaciones sin seguimiento en tiempo establecido\n      (\n        c.fecha_creacion < NOW() - INTERVAL '1 hour' * p.seguimiento_regular_horas\n        AND (\n          ultimo_seguimiento IS NULL \n          OR ultimo_seguimiento < NOW() - INTERVAL '48 hours'\n        )\n      )\n      OR\n      -- Cotizaciones próximas a vencer\n      (\n        c.fecha_vencimiento <= NOW() + INTERVAL '1 day' * p.proximo_vencimiento_dias\n        AND c.fecha_vencimiento > NOW()\n        AND (\n          ultimo_seguimiento IS NULL \n          OR ultimo_seguimiento < NOW() - INTERVAL '24 hours'\n        )\n      )\n      OR\n      -- Cotizaciones vencimiento urgente\n      (\n        c.fecha_vencimiento <= NOW() + INTERVAL '1 day' * p.vencimiento_urgente_dias\n        AND c.fecha_vencimiento > NOW()\n        AND (\n          ultimo_seguimiento IS NULL \n          OR ultimo_seguimiento < NOW() - INTERVAL '12 hours'\n        )\n      )\n      OR\n      -- Cotizaciones de alta prioridad\n      (\n        c.prioridad_seguimiento = 'alta'\n        AND (\n          ultimo_seguimiento IS NULL \n          OR ultimo_seguimiento < NOW() - INTERVAL '1 hour' * p.seguimiento_prioritario_horas\n        )\n      )\n      OR\n      -- Cotizaciones sin respuesta prolongada\n      (\n        c.fecha_creacion < NOW() - INTERVAL '1 hour' * p.sin_respuesta_horas\n        AND total_seguimientos = 0\n      )\n    )\n)\nSELECT *\nFROM cotizaciones_seguimiento\nORDER BY \n  CASE prioridad_seguimiento \n    WHEN 'alta' THEN 1\n    WHEN 'media' THEN 2\n    ELSE 3\n  END,\n  dias_para_vencimiento ASC,\n  horas_desde_creacion DESC\nLIMIT (SELECT max_resultados FROM politicas);",
        "additionalFields": {
          "queryParameters": "={{ [\n  $json.configuracion.politicas_seguimiento.seguimiento_regular.tiempo_limite_horas,\n  $json.configuracion.politicas_seguimiento.proximo_vencimiento.tiempo_limite_dias,\n  $json.configuracion.politicas_seguimiento.vencimiento_urgente.tiempo_limite_dias,\n  $json.configuracion.politicas_seguimiento.seguimiento_prioritario.tiempo_limite_horas,\n  $json.configuracion.politicas_seguimiento.sin_respuesta.tiempo_limite_horas,\n  $json.configuracion.ventana_analisis_dias,\n  $json.configuracion.max_seguimientos_batch\n] }}"
        }
      },
      "id": "get-quotes-to-follow",
      "name": "Obtener Cotizaciones para Seguimiento",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [800, 300]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $input.all().length }}",
              "operation": "greaterThan",
              "value2": 0
            }
          ]
        }
      },
      "id": "has-quotes",
      "name": "¿Hay Cotizaciones?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "jsCode": "// Procesar cotizaciones y determinar estrategia de seguimiento\ntry {\n  const items = $input.all();\n  const configuracion = $('Validar Configuración').first().json.configuracion;\n  const seguimientos = [];\n  \n  for (const item of items) {\n    const data = item.json;\n    \n    // Validar datos esenciales\n    if (!data.cotizacion_id || !data.nombre_cliente || !data.telefono_cliente) {\n      console.log(`Datos incompletos para cotización: ${data.cotizacion_id}`);\n      continue;\n    }\n    \n    // Determinar tipo de seguimiento basado en el contexto\n    let tipoSeguimiento = 'seguimiento_regular';\n    let urgencia = 'media';\n    let mensajeTemplate = 'seguimiento_regular';\n    let canalPreferido = 'whatsapp';\n    \n    const diasRestantes = Math.ceil(data.dias_para_vencimiento || 0);\n    const horasCreacion = data.horas_desde_creacion || 0;\n    \n    if (diasRestantes <= 0) {\n      tipoSeguimiento = 'vencimiento_urgente';\n      urgencia = 'critica';\n      mensajeTemplate = 'vencimiento_cotizacion';\n      canalPreferido = 'llamada';\n    } else if (diasRestantes <= 1) {\n      tipoSeguimiento = 'vencimiento_urgente';\n      urgencia = 'critica';\n      mensajeTemplate = 'vencimiento_cotizacion';\n      canalPreferido = 'llamada';\n    } else if (diasRestantes <= 2) {\n      tipoSeguimiento = 'proximo_vencimiento';\n      urgencia = 'alta';\n      mensajeTemplate = 'proximo_vencimiento';\n      canalPreferido = 'whatsapp';\n    } else if (horasCreacion >= 72 && data.total_seguimientos === 0) {\n      tipoSeguimiento = 'sin_respuesta';\n      urgencia = 'media';\n      mensajeTemplate = 'sin_respuesta_72h';\n      canalPreferido = 'whatsapp';\n    } else if (data.prioridad_seguimiento === 'alta') {\n      tipoSeguimiento = 'seguimiento_prioritario';\n      urgencia = 'alta';\n      mensajeTemplate = 'seguimiento_prioritario';\n      canalPreferido = 'llamada';\n    }\n    \n    // Formatear monto para mostrar\n    const montoFormateado = data.monto_total ? \n      new Intl.NumberFormat('es-CL', { style: 'currency', currency: 'CLP' }).format(data.monto_total) :\n      'Monto no especificado';\n    \n    const seguimiento = {\n      // Identificadores\n      cotizacion_id: data.cotizacion_id,\n      lead_id: data.lead_id,\n      numero_cotizacion: data.numero_cotizacion || `COT-${data.cotizacion_id}`,\n      \n      // Datos del cliente\n      cliente_nombre: data.nombre_cliente,\n      cliente_telefono: data.telefono_cliente,\n      cliente_email: data.email_cliente,\n      \n      // Datos del asesor\n      asesor_id: data.asesor_asignado_id,\n      asesor_nombre: data.asesor_nombre || 'Asesor sin nombre',\n      asesor_telefono: data.asesor_telefono,\n      asesor_email: data.asesor_email,\n      \n      // Datos del concesionario\n      concesionario_id: data.concesionario_id,\n      concesionario_nombre: data.concesionario_nombre || 'Concesionario no identificado',\n      \n      // Datos de la cotización\n      monto_total: data.monto_total,\n      monto_formateado: montoFormateado,\n      vehiculo_modelo: data.vehiculo_modelo || 'Vehículo no especificado',\n      vehiculo_marca: data.vehiculo_marca || '',\n      fecha_creacion: data.fecha_creacion,\n      fecha_vencimiento: data.fecha_vencimiento,\n      estado_cotizacion: data.estado,\n      \n      // Análisis de tiempo\n      dias_restantes: diasRestantes,\n      horas_desde_creacion: Math.floor(horasCreacion),\n      total_seguimientos_previos: data.total_seguimientos || 0,\n      ultimo_seguimiento: data.ultimo_seguimiento,\n      \n      // Estrategia de seguimiento\n      tipo_seguimiento: tipoSeguimiento,\n      urgencia: urgencia,\n      mensaje_template: mensajeTemplate,\n      canal_preferido: canalPreferido,\n      \n      // Flags de acción\n      requiere_notificacion_asesor: diasRestantes <= 2,\n      requiere_escalamiento: diasRestantes <= 0 || urgencia === 'critica',\n      requiere_llamada: canalPreferido === 'llamada',\n      requiere_supervisor: urgencia === 'critica' && data.total_seguimientos >= 2,\n      \n      // Metadatos\n      timestamp: new Date().toISOString(),\n      procesado: true,\n      errores: []\n    };\n    \n    seguimientos.push({ json: seguimiento });\n  }\n  \n  if (seguimientos.length === 0) {\n    return [{\n      json: {\n        procesado: false,\n        message: 'No hay seguimientos válidos para procesar',\n        total_items: items.length,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n  \n  return seguimientos;\n  \n} catch (error) {\n  return [{\n    json: {\n      status: 'error',\n      message: 'Error al procesar seguimientos de cotizaciones',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "process-follow-ups",
      "name": "Procesar Seguimientos",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": { "caseSensitive": true, "typeValidation": "strict" },
          "conditions": [
            {
              "leftValue": "={{ $json.procesado }}",
              "operator": { "type": "boolean", "operation": "isTrue" },
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-processed",
      "name": "¿Procesado Correctamente?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1400, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.canal_preferido }}",
              "operation": "equal",
              "value2": "whatsapp"
            }
          ]
        }
      },
      "id": "route-by-channel",
      "name": "¿Canal WhatsApp?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [1600, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generar mensaje personalizado para WhatsApp\ntry {\n  const data = $input.first().json;\n  \n  // Templates de mensajes según el tipo\n  const templates = {\n    vencimiento_cotizacion: `🚨 ¡Hola ${data.cliente_nombre}! Tu cotización #${data.numero_cotizacion} para ${data.vehiculo_modelo} vence HOY. ¿Necesitas más tiempo o tienes alguna pregunta? Contáctame: ${data.asesor_nombre} - ${data.asesor_telefono}`,\n    \n    proximo_vencimiento: `👋 Hola ${data.cliente_nombre}! Tu cotización #${data.numero_cotizacion} para ${data.vehiculo_modelo} (${data.monto_formateado}) vence en ${data.dias_restantes} día(s). ¿Te interesa proceder o necesitas algún ajuste? Saludos, ${data.asesor_nombre}`,\n    \n    sin_respuesta_72h: `Hola ${data.cliente_nombre}, esperamos que estés bien. Hace unos días te enviamos la cotización #${data.numero_cotizacion} para ${data.vehiculo_modelo}. ¿Tuviste oportunidad de revisarla? ¿Alguna duda? - ${data.asesor_nombre}`,\n    \n    seguimiento_prioritario: `${data.cliente_nombre}, soy ${data.asesor_nombre} de ${data.concesionario_nombre}. Quería hacer seguimiento a tu cotización prioritaria #${data.numero_cotizacion} para ${data.vehiculo_modelo}. ¿Cuándo podríamos conversar?`,\n    \n    seguimiento_regular: `¡Hola ${data.cliente_nombre}! ¿Cómo estás? Quería saber si revisaste la cotización #${data.numero_cotizacion} para ${data.vehiculo_modelo} que te envié. ¿Tienes alguna pregunta? - ${data.asesor_nombre}`\n  };\n  \n  const mensaje = templates[data.mensaje_template] || templates.seguimiento_regular;\n  \n  // Preparar datos para WhatsApp\n  const whatsappData = {\n    messaging_product: \"whatsapp\",\n    to: data.cliente_telefono.replace(/\\D/g, ''),\n    type: \"text\",\n    text: {\n      body: mensaje\n    },\n    \n    // Metadatos para seguimiento\n    cotizacion_id: data.cotizacion_id,\n    lead_id: data.lead_id,\n    tipo_seguimiento: data.tipo_seguimiento,\n    urgencia: data.urgencia,\n    asesor_id: data.asesor_id,\n    canal_usado: 'whatsapp',\n    timestamp: data.timestamp\n  };\n  \n  return [{ json: whatsappData }];\n  \n} catch (error) {\n  return [{\n    json: {\n      status: 'error',\n      message: 'Error al preparar mensaje WhatsApp',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "prepare-whatsapp",
      "name": "Preparar WhatsApp",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1800, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/{{ $vars.WHATSAPP_PHONE_ID }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContent": "={{ JSON.stringify({\n  messaging_product: $json.messaging_product,\n  to: $json.to,\n  type: $json.type,\n  text: $json.text\n}) }}",
        "options": {}
      },
      "id": "send-whatsapp-message",
      "name": "Enviar WhatsApp",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2000, 200]
    },
    {
      "parameters": {
        "jsCode": "// Preparar notificación para llamada telefónica\ntry {\n  const data = $input.first().json;\n  \n  const notificacionLlamada = {\n    tipo_notificacion: 'llamada_seguimiento_cotizacion',\n    urgencia: data.urgencia,\n    asesor_id: data.asesor_id,\n    asesor_email: data.asesor_email,\n    \n    // Datos de la cotización\n    cotizacion_id: data.cotizacion_id,\n    numero_cotizacion: data.numero_cotizacion,\n    cliente_nombre: data.cliente_nombre,\n    cliente_telefono: data.cliente_telefono,\n    vehiculo_modelo: data.vehiculo_modelo,\n    monto_formateado: data.monto_formateado,\n    dias_restantes: data.dias_restantes,\n    \n    // Contexto de la llamada\n    motivo_llamada: data.tipo_seguimiento,\n    script_sugerido: data.mensaje_template,\n    requiere_escalamiento: data.requiere_escalamiento,\n    \n    // Metadatos\n    canal_usado: 'llamada',\n    timestamp: data.timestamp\n  };\n  \n  return [{ json: notificacionLlamada }];\n  \n} catch (error) {\n  return [{\n    json: {\n      status: 'error',\n      message: 'Error al preparar notificación de llamada',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "prepare-call-notification",
      "name": "Preparar Notificación Llamada",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1800, 400]
    },
    {
      "parameters": {
        "operation": "create",
        "resource": "execution",
        "workflowId": "notificaciones-leads",
        "data": "={{ JSON.stringify($json) }}"
      },
      "id": "trigger-call-notification",
      "name": "Enviar Notificación Llamada",
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 2.1,
      "position": [2000, 400]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "seguimientos_cotizacion",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "cotizacion_id": "={{ $json.cotizacion_id }}",
            "lead_id": "={{ $json.lead_id }}",
            "asesor_id": "={{ $json.asesor_id }}",
            "tipo_seguimiento": "={{ $json.tipo_seguimiento }}",
            "canal_usado": "={{ $json.canal_usado }}",
            "urgencia": "={{ $json.urgencia }}",
            "mensaje_enviado": "={{ $json.text ? $json.text.body : 'Notificación de llamada' }}",
            "estado": "enviado",
            "fecha_seguimiento": "={{ $json.timestamp }}",
            "metadata": "={{ JSON.stringify({\n  numero_cotizacion: $json.numero_cotizacion || 'N/A',\n  dias_restantes: $json.dias_restantes || 0,\n  vehiculo_modelo: $json.vehiculo_modelo || 'N/A',\n  requiere_escalamiento: $json.requiere_escalamiento || false,\n  cliente_telefono: $json.to || $json.cliente_telefono || 'N/A'\n}) }}"
          }
        }
      },
      "id": "log-follow-up",
      "name": "Registrar Seguimiento",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [2200, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.requiere_escalamiento }}",
              "operation": "equal",
              "value2": true
            }
          ]
        }
      },
      "id": "requires-escalation",
      "name": "¿Requiere Escalación?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [2200, 500]
    },
    {
      "parameters": {
        "operation": "create",
        "resource": "execution",
        "workflowId": "notificaciones-leads",
        "data": "={{ JSON.stringify({\n  tipo_notificacion: 'escalacion_cotizacion_vencida',\n  cotizacion_id: $json.cotizacion_id,\n  lead_id: $json.lead_id,\n  concesionario_id: $json.concesionario_id,\n  prioridad: 'critica',\n  mensaje: 'Cotización requiere escalación: ' + $json.numero_cotizacion,\n  datos_escalacion: {\n    dias_restantes: $json.dias_restantes,\n    monto_total: $json.monto_total,\n    total_seguimientos: $json.total_seguimientos_previos,\n    asesor_asignado: $json.asesor_nombre\n  }\n}) }}"
      },
      "id": "trigger-escalation",
      "name": "Escalar Cotización",
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 2.1,
      "position": [2400, 500]
    },
    {
      "parameters": {
        "jsCode": "// Generar resumen de seguimientos procesados\ntry {\n  const seguimientos = $input.all();\n  \n  const resumen = {\n    total_seguimientos: seguimientos.length,\n    por_tipo: {},\n    por_urgencia: {},\n    por_canal: {},\n    escalados: 0,\n    whatsapp_enviados: 0,\n    llamadas_programadas: 0,\n    cotizaciones_urgentes: 0,\n    errores: 0,\n    timestamp: new Date().toISOString(),\n    estado: 'completado'\n  };\n  \n  for (const seguimiento of seguimientos) {\n    const data = seguimiento.json;\n    \n    // Verificar si es respuesta de error\n    if (data.status === 'error') {\n      resumen.errores++;\n      continue;\n    }\n    \n    // Contar por tipo\n    resumen.por_tipo[data.tipo_seguimiento] = (resumen.por_tipo[data.tipo_seguimiento] || 0) + 1;\n    \n    // Contar por urgencia\n    resumen.por_urgencia[data.urgencia] = (resumen.por_urgencia[data.urgencia] || 0) + 1;\n    \n    // Contar por canal\n    resumen.por_canal[data.canal_usado] = (resumen.por_canal[data.canal_usado] || 0) + 1;\n    \n    // Contar especiales\n    if (data.requiere_escalamiento) resumen.escalados++;\n    if (data.canal_usado === 'whatsapp') resumen.whatsapp_enviados++;\n    if (data.canal_usado === 'llamada') resumen.llamadas_programadas++;\n    if (data.urgencia === 'critica') resumen.cotizaciones_urgentes++;\n  }\n  \n  return [{ json: resumen }];\n  \n} catch (error) {\n  return [{\n    json: {\n      status: 'error',\n      message: 'Error al generar resumen',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "generate-summary",
      "name": "Generar Resumen",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [2600, 300]
    },
    {
      "parameters": {
        "jsCode": "// Respuesta de error por configuración inválida\nreturn [{\n  json: {\n    status: 'error',\n    message: 'Configuración de seguimiento de cotizaciones inválida',\n    error_details: $json,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "config-error-response",
      "name": "Error Configuración",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [800, 500]
    },
    {
      "parameters": {
        "jsCode": "// Respuesta cuando no hay cotizaciones para seguimiento\nreturn [{\n  json: {\n    status: 'success',\n    message: 'No hay cotizaciones pendientes de seguimiento',\n    total_cotizaciones_revisadas: 0,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "no-quotes-response",
      "name": "Sin Cotizaciones",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1200, 500]
    },
    {
      "parameters": {
        "jsCode": "// Respuesta de error en procesamiento\nreturn [{\n  json: {\n    status: 'error',\n    message: 'Error en el procesamiento de seguimientos',\n    error_details: $json,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "processing-error-response",
      "name": "Error Procesamiento",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1600, 500]
    }
  ],
  "connections": {
    "Programar Seguimientos": { "main": [[{ "node": "Validar Configuración", "type": "main", "index": 0 }]] },
    "Validar Configuración": { "main": [[{ "node": "¿Configuración Válida?", "type": "main", "index": 0 }]] },
    "¿Configuración Válida?": { "main": [
      [{ "node": "Obtener Cotizaciones para Seguimiento", "type": "main", "index": 0 }],
      [{ "node": "Error Configuración", "type": "main", "index": 0 }]
    ] },
    "Obtener Cotizaciones para Seguimiento": { "main": [[{ "node": "¿Hay Cotizaciones?", "type": "main", "index": 0 }]] },
    "¿Hay Cotizaciones?": { "main": [
      [{ "node": "Procesar Seguimientos", "type": "main", "index": 0 }],
      [{ "node": "Sin Cotizaciones", "type": "main", "index": 0 }]
    ] },
    "Procesar Seguimientos": { "main": [[{ "node": "¿Procesado Correctamente?", "type": "main", "index": 0 }]] },
    "¿Procesado Correctamente?": { "main": [
      [{ "node": "¿Canal WhatsApp?", "type": "main", "index": 0 }],
      [{ "node": "Error Procesamiento", "type": "main", "index": 0 }]
    ] },
    "¿Canal WhatsApp?": { "main": [
      [{ "node": "Preparar WhatsApp", "type": "main", "index": 0 }],
      [{ "node": "Preparar Notificación Llamada", "type": "main", "index": 0 }]
    ] },
    "Preparar WhatsApp": { "main": [[{ "node": "Enviar WhatsApp", "type": "main", "index": 0 }]] },
    "Enviar WhatsApp": { "main": [
      [{ "node": "Registrar Seguimiento", "type": "main", "index": 0 }],
      [{ "node": "¿Requiere Escalación?", "type": "main", "index": 0 }]
    ] },
    "Preparar Notificación Llamada": { "main": [[{ "node": "Enviar Notificación Llamada", "type": "main", "index": 0 }]] },
    "Enviar Notificación Llamada": { "main": [
      [{ "node": "Registrar Seguimiento", "type": "main", "index": 0 }],
      [{ "node": "¿Requiere Escalación?", "type": "main", "index": 0 }]
    ] },
    "Registrar Seguimiento": { "main": [[{ "node": "Generar Resumen", "type": "main", "index": 0 }]] },
    "¿Requiere Escalación?": { "main": [
      [{ "node": "Escalar Cotización", "type": "main", "index": 0 }]
    ] },
    "Escalar Cotización": { "main": [[{ "node": "Generar Resumen", "type": "main", "index": 0 }]] }
  },
  "settings": {
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "executionTimeout": 300
  }
}
