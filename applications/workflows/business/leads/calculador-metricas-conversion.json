{
  "meta": {
    "instanceId": "calc-conversion-001"
  },
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours", 
              "hoursInterval": 6
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH conversion_metrics AS (\n  SELECT \n    DATE(l.fecha_contacto) as fecha,\n    l.concesionario_id,\n    c.nombre as concesionario_nombre,\n    l.canal_origen,\n    \n    -- M√©tricas b√°sicas\n    COUNT(*) as total_leads,\n    COUNT(CASE WHEN l.estado = 'contactado' THEN 1 END) as leads_contactados,\n    COUNT(CASE WHEN l.estado IN ('interesado', 'seguimiento') THEN 1 END) as leads_calificados,\n    COUNT(CASE WHEN l.estado = 'convertido' THEN 1 END) as leads_convertidos,\n    \n    -- Tiempo promedio de respuesta\n    AVG(EXTRACT(EPOCH FROM (l.fecha_primer_contacto - l.fecha_contacto))/3600) as tiempo_respuesta_horas,\n    \n    -- M√©tricas por asesor\n    COUNT(DISTINCT l.asesor_id) as asesores_involucrados,\n    \n    -- Valor estimado\n    SUM(CASE WHEN l.estado = 'convertido' THEN COALESCE(l.valor_estimado, 25000) ELSE 0 END) as valor_total_convertido\n    \n  FROM leads l\n  LEFT JOIN concesionarios c ON l.concesionario_id = c.id\n  WHERE l.fecha_contacto >= NOW() - INTERVAL '7 days'\n  GROUP BY DATE(l.fecha_contacto), l.concesionario_id, c.nombre, l.canal_origen\n)\nSELECT \n  *,\n  -- C√°lculo de tasas de conversi√≥n\n  ROUND((leads_contactados::decimal / NULLIF(total_leads, 0)) * 100, 2) as tasa_contacto,\n  ROUND((leads_calificados::decimal / NULLIF(leads_contactados, 0)) * 100, 2) as tasa_calificacion,\n  ROUND((leads_convertidos::decimal / NULLIF(leads_calificados, 0)) * 100, 2) as tasa_conversion,\n  ROUND((leads_convertidos::decimal / NULLIF(total_leads, 0)) * 100, 2) as tasa_conversion_total,\n  \n  -- ROI estimado\n  ROUND(valor_total_convertido / NULLIF(total_leads * 50, 0), 2) as roi_estimado\n  \nFROM conversion_metrics\nORDER BY fecha DESC, tasa_conversion_total DESC;",
        "options": {}
      },
      "id": "query-metrics",
      "name": "Consultar M√©tricas",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [460, 300],
      "credentials": {
        "postgres": {
          "id": "supabase-main",
          "name": "Supabase Main DB"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Procesar y agregar m√©tricas de conversi√≥n\nconst items = $input.all();\nconst resultados = [];\nconst alertas = [];\n\n// Agrupar por concesionario para an√°lisis consolidado\nconst porConcesionario = {};\n\nfor (const item of items) {\n  const data = item.json;\n  const key = `${data.concesionario_id}_${data.fecha}`;\n  \n  if (!porConcesionario[key]) {\n    porConcesionario[key] = {\n      concesionario_id: data.concesionario_id,\n      concesionario_nombre: data.concesionario_nombre,\n      fecha: data.fecha,\n      canales: [],\n      totales: {\n        leads: 0,\n        contactados: 0,\n        calificados: 0,\n        convertidos: 0,\n        valor_total: 0\n      }\n    };\n  }\n  \n  // Agregar datos del canal\n  porConcesionario[key].canales.push({\n    canal: data.canal_origen,\n    total_leads: data.total_leads,\n    tasa_contacto: data.tasa_contacto,\n    tasa_calificacion: data.tasa_calificacion,\n    tasa_conversion: data.tasa_conversion,\n    tasa_conversion_total: data.tasa_conversion_total,\n    tiempo_respuesta_horas: data.tiempo_respuesta_horas,\n    roi_estimado: data.roi_estimado\n  });\n  \n  // Acumular totales\n  porConcesionario[key].totales.leads += data.total_leads;\n  porConcesionario[key].totales.contactados += data.leads_contactados;\n  porConcesionario[key].totales.calificados += data.leads_calificados;\n  porConcesionario[key].totales.convertidos += data.leads_convertidos;\n  porConcesionario[key].totales.valor_total += data.valor_total_convertido;\n}\n\n// Procesar cada concesionario\nfor (const [key, concesionario] of Object.entries(porConcesionario)) {\n  const totales = concesionario.totales;\n  \n  // Calcular m√©tricas consolidadas\n  const metricas = {\n    concesionario_id: concesionario.concesionario_id,\n    concesionario_nombre: concesionario.concesionario_nombre,\n    fecha_calculo: concesionario.fecha,\n    periodo: '24h',\n    \n    // Totales\n    total_leads: totales.leads,\n    total_contactados: totales.contactados,\n    total_calificados: totales.calificados,\n    total_convertidos: totales.convertidos,\n    valor_total_ventas: totales.valor_total,\n    \n    // Tasas consolidadas\n    tasa_contacto_general: Math.round((totales.contactados / totales.leads) * 100 * 100) / 100,\n    tasa_calificacion_general: Math.round((totales.calificados / totales.contactados) * 100 * 100) / 100,\n    tasa_conversion_general: Math.round((totales.convertidos / totales.calificados) * 100 * 100) / 100,\n    tasa_conversion_total: Math.round((totales.convertidos / totales.leads) * 100 * 100) / 100,\n    \n    // ROI y valor promedio\n    roi_general: Math.round((totales.valor_total / (totales.leads * 50)) * 100) / 100,\n    valor_promedio_venta: totales.convertidos > 0 ? Math.round(totales.valor_total / totales.convertidos) : 0,\n    \n    // Mejor canal\n    mejor_canal: concesionario.canales.reduce((mejor, actual) => \n      actual.tasa_conversion_total > (mejor?.tasa_conversion_total || 0) ? actual : mejor\n    , null)?.canal || 'N/A',\n    \n    // Detalle por canal\n    detalle_canales: concesionario.canales,\n    \n    timestamp: new Date().toISOString()\n  };\n  \n  resultados.push({ json: metricas });\n  \n  // Generar alertas para m√©tricas cr√≠ticas\n  if (metricas.tasa_conversion_total < 5 && metricas.total_leads >= 10) {\n    alertas.push({\n      tipo: 'conversion_baja',\n      concesionario: metricas.concesionario_nombre,\n      tasa: metricas.tasa_conversion_total,\n      leads: metricas.total_leads,\n      fecha: metricas.fecha_calculo\n    });\n  }\n  \n  if (metricas.tasa_contacto_general < 70 && metricas.total_leads >= 5) {\n    alertas.push({\n      tipo: 'contacto_bajo',\n      concesionario: metricas.concesionario_nombre,\n      tasa: metricas.tasa_contacto_general,\n      leads: metricas.total_leads,\n      fecha: metricas.fecha_calculo\n    });\n  }\n}\n\n// Guardar alertas en contexto\nif (alertas.length > 0) {\n  $execution.set('alertas_conversion', alertas);\n}\n\nreturn resultados;"
      },
      "id": "calculate-conversion",
      "name": "Calcular Conversi√≥n",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "operation": "upsert",
        "table": "metricas_conversion_leads",
        "updateKey": "concesionario_id,fecha_calculo,periodo",
        "columnsUi": {
          "columnToMatchOn": [
            {
              "column": "concesionario_id",
              "operator": "="
            },
            {
              "column": "fecha_calculo",
              "operator": "="
            },
            {
              "column": "periodo",
              "operator": "="
            }
          ],
          "columnsToUpdate": [
            {
              "column": "total_leads"
            },
            {
              "column": "total_contactados"
            },
            {
              "column": "total_calificados"
            },
            {
              "column": "total_convertidos"
            },
            {
              "column": "valor_total_ventas"
            },
            {
              "column": "tasa_contacto_general"
            },
            {
              "column": "tasa_calificacion_general"
            },
            {
              "column": "tasa_conversion_general"
            },
            {
              "column": "tasa_conversion_total"
            },
            {
              "column": "roi_general"
            },
            {
              "column": "valor_promedio_venta"
            },
            {
              "column": "mejor_canal"
            },
            {
              "column": "detalle_canales"
            },
            {
              "column": "timestamp"
            }
          ]
        }
      },
      "id": "save-metrics",
      "name": "Guardar M√©tricas",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [900, 300],
      "credentials": {
        "postgres": {
          "id": "supabase-main",
          "name": "Supabase Main DB"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "alertas-exist",
              "leftValue": "={{ $execution.get('alertas_conversion') }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-alerts",
      "name": "¬øHay Alertas?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "sendTo": "ventas@optimacx.com,gerencia@optimacx.com",
        "subject": "üìä Alerta M√©tricas de Conversi√≥n - {{ new Date().toLocaleDateString() }}",
        "message": "=**ALERTAS DE CONVERSI√ìN DETECTADAS:**\n\n{{ $execution.get('alertas_conversion').map(alerta => \n  `üî∏ **${alerta.concesionario}**\n   - Tipo: ${alerta.tipo === 'conversion_baja' ? 'Conversi√≥n Baja' : 'Contacto Bajo'}\n   - Tasa: ${alerta.tasa}%\n   - Leads: ${alerta.leads}\n   - Fecha: ${alerta.fecha}` \n).join('\\n\\n') }}\n\n**Acci√≥n requerida:** Revisar procesos de seguimiento y contacto.\n\nDashboard: https://dashboard.optimacx.com/conversion\n\nSaludos,\nSistema OptimaCX",
        "options": {
          "allowUnauthorizedCerts": false
        }
      },
      "id": "send-alert",
      "name": "Enviar Alerta",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [1340, 200],
      "credentials": {
        "smtp": {
          "id": "smtp-optimacx",
          "name": "SMTP OptimaCX"
        }
      }
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Consultar M√©tricas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consultar M√©tricas": {
      "main": [
        [
          {
            "node": "Calcular Conversi√≥n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calcular Conversi√≥n": {
      "main": [
        [
          {
            "node": "Guardar M√©tricas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardar M√©tricas": {
      "main": [
        [
          {
            "node": "¬øHay Alertas?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¬øHay Alertas?": {
      "main": [
        [
          {
            "node": "Enviar Alerta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["leads", "conversion", "metricas"],
  "triggerCount": 0,
  "updatedAt": "2024-08-09T05:47:00.000Z",
  "versionId": "calc-conversion-v2.1",
  "name": "Calculador M√©tricas Conversi√≥n",
  "active": true,
  "id": "calc-conversion-metrics",
  "hash": "conversion-metrics-calculator"
}
