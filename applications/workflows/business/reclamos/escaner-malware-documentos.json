{
  "name": "Security - Malware Scanner",
  "description": "Workflow de seguridad que escanea documentos en busca de malware antes de procesarlos en el pipeline RAG.",
  "tags": ["security", "malware", "rag", "srp"],
  "nodes": [
    {
      "parameters": {
        "workflowId": "{{ $json.workflowId }}"
      },
      "id": "workflow-trigger",
      "name": "Trigger del Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Simulación de escaneo de malware. En un entorno real, esto se integraría con un servicio como ClamAV.\nconst documentData = $input.first().json;\nconst content = documentData.content_to_chunk || '';\n\n// Patrones de prueba simples para simular detección\nconst maliciousPatterns = [\n  'eicar-test-string',\n  'malware-simulation',\n  'virus-test'\n];\n\nlet is_infected = false;\nlet detected_pattern = null;\n\nfor (const pattern of maliciousPatterns) {\n  if (content.toLowerCase().includes(pattern)) {\n    is_infected = true;\n    detected_pattern = pattern;\n    break;\n  }\n}\n\nreturn {\n  ...documentData,\n  security_scan: {\n    status: is_infected ? 'infected' : 'clean',\n    detected_pattern: detected_pattern,\n    scanned_at: new Date().toISOString(),\n    scanner_version: '1.0.0-simulated'\n  }\n};"
      },
      "id": "simulate-malware-scan",
      "name": "Simular Escaneo de Malware",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.security_scan.status === 'clean' }}",
              "operation": "equal",
              "value2": true
            }
          ]
        }
      },
      "id": "check-scan-result",
      "name": "¿Documento Limpio?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "operation": "create",
        "resource": "execution",
        "workflowId": "fragmentacion-conocimiento",
        "data": "={{ JSON.stringify($json) }}"
      },
      "id": "trigger-chunking-workflow",
      "name": "Continuar a Fragmentación",
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "jsCode": "// Manejar documento infectado\nconst scanData = $input.first().json;\n\nconst alertPayload = {\n  alert_type: 'malware_detected',\n  tenant_id: scanData.tenant_id,\n  document_id: scanData.document_id,\n  document_title: scanData.document_title,\n  detected_pattern: scanData.security_scan.detected_pattern,\n  severity: 'critical',\n  message: `Se detectó posible malware en el documento '${scanData.document_title}' para el tenant ${scanData.tenant_id}. El procesamiento ha sido abortado.`\n};\n\nconsole.error('MALWARE DETECTADO:', alertPayload);\n\n// Aquí se podría disparar un workflow de alerta a administradores\nreturn { alert: alertPayload, processing_aborted: true };"
      },
      "id": "handle-infected-document",
      "name": "Manejar Documento Infectado",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 400]
    }
  ],
  "connections": {
    "Trigger del Workflow": {
      "main": [
        [
          {
            "node": "Simular Escaneo de Malware",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simular Escaneo de Malware": {
      "main": [
        [
          {
            "node": "¿Documento Limpio?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "¿Documento Limpio?": {
      "main": [
        [
          {
            "node": "Continuar a Fragmentación",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Manejar Documento Infectado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  }
}