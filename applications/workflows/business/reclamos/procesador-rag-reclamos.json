{
  "name": "Complaint RAG Processor",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook/complaint/rag-process",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-complaint-input",
      "name": "Complaint Input Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300],
      "webhookId": "complaint-rag-processor"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.tenant_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            },
            {
              "leftValue": "={{ $json.complaint_text }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ],
          "combineOperation": "all"
        }
      },
      "id": "validate-complaint",
      "name": "Validate Complaint",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "/*** COMPLAINT RAG PROCESSOR - SRP: Solo an치lisis IA con RAG ***/\nconst webhookData = $input.first().json;\n\n
      },
      "id": "normalize-complaint",
      "name": "Normalize Complaint",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $vars.SUPABASE_URL }}/rest/v1/tenant_config",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headers": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.SUPABASE_SERVICE_KEY }}"
            }
          ]
        },
        "qs": {
          "parameters": [
            {
              "name": "concesionario_id",
              "value": "eq.{{ $json.tenant_id }}"
            },
            {
              "name": "select",
              "value": "*"
            }
          ]
        }
      },
      "id": "load-tenant-config",
      "name": "Load Tenant Config",
      "type": "n8n-nodes-base.httpRequestV3",
      "typeVersion": 4.1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https:
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headers": {
          "parameters": [
            {
              "name": "x-goog-api-key", 
              "value": "={{ $vars.GEMINI_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "body": {
          "parameters": [
            {
              "name": "content",
              "value": "={\n  \"parts\": [\n    {\n      \"text\": \"{{ $('Normalize Complaint').first().json.complaint_text }}\"\n    }\n  ]\n}"
            },
            {
              "name": "taskType",
              "value": "RETRIEVAL_QUERY"
            }
          ]
        }
      },
      "id": "generate-embedding",
      "name": "Generate Embedding",
      "type": "n8n-nodes-base.httpRequestV3", 
      "typeVersion": 4.1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.SUPABASE_URL }}/rest/v1/rpc/search_knowledge_base",
        "authentication": "genericCredentialType", 
        "genericAuthType": "httpHeaderAuth",
        "headers": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.SUPABASE_SERVICE_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "body": {
          "parameters": [
            {
              "name": "query_embedding",
              "value": "={{ JSON.stringify($('Generate Embedding').first().json.embedding.values) }}"
            },
            {
              "name": "tenant_filter",
              "value": "={{ $('Normalize Complaint').first().json.tenant_id }}"
            },
            {
              "name": "similarity_threshold",
              "value": 0.7
            },
            {
              "name": "max_results",
              "value": 10
            }
          ]
        }
      },
      "id": "vector-search",
      "name": "Vector Search",
      "type": "n8n-nodes-base.httpRequestV3",
      "typeVersion": 4.1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combineOperation": "all"
        }
      },
      "id": "check-knowledge-found",
      "name": "Check Knowledge Found",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "operation": "create",
        "resource": "execution",
        "workflowId": "rerank-cohere-documentos",
        "data": "={{ JSON.stringify({ query: $('Normalize Complaint').first().json.complaint_text, documents: $input.all().map(i => i.json), tenant_id: $('Normalize Complaint').first().json.tenant_id }) }}"
      },
      "id": "rerank-cohere-documents",
      "name": "Rerank Documents (Cohere)",
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 2,
      "position": [1680, 200]
    },
    {
      "parameters": {
        "jsCode": "
      },
      "id": "build-enhanced-prompt",
      "name": "Build Enhanced Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 200]
    },
    {
      "parameters": {
        "jsCode": "
      },
      "id": "build-basic-prompt",
      "name": "Build Basic Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https:
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headers": {
          "parameters": [
            {
              "name": "x-goog-api-key",
              "value": "={{ $vars.GEMINI_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "body": {
          "parameters": [
            {
              "name": "contents",
              "value": "=[\n  {\n    \"parts\": [\n      {\n        \"text\": \"{{ $json.enhanced_prompt }}\"\n      }\n    ]\n  }\n]"
            },
            {
              "name": "generationConfig",
              "value": "={\n  \"temperature\": 0.1,\n  \"topK\": 40,\n  \"topP\": 0.8,\n  \"maxOutputTokens\": 2048\n}"
            }
          ]
        }
      },
      "id": "gemini-analysis",
      "name": "Gemini Analysis",
      "type": "n8n-nodes-base.httpRequestV3",
      "typeVersion": 4.1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "jsCode": "
      },
      "id": "process-ai-response",
      "name": "Process AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2220, 300]
    },
    {
      "parameters": {
        "operation": "create",
        "resource": "execution",
        "workflowId": "complaint-auto-assignment",
        "data": "={{ JSON.stringify($json) }}"
      },
      "id": "trigger-assignment",
      "name": "Trigger Assignment",
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 2,
      "position": [2440, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"message\": \"Reclamo procesado con IA + RAG. Iniciando asignaci칩n autom치tica.\",\n  \"analysis_data\": {\n    \"classification\": {{ JSON.stringify($('Process AI Response').first().json.ai_analysis.clasificacion) }},\n    \"rag_used\": {{ $('Process AI Response').first().json.processing_metadata.used_rag }},\n    \"documents_found\": {{ $('Process AI Response').first().json.processing_metadata.documents_found }},\n    \"next_step\": \"auto_assignment\"\n  },\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}"
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 2,
      "position": [2660, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"error\",\n  \"message\": \"Datos de reclamo inv치lidos. Verifique tenant_id y complaint_text.\",\n  \"error_details\": {\n    \"tenant_id_present\": {{ !!$json.tenant_id }},\n    \"complaint_text_present\": {{ !!$json.complaint_text }}\n  },\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {
          "responseCode": 400
        }
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 2,
      "position": [460, 500]
    }
  ],
  "connections": {
    "Complaint Input Webhook": {
      "main": [
        [
          {
            "node": "Validate Complaint",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Complaint": {
      "main": [
        [
          {
            "node": "Normalize Complaint",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Complaint": {
      "main": [
        [
          {
            "node": "Load Tenant Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Tenant Config": {
      "main": [
        [
          {
            "node": "Generate Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Embedding": {
      "main": [
        [
          {
            "node": "Vector Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vector Search": {
      "main": [
        [
          {
            "node": "Check Knowledge Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Knowledge Found": {
      "main": [
        [
          {
            "node": "Rerank Documents (Cohere)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Build Basic Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rerank Documents (Cohere)": {
      "main": [
        [
          {
            "node": "Build Enhanced Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Enhanced Prompt": {
      "main": [
        [
          {
            "node": "Gemini Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Basic Prompt": {
      "main": [
        [
          {
            "node": "Gemini Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Analysis": {
      "main": [
        [
          {
            "node": "Process AI Response",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Build Enhanced Prompt": {
      "main": [
        [
          {
            "node": "Process AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Basic Prompt": {
      "main": [
        [
          {
            "node": "Process AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Response": {
      "main": [
        [
          {
            "node": "Trigger Assignment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Assignment": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "srp",
      "name": "srp"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "reclamos",
      "name": "reclamos"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "rag",
      "name": "rag"
    }
  ],
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "complaint-rag-processor",
  "versionId": "1.0.0"
}