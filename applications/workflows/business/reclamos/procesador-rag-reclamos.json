{
  "meta": {
    "instanceId": "rag-processor-001"
  },
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "procesar-rag-reclamo",
        "options": {}
      },
      "id": "webhook-rag-trigger",
      "name": "Webhook RAG",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300],
      "webhookId": "rag-claims-processor"
    },
    {
      "parameters": {
        "jsCode": "// Procesar consulta de reclamo para RAG\nconst input = $input.first().json;\n\n// Extraer información de la consulta\nconst consulta = {\n  reclamo_id: input.reclamo_id || input.id,\n  query: input.query || input.consulta || input.mensaje,\n  context: input.context || '',\n  user_id: input.user_id || 'sistema',\n  session_id: input.session_id || `session_${Date.now()}`,\n  tipo_busqueda: input.tipo || 'semantica'\n};\n\n// Limpiar y preparar query\nconst queryLimpia = consulta.query\n  .toLowerCase()\n  .replace(/[^a-záéíóúñü0-9\\s]/g, ' ')\n  .replace(/\\s+/g, ' ')\n  .trim();\n\n// Palabras clave para categorización\nconst categorias = {\n  garantia: /garantía|garantia|defecto|falla|reparación|cambio/i,\n  servicio: /servicio|atención|asesor|cita|turno|horario/i,\n  financiero: /financiamiento|crédito|pago|cuota|interés/i,\n  entrega: /entrega|demora|retraso|fecha|plazo/i,\n  tecnico: /motor|frenos|transmisión|eléctrico|mecánico/i\n};\n\nconst categoria = Object.keys(categorias).find(cat => \n  categorias[cat].test(consulta.query)\n) || 'general';\n\nconst resultado = {\n  ...consulta,\n  query_procesada: queryLimpia,\n  categoria_detectada: categoria,\n  timestamp: new Date().toISOString(),\n  embedding_requerido: true\n};\n\nreturn [{ json: resultado }];"
      },
      "id": "process-query",
      "name": "Procesar Consulta",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.OPENAI_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "input",
              "value": "={{ $json.query_procesada }}"
            },
            {
              "name": "model",
              "value": "text-embedding-3-small"
            },
            {
              "name": "encoding_format",
              "value": "float"
            }
          ]
        },
        "options": {}
      },
      "id": "generate-embedding",
      "name": "Generar Embedding",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH similarity_search AS (\n  SELECT \n    id,\n    titulo,\n    contenido,\n    categoria,\n    metadata,\n    (embedding <=> '{{ JSON.stringify($json.data[0].embedding) }}'::vector) as distancia\n  FROM documentos_conocimiento\n  WHERE categoria = '{{ $('Procesar Consulta').first().json.categoria_detectada }}'\n     OR categoria = 'general'\n  ORDER BY distancia\n  LIMIT 5\n)\nSELECT \n  *,\n  (1 - distancia) as similitud\nFROM similarity_search\nWHERE distancia < 0.8;",
        "options": {}
      },
      "id": "search-knowledge",
      "name": "Buscar Conocimiento",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [900, 300],
      "credentials": {
        "postgres": {
          "id": "supabase-main",
          "name": "Supabase Main DB"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Construir contexto para LLM\nconst query = $('Procesar Consulta').first().json;\nconst documentos = $input.all();\n\n// Construir contexto relevante\nconst contexto = documentos\n  .filter(doc => doc.json.similitud > 0.3)\n  .map(doc => `**${doc.json.titulo}**\\n${doc.json.contenido}`)\n  .join('\\n\\n---\\n\\n');\n\n// Preparar prompt para el LLM\nconst prompt = `Eres un asistente especializado en resolver reclamos de concesionarios automotrices.\n\nCONSULTA DEL CLIENTE:\n${query.query}\n\nCATEGORÍA: ${query.categoria_detectada}\n\nCONTEXTO RELEVANTE:\n${contexto}\n\nINSTRUCCIONES:\n1. Proporciona una respuesta clara y profesional\n2. Usa el contexto proporcionado como base\n3. Si no tienes información suficiente, indica qué pasos seguir\n4. Incluye referencias a políticas o procedimientos cuando sea relevante\n5. Mantén un tono empático y orientado a la solución\n\nRESPUESTA:`;\n\nconst resultado = {\n  query_original: query.query,\n  categoria: query.categoria_detectada,\n  contexto_encontrado: contexto,\n  documentos_relevantes: documentos.length,\n  prompt_generado: prompt,\n  session_id: query.session_id,\n  reclamo_id: query.reclamo_id\n};\n\nreturn [{ json: resultado }];"
      },
      "id": "build-context",
      "name": "Construir Contexto",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.OPENAI_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-4o-mini"
            },
            {
              "name": "messages",
              "value": "={{ [{ role: 'user', content: $json.prompt_generado }] }}"
            },
            {
              "name": "temperature",
              "value": 0.3
            },
            {
              "name": "max_tokens",
              "value": 1000
            }
          ]
        },
        "options": {}
      },
      "id": "generate-response",
      "name": "Generar Respuesta",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "rag_interacciones",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "reclamo_id": "={{ $('Construir Contexto').first().json.reclamo_id }}",
            "query": "={{ $('Construir Contexto').first().json.query_original }}",
            "categoria": "={{ $('Construir Contexto').first().json.categoria }}",
            "respuesta": "={{ $json.choices[0].message.content }}",
            "documentos_utilizados": "={{ $('Construir Contexto').first().json.documentos_relevantes }}",
            "session_id": "={{ $('Construir Contexto').first().json.session_id }}",
            "metadata": "={{ JSON.stringify({\n  contexto_longitud: $('Construir Contexto').first().json.contexto_encontrado.length,\n  tokens_utilizados: $json.usage.total_tokens,\n  modelo: 'gpt-4o-mini',\n  timestamp: new Date().toISOString()\n}) }}",
            "fecha_interaccion": "={{ new Date().toISOString() }}"
          }
        },
        "options": {}
      },
      "id": "log-interaction",
      "name": "Registrar Interacción",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1560, 300],
      "credentials": {
        "postgres": {
          "id": "supabase-main",
          "name": "Supabase Main DB"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Formatear respuesta final\nconst respuestaLLM = $('Generar Respuesta').first().json;\nconst contexto = $('Construir Contexto').first().json;\n\nconst respuestaFinal = {\n  success: true,\n  reclamo_id: contexto.reclamo_id,\n  query: contexto.query_original,\n  categoria: contexto.categoria,\n  respuesta: respuestaLLM.choices[0].message.content,\n  documentos_consultados: contexto.documentos_relevantes,\n  session_id: contexto.session_id,\n  timestamp: new Date().toISOString(),\n  metadata: {\n    tokens_used: respuestaLLM.usage.total_tokens,\n    processing_time: Date.now() - new Date($('Procesar Consulta').first().json.timestamp).getTime(),\n    model: 'gpt-4o-mini'\n  }\n};\n\nreturn [{ json: respuestaFinal }];"
      },
      "id": "format-response",
      "name": "Formatear Respuesta",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 300]
    }
  ],
  "connections": {
    "Webhook RAG": {
      "main": [
        [
          {
            "node": "Procesar Consulta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar Consulta": {
      "main": [
        [
          {
            "node": "Generar Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generar Embedding": {
      "main": [
        [
          {
            "node": "Buscar Conocimiento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Buscar Conocimiento": {
      "main": [
        [
          {
            "node": "Construir Contexto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Construir Contexto": {
      "main": [
        [
          {
            "node": "Generar Respuesta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generar Respuesta": {
      "main": [
        [
          {
            "node": "Registrar Interacción",
            "type": "main",
            "index": 0
          },
          {
            "node": "Formatear Respuesta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["reclamos", "rag", "ia", "conocimiento"],
  "triggerCount": 0,
  "updatedAt": "2024-08-09T05:47:00.000Z",
  "versionId": "rag-processor-v2.1",
  "name": "Procesador RAG Reclamos",
  "active": true,
  "id": "rag-claims-processor",
  "hash": "rag-knowledge-processor"
}
