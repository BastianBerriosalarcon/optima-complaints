{
  "name": "Complaint Notifications",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook/complaint/notifications",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Notifications Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [240, 300],
      "webhookId": "complaint-notifications"
    },
    {
      "parameters": {
        "fieldToSplitOut": "notification_targets",
        "options": {}
      },
      "id": "split-notification-targets",
      "name": "Split Notification Targets",
      "type": "n8n-nodes-base.itemLists",
      "typeVersion": 3,
      "position": [460, 300]
    },
    {
      "parameters": {
  "jsCode": "/*** COMPLAINT NOTIFICATIONS - SRP: Solo notificaciones personalizadas por rol ***/\nconst notificationData = $('Notifications Trigger').first().json || {};\nconst currentTarget = $input.first().json || {};\n\nconst complaintData = notificationData.complaint_data || {};\nconst tenantId = notificationData.tenant_id || notificationData.tenant || notificationData.concesionario_id;\nconst isBlackAlert = !!notificationData.is_black_alert;\n\nconst to = currentTarget.email || currentTarget.to;\nconst role = currentTarget.rol || currentTarget.role || 'desconocido';\nconst subject = `${isBlackAlert ? '⚠️' : 'ℹ️'} Reclamo #${complaintData.id_externo || complaintData.id || 'N/A'} - Notificación (${role})`;\nconst html = `<!doctype html><html><body>\n  <h3>${isBlackAlert ? '⚠️ Black Alert' : 'Notificación de Reclamo'}</h3>\n  <p>Estimado/a,</p>\n  <p>Se informa actualización del reclamo <strong>#${complaintData.id_externo || complaintData.id || 'N/A'}</strong>.</p>\n  <ul>\n    <li><strong>Cliente:</strong> ${complaintData.cliente_nombre || 'N/D'}</li>\n    <li><strong>VIN:</strong> ${complaintData.vin || 'N/D'}</li>\n    <li><strong>Estado:</strong> ${complaintData.estado || 'N/D'}</li>\n  </ul>\n  <p>Saludos,<br/>Optimacx</p>\n</body></html>`;\n\nreturn [{ json: { to, subject, html, priority: isBlackAlert ? 'urgent' : 'normal', tenant_id: tenantId, complaint_id: complaintData.id || null } }];"
      },
      "id": "prepare-role-notification",
      "name": "Prepare Role Notification",  
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.N8N_WEBHOOK_URL }}/webhook/send-email",
        "headers": {
          "parameters": [
            {
              "name": "Content-Type", 
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.N8N_WEBHOOK_AUTH_TOKEN }}"
            }
          ]
        },
        "body": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.to }}"
            },
            {
              "name": "subject",
              "value": "={{ $json.subject }}"
            },
            {
              "name": "html",
              "value": "={{ $json.html }}"
            },
            {
              "name": "priority",
              "value": "={{ $json.priority }}"
            },
            {
              "name": "tenant_id",
              "value": "={{ $json.tenant_id }}"
            },
            {
              "name": "notification_type",
              "value": "complaint_assignment"
            }
          ]
        }
      },
  "name": "Send Role Notification",
      "type": "n8n-nodes-base.httpRequestV3",
      "typeVersion": 4.1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "amount": 1,
        "unit": "seconds"
      },
      "id": "rate-limit-delay",
      "name": "Rate Limit Delay",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 2.1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generar reporte de notificaciones\nconst triggerJson = $('Notifications Trigger').first().json || {};\nconst splitItem = $('Split Notification Targets').first().json || {};\nconst totalTargets = Array.isArray(splitItem.notification_targets) ? splitItem.notification_targets.length : ($input.all().length || 0);\nconst sent = $input.all().length;\nconst successRate = totalTargets ? Math.round((sent / totalTargets) * 100) : 100;\nreturn [{ json: {\n  complaint_id: triggerJson.complaint_data?.id || null,\n  notification_stats: { successful_sends: sent, total_targets: totalTargets, success_rate: successRate },\n  by_role: {},\n  completed_at: new Date().toISOString(),\n  tenant_id: triggerJson.tenant_id || null,\n  is_black_alert: !!triggerJson.is_black_alert,\n  complaint_urgency: triggerJson.complaint_urgency || 'normal'\n} }];"
      },
      "id": "generate-notification-report",
      "name": "Generate Notification Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.SUPABASE_URL }}/rest/v1/complaint_notifications_log",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headers": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.SUPABASE_SERVICE_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "body": {
          "parameters": [
            {
              "name": "complaint_id",
              "value": "={{ $json.complaint_id }}"
            },
            {
              "name": "concesionario_id",
              "value": "={{ $json.tenant_id }}"
            },
            {
              "name": "notification_stats",
              "value": "={{ JSON.stringify($json.notification_stats) }}"
            },
            {
              "name": "by_role_breakdown",
              "value": "={{ JSON.stringify($json.by_role) }}"
            },
            {
              "name": "is_black_alert",
              "value": "={{ $json.is_black_alert }}"
            },
            {
              "name": "urgency_level",
              "value": "={{ $json.complaint_urgency }}"
            },
            {
              "name": "completed_at",
              "value": "={{ $json.completed_at }}"
            }
          ]
        }
      },
      "id": "log-notifications",
      "name": "Log Notifications",
      "type": "n8n-nodes-base.httpRequestV3",
      "typeVersion": 4.1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"message\": \"Notificaciones de reclamo enviadas correctamente\",\n  \"notification_data\": {\n    \"complaint_id\": \"{{ $('Generate Notification Report').first().json.complaint_id }}\",\n    \"notifications_sent\": {{ $('Generate Notification Report').first().json.notification_stats.successful_sends }},\n    \"total_targets\": {{ $('Generate Notification Report').first().json.notification_stats.total_targets }},\n    \"success_rate\": \"{{ $('Generate Notification Report').first().json.notification_stats.success_rate }}%\",\n    \"by_role\": {{ JSON.stringify($('Generate Notification Report').first().json.by_role) }}\n  },\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}"
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 2.1,
      "position": [1780, 300]
    }
  ],
  "connections": {
    "Notifications Trigger": {
      "main": [
        [
          {
            "node": "Split Notification Targets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Notification Targets": {
      "main": [
        [
          {
            "node": "Prepare Role Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Role Notification": {
      "main": [
        [
          {
            "node": "Send Role Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Role Notification": {
      "main": [
        [
          {
            "node": "Rate Limit Delay",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rate Limit Delay": {
      "main": [
        [
          {
            "node": "Generate Notification Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Notification Report": {
      "main": [
        [
          {
            "node": "Log Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Notifications": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "srp",
      "name": "srp"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "reclamos",
      "name": "reclamos"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "notifications",
      "name": "notifications"
    }
  ],
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "complaint-notifications",
  "versionId": "1.0.0"
}