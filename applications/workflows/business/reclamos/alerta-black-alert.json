{
  "name": "Complaint Black Alert",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook/complaint/black-alert",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Black Alert Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [240, 300],
      "webhookId": "complaint-black-alert"
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $vars.SUPABASE_URL }}/rest/v1/usuarios",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headers": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.SUPABASE_SERVICE_KEY }}"
            }
          ]
        },
        "qs": {
          "parameters": [
            {
              "name": "concesionario_id",
              "value": "eq.{{ $json.tenant_id }}"
            },
            {
              "name": "or",
              "value": "(rol.eq.encargado_calidad,rol.eq.jefe_servicio,rol.eq.asesor_servicio,rol.eq.asesor_ventas,rol.eq.gerencia)"
            },
            {
              "name": "activo",
              "value": "eq.true"
            },
            {
              "name": "select",
              "value": "id,nombre,email,rol"
            }
          ]
        }
      },
      "id": "get-black-alert-recipients",
      "name": "Get Black Alert Recipients",
      "type": "n8n-nodes-base.httpRequestV3",
      "typeVersion": 4.1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "/*** COMPLAINT BLACK ALERT - SRP: Solo notificación masiva por ley del consumidor ***/\nconst alertData = $('Black Alert Trigger').first().json || {};\nconst recipients = $('Get Black Alert Recipients').first().json || [];\n\nconst complaintData = alertData.complaint_data || {};\nconst tenantId = alertData.tenant_id || alertData.tenant || alertData.concesionario_id;\n\n// Preparar lista de correos única\nconst toList = Array.isArray(recipients) ? recipients.map(r => r.email).filter(Boolean) : [];\nconst uniqueTo = [...new Set(toList)];\n\nconst subject = `ALERTA CRÍTICA (BLACK ALERT) - Reclamo #${complaintData.id_externo || complaintData.id || 'N/A'}`;\nconst html = `<!doctype html><html><body>\n  <h2>⚠️ Black Alert Activada</h2>\n  <p>Acción inmediata requerida para el reclamo <strong>#${complaintData.id_externo || complaintData.id || 'N/A'}</strong>.</p>\n  <ul>\n    <li><strong>Cliente:</strong> ${complaintData.cliente_nombre || 'N/D'}</li>\n    <li><strong>VIN:</strong> ${complaintData.vin || 'N/D'}</li>\n    <li><strong>Sucursal:</strong> ${complaintData.sucursal_nombre || 'N/D'}</li>\n    <li><strong>Detalle:</strong> ${complaintData.detalle || 'N/D'}</li>\n  </ul>\n</body></html>`;\n\nreturn [{ json: { tenant_id: tenantId, complaint_id: complaintData.id || null, email_targets: uniqueTo.map(to => ({ to, subject, html })) } }];"
      },
      "id": "prepare-mass-alert",
      "name": "Prepare Mass Alert",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "fieldToSplitOut": "email_targets",
        "options": {}
      },
      "id": "split-email-targets",
      "name": "Split Email Targets",
      "type": "n8n-nodes-base.itemLists",
      "typeVersion": 3,
      "position": [900, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.N8N_WEBHOOK_URL }}/webhook/send-email",
        "headers": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.N8N_WEBHOOK_AUTH_TOKEN }}"
            }
          ]
        },
        "body": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.to }}"
            },
            {
              "name": "subject",
              "value": "={{ $json.subject }}"
            },
            {
              "name": "html",
              "value": "={{ $json.html }}"
            },
            {
              "name": "priority",
              "value": "urgent"
            },
            {
              "name": "tenant_id",
              "value": "={{ $('Prepare Mass Alert').first().json.tenant_id }}"
            },
            {
              "name": "alert_type",
              "value": "black_alert"
            }
          ]
        }
      },
      "id": "send-black-alert-email",
      "name": "Send Black Alert Email",
      "type": "n8n-nodes-base.httpRequestV3",
      "typeVersion": 4.1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generar resumen de envío de emails\nconst first = $('Prepare Mass Alert').first().json || {};\nconst emailsAttempted = (first.email_targets || []).length;\nconst emailsActuallySent = $input.all().length;\nconst successRate = emailsAttempted ? Math.round((emailsActuallySent / emailsAttempted) * 100) : 0;\nreturn [{ json: { complaint_id: first.complaint_id, email_stats: { successful_sends: emailsActuallySent, total_recipients: emailsAttempted, success_rate: successRate } } }];"
      },
      "id": "generate-alert-report",
      "name": "Generate Alert Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2.1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"message\": \"Black Alert enviado correctamente a todos los stakeholders\",\n  \"alert_data\": {\n    \"complaint_id\": \"{{ $json.complaint_id }}\",\n    \"emails_sent\": {{ $json.email_stats.successful_sends }},\n    \"total_recipients\": {{ $json.email_stats.total_recipients }},\n    \"success_rate\": \"{{ $json.email_stats.success_rate }}%\"\n  },\n  \"legal_urgency\": \"IMMEDIATE_ACTION_REQUIRED\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}"
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 2.1,
      "position": [1560, 300]
    }
  ],
  "connections": {
    "Black Alert Trigger": {
      "main": [
        [
          {
            "node": "Get Black Alert Recipients",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Black Alert Recipients": {
      "main": [
        [
          {
            "node": "Prepare Mass Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Mass Alert": {
      "main": [
        [
          {
            "node": "Split Email Targets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Email Targets": {
      "main": [
        [
          {
            "node": "Send Black Alert Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Black Alert Email": {
      "main": [
        [
          {
            "node": "Generate Alert Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Alert Report": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "srp",
      "name": "srp"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "reclamos",
      "name": "reclamos"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "black_alert",
      "name": "black_alert"
    }
  ],
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "complaint-black-alert",
  "versionId": "1.0.0"
}