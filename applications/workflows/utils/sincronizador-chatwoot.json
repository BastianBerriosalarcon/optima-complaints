{
  "name": "Sincronizador Bidireccional Chatwoot",
  "description": "Workflow que mantiene sincronización bidireccional entre Chatwoot y Óptima-CX para gestión conversacional multitenant, incluyendo leads, reclamos y comunicaciones unificadas.",
  "tags": [
    "chatwoot",
    "sincronizacion", 
    "conversaciones",
    "multitenant",
    "whatsapp",
    "critico"
  ],
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/webhook/chatwoot-sync",
        "options": {
          "responseData": "firstEntryJson"
        }
      },
      "id": "chatwoot-webhook-trigger",
      "name": "Webhook Chatwoot",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Validar y procesar webhook de Chatwoot\nconst inputData = $input.first().json;\n\n// Validar estructura básica del webhook\nif (!inputData.event_type || !inputData.account) {\n  throw new Error('Webhook de Chatwoot inválido: falta event_type o account');\n}\n\n// Extraer phoneNumberId para buscar el tenant en la base de datos\nconst phoneNumberId = inputData.entry?.[0]?.changes?.[0]?.value?.metadata?.phone_number_id;\n\nif (!phoneNumberId) {\n  throw new Error('No se pudo determinar el phone_number_id desde el webhook de Chatwoot');\n}\n\n// Estructura normalizada del evento\nconst processedEvent = {\n  // Información del evento\n  event_type: inputData.event_type,\n  event_id: inputData.id || `chatwoot_${Date.now()}`,\n  timestamp: new Date().toISOString(),\n  \n  // Información para buscar el tenant\n  phone_number_id: phoneNumberId,\n  account_id: inputData.account.id,\n  account_name: inputData.account.name,\n  \n  // Datos del evento (varían según tipo)\n  event_data: {},\n  \n  // Contexto de procesamiento\n  requires_sync: false,\n  sync_direction: 'chatwoot_to_optimacx',\n  priority: 'normal'\n};\n\n// Procesar según tipo de evento\nswitch (inputData.event_type) {\n  case 'conversation_created':\n    processedEvent.event_data = {\n      conversation_id: inputData.conversation.id,\n      display_id: inputData.conversation.display_id,\n      inbox_id: inputData.conversation.inbox_id,\n      contact_id: inputData.conversation.contact.id,\n      contact_phone: inputData.conversation.contact.phone_number,\n      contact_name: inputData.conversation.contact.name,\n      contact_email: inputData.conversation.contact.email,\n      status: inputData.conversation.status,\n      created_at: inputData.conversation.created_at,\n      channel_type: inputData.conversation.channel,\n      assignee_id: inputData.conversation.assignee?.id,\n      labels: inputData.conversation.labels || []\n    };\n    processedEvent.requires_sync = true;\n    processedEvent.priority = 'high';\n    break;\n    \n  case 'message_created':\n    processedEvent.event_data = {\n      message_id: inputData.message.id,\n      conversation_id: inputData.message.conversation_id,\n      content: inputData.message.content,\n      message_type: inputData.message.message_type,\n      created_at: inputData.message.created_at,\n      sender_type: inputData.message.sender?.type,\n      sender_id: inputData.message.sender?.id,\n      contact_phone: inputData.message.sender?.phone_number,\n      attachments: inputData.message.attachments || [],\n      content_type: inputData.message.content_type,\n      source_id: inputData.message.source_id\n    };\n    \n    // Solo sincronizar mensajes entrantes de clientes\n    if (inputData.message.message_type === 'incoming') {\n      processedEvent.requires_sync = true;\n      processedEvent.priority = 'high';\n      \n      // Detectar si es potencial lead o reclamo\n      const content = inputData.message.content?.toLowerCase() || '';\n      if (content.includes('cotiz') || content.includes('precio') || content.includes('comprar')) {\n        processedEvent.event_data.potential_type = 'lead';\n        processedEvent.priority = 'very_high';\n      } else if (content.includes('problema') || content.includes('reclamo') || content.includes('queja')) {\n        processedEvent.event_data.potential_type = 'complaint';\n        processedEvent.priority = 'very_high';\n      }\n    }\n    break;\n    \n  case 'conversation_status_changed':\n    processedEvent.event_data = {\n      conversation_id: inputData.conversation.id,\n      previous_status: inputData.changed_attributes?.status?.[0],\n      new_status: inputData.changed_attributes?.status?.[1],\n      changed_at: inputData.conversation.updated_at,\n      assignee_id: inputData.conversation.assignee?.id\n    };\n    \n    // Sincronizar cambios de estado importantes\n    if (['resolved', 'pending', 'snoozed'].includes(processedEvent.event_data.new_status)) {\n      processedEvent.requires_sync = true;\n    }\n    break;\n    \n  case 'conversation_assigned':\n    processedEvent.event_data = {\n      conversation_id: inputData.conversation.id,\n      previous_assignee_id: inputData.changed_attributes?.assignee_id?.[0],\n      new_assignee_id: inputData.changed_attributes?.assignee_id?.[1],\n      assignee_name: inputData.conversation.assignee?.name,\n      assignee_email: inputData.conversation.assignee?.email,\n      assigned_at: inputData.conversation.updated_at\n    };\n    processedEvent.requires_sync = true;\n    break;\n    \n  case 'contact_created':\n  case 'contact_updated':\n    processedEvent.event_data = {\n      contact_id: inputData.contact.id,\n      name: inputData.contact.name,\n      email: inputData.contact.email,\n      phone_number: inputData.contact.phone_number,\n      custom_attributes: inputData.contact.custom_attributes || {},\n      created_at: inputData.contact.created_at,\n      updated_at: inputData.contact.updated_at\n    };\n    processedEvent.requires_sync = true;\n    break;\n    \n  default:\n    console.log('Tipo de evento no procesado:', inputData.event_type);\n    processedEvent.requires_sync = false;\n}\n\nconsole.log('Evento Chatwoot procesado:', {\n  tenant_id: processedEvent.tenant_id,\n  event_type: processedEvent.event_type,\n  requires_sync: processedEvent.requires_sync,\n  priority: processedEvent.priority\n});\n\nreturn processedEvent;"
      },
      "id": "process-chatwoot-event",
      "name": "Procesar Evento Chatwoot",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [470, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.requires_sync }}",
              "operation": "equal",
              "value2": true
            }
          ]
        }
      },
      "id": "check-requires-sync",
      "name": "¿Requiere Sincronización?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [690, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Obtener configuración de Chatwoot para el tenant por phone_number_id\nSELECT \n  c.id as tenant_id,\n  c.nombre as tenant_name,\n  c.configuracion_chatwoot,\n  c.configuracion_whatsapp,\n  c.activo\nFROM concesionarios c\nWHERE c.configuracion_whatsapp->>'phone_number_id' = $1 AND c.activo = true\nLIMIT 1;",
        "additionalFields": {
          "queryParameters": "=[$json.phone_number_id]"
        }
      },
      "id": "get-tenant-config",
      "name": "Obtener Config Tenant",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [910, 200]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.event_type }}",
              "operation": "equal",
              "value2": "conversation_created"
            }
          ]
        }
      },
      "id": "check-conversation-created",
      "name": "¿Conversación Creada?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1130, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Crear o actualizar contacto en Óptima-CX desde Chatwoot\nINSERT INTO contactos_chatwoot (\n  tenant_id,\n  chatwoot_contact_id,\n  chatwoot_conversation_id,\n  nombre,\n  email,\n  telefono,\n  channel_type,\n  status,\n  assignee_id,\n  labels,\n  created_at,\n  metadata\n) VALUES (\n  $1,\n  $2,\n  $3,\n  $4,\n  $5,\n  $6,\n  $7,\n  $8,\n  $9,\n  $10,\n  $11::timestamp,\n  $12::jsonb\n)\nON CONFLICT (tenant_id, chatwoot_conversation_id) DO UPDATE SET\n  nombre = EXCLUDED.nombre,\n  email = EXCLUDED.email,\n  status = EXCLUDED.status,\n  assignee_id = EXCLUDED.assignee_id,\n  labels = EXCLUDED.labels,\n  updated_at = CURRENT_TIMESTAMP,\n  metadata = EXCLUDED.metadata\nRETURNING *;",
        "additionalFields": {
          "queryParameters": "=[\n  $('Procesar Evento Chatwoot').first().json.tenant_id,\n  $('Procesar Evento Chatwoot').first().json.event_data.contact_id,\n  $('Procesar Evento Chatwoot').first().json.event_data.conversation_id,\n  $('Procesar Evento Chatwoot').first().json.event_data.contact_name || 'Cliente WhatsApp',\n  $('Procesar Evento Chatwoot').first().json.event_data.contact_email,\n  $('Procesar Evento Chatwoot').first().json.event_data.contact_phone,\n  $('Procesar Evento Chatwoot').first().json.event_data.channel_type,\n  $('Procesar Evento Chatwoot').first().json.event_data.status,\n  $('Procesar Evento Chatwoot').first().json.event_data.assignee_id,\n  JSON.stringify($('Procesar Evento Chatwoot').first().json.event_data.labels),\n  $('Procesar Evento Chatwoot').first().json.event_data.created_at,\n  JSON.stringify({\n    account_id: $('Procesar Evento Chatwoot').first().json.account_id,\n    inbox_id: $('Procesar Evento Chatwoot').first().json.event_data.inbox_id\n  })\n]"
        }
      },
      "id": "sync-conversation-created",
      "name": "Sincronizar Conversación",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1350, 120]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.event_type }}",
              "operation": "equal",
              "value2": "message_created"
            }
          ]
        }
      },
      "id": "check-message-created",
      "name": "¿Mensaje Creado?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1130, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Registrar mensaje de Chatwoot y preparar para análisis IA\nINSERT INTO mensajes_chatwoot (\n  tenant_id,\n  chatwoot_message_id,\n  chatwoot_conversation_id,\n  content,\n  message_type,\n  sender_type,\n  contact_phone,\n  created_at,\n  content_type,\n  attachments,\n  potential_type,\n  requires_ai_analysis,\n  metadata\n) VALUES (\n  $1,\n  $2,\n  $3,\n  $4,\n  $5,\n  $6,\n  $7,\n  $8::timestamp,\n  $9,\n  $10::jsonb,\n  $11,\n  $12,\n  $13::jsonb\n)\nON CONFLICT (tenant_id, chatwoot_message_id) DO UPDATE SET\n  content = EXCLUDED.content,\n  potential_type = EXCLUDED.potential_type,\n  updated_at = CURRENT_TIMESTAMP\nRETURNING *;",
        "additionalFields": {
          "queryParameters": "=[\n  $('Procesar Evento Chatwoot').first().json.tenant_id,\n  $('Procesar Evento Chatwoot').first().json.event_data.message_id,\n  $('Procesar Evento Chatwoot').first().json.event_data.conversation_id,\n  $('Procesar Evento Chatwoot').first().json.event_data.content,\n  $('Procesar Evento Chatwoot').first().json.event_data.message_type,\n  $('Procesar Evento Chatwoot').first().json.event_data.sender_type,\n  $('Procesar Evento Chatwoot').first().json.event_data.contact_phone,\n  $('Procesar Evento Chatwoot').first().json.event_data.created_at,\n  $('Procesar Evento Chatwoot').first().json.event_data.content_type,\n  JSON.stringify($('Procesar Evento Chatwoot').first().json.event_data.attachments),\n  $('Procesar Evento Chatwoot').first().json.event_data.potential_type,\n  $('Procesar Evento Chatwoot').first().json.event_data.message_type === 'incoming',\n  JSON.stringify({\n    source_id: $('Procesar Evento Chatwoot').first().json.event_data.source_id,\n    priority: $('Procesar Evento Chatwoot').first().json.priority\n  })\n]"
        }
      },
      "id": "sync-message-created",
      "name": "Sincronizar Mensaje",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1350, 220]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $('Procesar Evento Chatwoot').first().json.event_data.potential_type }}",
              "operation": "equal",
              "value2": "lead"
            }
          ]
        }
      },
      "id": "check-potential-lead",
      "name": "¿Es Potencial Lead?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1570, 160]
    },
    {
      "parameters": {
        "operation": "create",
        "resource": "execution",
        "workflowId": "procesador-whatsapp-leads",
        "data": "={{ JSON.stringify({\n  tenant_id: $('Procesar Evento Chatwoot').first().json.tenant_id,\n  phone_number: $('Procesar Evento Chatwoot').first().json.event_data.contact_phone,\n  message_content: $('Procesar Evento Chatwoot').first().json.event_data.content,\n  contact_name: $('Procesar Evento Chatwoot').first().json.event_data.contact_name || 'Cliente WhatsApp',\n  chatwoot_conversation_id: $('Procesar Evento Chatwoot').first().json.event_data.conversation_id,\n  chatwoot_message_id: $('Procesar Evento Chatwoot').first().json.event_data.message_id,\n  source: 'chatwoot_sync',\n  priority: 'high'\n}) }}"
      },
      "id": "trigger-lead-processing",
      "name": "Activar Procesamiento Lead",
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [1790, 100]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $('Procesar Evento Chatwoot').first().json.event_data.potential_type }}",
              "operation": "equal",
              "value2": "complaint"
            }
          ]
        }
      },
      "id": "check-potential-complaint",
      "name": "¿Es Potencial Reclamo?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1570, 280]
    },
    {
      "parameters": {
        "operation": "create",
        "resource": "execution",
        "workflowId": "procesador-rag-reclamos",
        "data": "={{ JSON.stringify({\n  tenant_id: $('Procesar Evento Chatwoot').first().json.tenant_id,\n  complaint_text: $('Procesar Evento Chatwoot').first().json.event_data.content,\n  contact_phone: $('Procesar Evento Chatwoot').first().json.event_data.contact_phone,\n  contact_name: $('Procesar Evento Chatwoot').first().json.event_data.contact_name || 'Cliente WhatsApp',\n  chatwoot_conversation_id: $('Procesar Evento Chatwoot').first().json.event_data.conversation_id,\n  chatwoot_message_id: $('Procesar Evento Chatwoot').first().json.event_data.message_id,\n  source: 'chatwoot_whatsapp',\n  priority: 'high'\n}) }}"
      },
      "id": "trigger-complaint-processing",
      "name": "Activar Procesamiento Reclamo",
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [1790, 220]
    },
    {
      "parameters": {
        "conditions": {
          "stringArray": [
            {
              "value1": "={{ [$json.event_type] }}",
              "operation": "contains",
              "value2": "conversation_status_changed"
            }
          ]
        }
      },
      "id": "check-status-changed",
      "name": "¿Estado Cambiado?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1130, 450]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Actualizar estado de conversación en sincronización\nUPDATE contactos_chatwoot \nSET \n  status = $3,\n  assignee_id = $4,\n  updated_at = CURRENT_TIMESTAMP,\n  metadata = jsonb_set(\n    COALESCE(metadata, '{}'),\n    '{status_changes}',\n    COALESCE(metadata->'status_changes', '[]'::jsonb) || jsonb_build_array(\n      jsonb_build_object(\n        'from', $5,\n        'to', $3,\n        'changed_at', $6\n      )\n    )\n  )\nWHERE \n  tenant_id = $1 \n  AND chatwoot_conversation_id = $2\nRETURNING *;",
        "additionalFields": {
          "queryParameters": "=[\n  $('Procesar Evento Chatwoot').first().json.tenant_id,\n  $('Procesar Evento Chatwoot').first().json.event_data.conversation_id,\n  $('Procesar Evento Chatwoot').first().json.event_data.new_status,\n  $('Procesar Evento Chatwoot').first().json.event_data.assignee_id,\n  $('Procesar Evento Chatwoot').first().json.event_data.previous_status,\n  $('Procesar Evento Chatwoot').first().json.event_data.changed_at\n]"
        }
      },
      "id": "sync-status-change",
      "name": "Sincronizar Cambio Estado",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1350, 390]
    },
    {
      "parameters": {
        "jsCode": "// Preparar sincronización desde Óptima-CX hacia Chatwoot\nconst eventData = $('Procesar Evento Chatwoot').first().json;\nconst tenantConfig = $('Obtener Config Tenant').first().json;\n\n// Verificar si hay configuración de Chatwoot\nif (!tenantConfig.configuracion_chatwoot) {\n  console.log('No hay configuración de Chatwoot para el tenant:', eventData.tenant_id);\n  return null;\n}\n\nconst chatwootConfig = JSON.parse(tenantConfig.configuracion_chatwoot);\n\n// Preparar datos para sincronización inversa (si es necesaria)\nconst syncData = {\n  tenant_id: eventData.tenant_id,\n  chatwoot_base_url: chatwootConfig.base_url,\n  chatwoot_api_token: chatwootConfig.api_token,\n  account_id: eventData.account_id,\n  event_processed: eventData.event_type,\n  sync_direction: 'optimacx_to_chatwoot',\n  \n  // Acciones de sincronización que podríamos necesitar hacer\n  pending_actions: [],\n  \n  // Metadata del procesamiento\n  processing_completed: true,\n  sync_timestamp: new Date().toISOString()\n};\n\n// Determinar si necesitamos sincronizar algo de vuelta a Chatwoot\n// Por ejemplo, actualizar etiquetas, asignar conversaciones, etc.\nif (eventData.event_type === 'message_created' && eventData.event_data.potential_type) {\n  syncData.pending_actions.push({\n    action: 'add_label',\n    conversation_id: eventData.event_data.conversation_id,\n    label: eventData.event_data.potential_type === 'lead' ? 'lead-detectado' : 'reclamo-detectado'\n  });\n}\n\nconsole.log('Sincronización preparada:', {\n  tenant_id: syncData.tenant_id,\n  event_processed: syncData.event_processed,\n  pending_actions: syncData.pending_actions.length\n});\n\nreturn syncData;"
      },
      "id": "prepare-reverse-sync",
      "name": "Preparar Sincronización Inversa",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2010, 200]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.pending_actions ? $json.pending_actions.length : 0 }}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "id": "check-has-reverse-actions",
      "name": "¿Hay Acciones Inversas?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2230, 200]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "requestMethod": "POST",
        "url": "={{ $json.chatwoot_base_url }}/api/v1/accounts/{{ $json.account_id }}/conversations/{{ $json.pending_actions[0].conversation_id }}/labels",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.chatwoot_api_token }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"labels\": [\"{{ $json.pending_actions[0].label }}\"]\n}",
        "options": {
          "timeout": 15000,
          "retry": {
            "enabled": true,
            "maxRetries": 2
          }
        }
      },
      "id": "execute-chatwoot-labeling",
      "name": "Ejecutar Etiquetado Chatwoot",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2450, 140]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Registrar evento de sincronización para auditoría\nINSERT INTO eventos_sincronizacion (\n  tenant_id,\n  evento_tipo,\n  direccion_sync,\n  chatwoot_conversation_id,\n  chatwoot_message_id,\n  estado_procesamiento,\n  acciones_ejecutadas,\n  metadata,\n  created_at\n) VALUES (\n  $1,\n  $2,\n  $3,\n  $4,\n  $5,\n  'completado',\n  $6::jsonb,\n  $7::jsonb,\n  CURRENT_TIMESTAMP\n) RETURNING *;",
        "additionalFields": {
          "queryParameters": "=[\n  $('Procesar Evento Chatwoot').first().json.tenant_id,\n  $('Procesar Evento Chatwoot').first().json.event_type,\n  'bidireccional',\n  $('Procesar Evento Chatwoot').first().json.event_data.conversation_id || null,\n  $('Procesar Evento Chatwoot').first().json.event_data.message_id || null,\n  JSON.stringify($json.pending_actions || []),\n  JSON.stringify({\n    event_id: $('Procesar Evento Chatwoot').first().json.event_id,\n    priority: $('Procesar Evento Chatwoot').first().json.priority,\n    sync_timestamp: $json.sync_timestamp,\n    processing_completed: $json.processing_completed\n  })\n]"
        }
      },
      "id": "log-sync-event",
      "name": "Registrar Evento Sincronización",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [2670, 200]  
    },
    {
      "parameters": {
        "respondWithOptions": "responseData",
        "responseData": "={\n  \"success\": true,\n  \"message\": \"Evento Chatwoot sincronizado correctamente\",\n  \"tenant_id\": \"{{ $('Procesar Evento Chatwoot').first().json.tenant_id }}\",\n  \"event_type\": \"{{ $('Procesar Evento Chatwoot').first().json.event_type }}\",\n  \"event_id\": \"{{ $('Procesar Evento Chatwoot').first().json.event_id }}\",\n  \"sync_direction\": \"bidireccional\",\n  \"actions_executed\": {{ JSON.stringify($('Preparar Sincronización Inversa').first().json.pending_actions || []) }},\n  \"processing_completed\": true,\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}"
      },
      "id": "respond-sync-complete",
      "name": "Respuesta Sincronización",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2890, 200]
    },
    {
      "parameters": {
        "respondWithOptions": "responseData",
        "responseData": "={\n  \"success\": true,\n  \"message\": \"Evento Chatwoot recibido pero no requiere sincronización\",\n  \"event_type\": \"{{ $json.event_type }}\",\n  \"tenant_id\": \"{{ $json.tenant_id }}\",\n  \"requires_sync\": false,\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}"
      },
      "id": "respond-no-sync-needed",
      "name": "Respuesta Sin Sincronización",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [910, 450]
    }
  ],
  "connections": {
    "Webhook Chatwoot": {
      "main": [["Procesar Evento Chatwoot", "type": "main", "index": 0]]
    },
    "Procesar Evento Chatwoot": {
      "main": [["¿Requiere Sincronización?", "type": "main", "index": 0]]
    },
    "¿Requiere Sincronización?": {
      "main": [
        [{"node": "Obtener Config Tenant", "type": "main", "index": 0}],
        [{"node": "Respuesta Sin Sincronización", "type": "main", "index": 0}]
      ]
    },
    "Obtener Config Tenant": {
      "main": [
        [{"node": "¿Conversación Creada?", "type": "main", "index": 0}],
        [{"node": "¿Mensaje Creado?", "type": "main", "index": 0}],
        [{"node": "¿Estado Cambiado?", "type": "main", "index": 0}]
      ]
    },
    "¿Conversación Creada?": {
      "main": [
        [{"node": "Sincronizar Conversación", "type": "main", "index": 0}],
        []
      ]
    },
    "¿Mensaje Creado?": {
      "main": [
        [{"node": "Sincronizar Mensaje", "type": "main", "index": 0}],
        []
      ]
    },
    "Sincronizar Conversación": {
      "main": [["Preparar Sincronización Inversa", "type": "main", "index": 0]]
    },
    "Sincronizar Mensaje": {
      "main": [
        [{"node": "¿Es Potencial Lead?", "type": "main", "index": 0}],
        [{"node": "¿Es Potencial Reclamo?", "type": "main", "index": 0}],
        [{"node": "Preparar Sincronización Inversa", "type": "main", "index": 0}]
      ]
    },
    "¿Es Potencial Lead?": {
      "main": [
        [{"node": "Activar Procesamiento Lead", "type": "main", "index": 0}],
        []
      ]
    },
    "¿Es Potencial Reclamo?": {
      "main": [
        [{"node": "Activar Procesamiento Reclamo", "type": "main", "index": 0}],
        []
      ]
    },
    "Activar Procesamiento Lead": {
      "main": [["Preparar Sincronización Inversa", "type": "main", "index": 0]]
    },
    "Activar Procesamiento Reclamo": {
      "main": [["Preparar Sincronización Inversa", "type": "main", "index": 0]]
    },
    "¿Estado Cambiado?": {
      "main": [
        [{"node": "Sincronizar Cambio Estado", "type": "main", "index": 0}],
        [{"node": "Preparar Sincronización Inversa", "type": "main", "index": 0}]
      ]
    },
    "Sincronizar Cambio Estado": {
      "main": [["Preparar Sincronización Inversa", "type": "main", "index": 0]]
    },
    "Preparar Sincronización Inversa": {
      "main": [["¿Hay Acciones Inversas?", "type": "main", "index": 0]]
    },
    "¿Hay Acciones Inversas?": {
      "main": [
        [{"node": "Ejecutar Etiquetado Chatwoot", "type": "main", "index": 0}],
        [{"node": "Registrar Evento Sincronización", "type": "main", "index": 0}]
      ]
    },
    "Ejecutar Etiquetado Chatwoot": {
      "main": [["Registrar Evento Sincronización", "type": "main", "index": 0]]
    },
    "Registrar Evento Sincronización": {
      "main": [["Respuesta Sincronización", "type": "main", "index": 0]]
    }
  },
  "settings": {
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "manejador-errores"
  },
  "staticData": {},
  "variables": {
    "SYNC_VERSION": "1.0.0",
    "WEBHOOK_PATH": "/webhook/chatwoot-sync",
    "SUPPORTED_EVENTS": ["conversation_created", "message_created", "conversation_status_changed", "conversation_assigned", "contact_created", "contact_updated"],
    "LEAD_KEYWORDS": ["cotiz", "precio", "comprar", "vehiculo", "auto"],
    "COMPLAINT_KEYWORDS": ["problema", "reclamo", "queja", "malo", "error"],
    "AUTO_LABEL_LEADS": true,
    "AUTO_LABEL_COMPLAINTS": true
  }
}