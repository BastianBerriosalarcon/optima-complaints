{
  "name": "Portal de Super-Admin para Gestión de Tenants",
  "description": "Workflow que proporciona un portal completo de administración para Super-Admin, incluyendo onboarding automatizado de concesionarios, monitoreo en tiempo real y gestión centralizada de la plataforma multitenant.",
  "tags": [
    "super-admin",
    "gestion-tenants", 
    "onboarding",
    "multitenant",
    "escalabilidad",
    "critico"
  ],
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/webhook/super-admin-portal",
        "options": {
          "responseData": "firstEntryJson"
        }
      },
      "id": "portal-webhook-trigger",
      "name": "Webhook Portal Admin",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Procesar solicitudes del portal de Super-Admin\nconst inputData = $input.first().json;\n\n// Validar autenticación de Super-Admin\nif (!inputData.super_admin_token || !inputData.action) {\n  throw new Error('Token de Super-Admin requerido y acción no especificada');\n}\n\n// Validar token (en producción, verificar contra base de datos)\nconst validTokens = ['super_admin_2024_secure_token'];\nif (!validTokens.includes(inputData.super_admin_token)) {\n  throw new Error('Token de Super-Admin inválido');\n}\n\n// Estructura normalizada de la solicitud\nconst adminRequest = {\n  // Información de la acción\n  action: inputData.action,\n  action_id: `admin_${Date.now()}`,\n  timestamp: new Date().toISOString(),\n  \n  // Información del administrador\n  admin_user: inputData.admin_user || 'super-admin',\n  admin_ip: inputData.admin_ip,\n  \n  // Datos específicos de la acción\n  action_data: inputData.data || {},\n  \n  // Configuración de procesamiento\n  requires_approval: false,\n  priority: 'high',\n  \n  // Metadata\n  source_system: 'super_admin_portal',\n  processing_started: new Date().toISOString()\n};\n\n// Procesar según tipo de acción\nswitch (inputData.action) {\n  case 'create_tenant':\n    adminRequest.action_data = {\n      tenant_name: inputData.data.tenant_name,\n      tenant_id: inputData.data.tenant_id || inputData.data.tenant_name.toLowerCase().replace(/[^a-z0-9]/g, '_'),\n      contact_email: inputData.data.contact_email,\n      contact_phone: inputData.data.contact_phone,\n      business_name: inputData.data.business_name,\n      rut: inputData.data.rut,\n      address: inputData.data.address,\n      city: inputData.data.city,\n      region: inputData.data.region,\n      \n      // Configuración inicial\n      initial_users: inputData.data.initial_users || 5,\n      plan_type: inputData.data.plan_type || 'standard',\n      features_enabled: inputData.data.features_enabled || ['leads', 'surveys', 'complaints'],\n      \n      // Configuraciones técnicas\n      subdomain: inputData.data.subdomain || adminRequest.action_data.tenant_id,\n      database_config: inputData.data.database_config || {},\n      integrations_config: inputData.data.integrations_config || {}\n    };\n    adminRequest.priority = 'very_high';\n    break;\n    \n  case 'get_tenant_dashboard':\n    adminRequest.action_data = {\n      tenant_id: inputData.data.tenant_id,\n      metrics_period: inputData.data.metrics_period || '30d',\n      include_details: inputData.data.include_details || true\n    };\n    break;\n    \n  case 'update_tenant_config':\n    adminRequest.action_data = {\n      tenant_id: inputData.data.tenant_id,\n      config_updates: inputData.data.config_updates,\n      update_reason: inputData.data.update_reason || 'Admin update'\n    };\n    adminRequest.requires_approval = inputData.data.requires_approval || false;\n    break;\n    \n  case 'suspend_tenant':\n  case 'activate_tenant':\n    adminRequest.action_data = {\n      tenant_id: inputData.data.tenant_id,\n      reason: inputData.data.reason,\n      effective_date: inputData.data.effective_date || new Date().toISOString(),\n      notify_users: inputData.data.notify_users !== false\n    };\n    adminRequest.requires_approval = true;\n    adminRequest.priority = 'very_high';\n    break;\n    \n  case 'get_platform_metrics':\n    adminRequest.action_data = {\n      metrics_type: inputData.data.metrics_type || 'overview',\n      period: inputData.data.period || '7d',\n      include_tenants: inputData.data.include_tenants || true,\n      include_performance: inputData.data.include_performance || true\n    };\n    break;\n    \n  case 'bulk_tenant_operation':\n    adminRequest.action_data = {\n      operation_type: inputData.data.operation_type,\n      tenant_ids: inputData.data.tenant_ids || [],\n      operation_config: inputData.data.operation_config || {},\n      batch_size: inputData.data.batch_size || 5\n    };\n    adminRequest.requires_approval = true;\n    break;\n    \n  default:\n    throw new Error(`Acción no soportada: ${inputData.action}`);\n}\n\nconsole.log('Solicitud de Super-Admin procesada:', {\n  action: adminRequest.action,\n  action_id: adminRequest.action_id,\n  priority: adminRequest.priority,\n  requires_approval: adminRequest.requires_approval\n});\n\nreturn adminRequest;"
      },
      "id": "process-admin-request",
      "name": "Procesar Solicitud Admin",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [470, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.action }}",
              "operation": "equal",
              "value2": "create_tenant"
            }
          ]
        }
      },
      "id": "check-create-tenant",
      "name": "¿Crear Tenant?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [690, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Verificar si el tenant ya existe\nSELECT \n  id,\n  nombre,\n  activo,\n  created_at\nFROM concesionarios \nWHERE \n  id = $1 \n  OR LOWER(nombre) = LOWER($2)\nLIMIT 1;",
        "additionalFields": {
          "queryParameters": "=[$json.action_data.tenant_id, $json.action_data.tenant_name]"
        }
      },
      "id": "check-tenant-exists",
      "name": "Verificar Tenant Existente",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [910, 120]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $('Verificar Tenant Existente').all().length }}",
              "operation": "equal",
              "value2": 0
            }
          ]
        }
      },
      "id": "check-tenant-unique",
      "name": "¿Tenant Único?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1130, 120]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Crear nuevo concesionario con configuración completa\nINSERT INTO concesionarios (\n  id,\n  nombre,\n  rut,\n  direccion,\n  ciudad,\n  region,\n  telefono,\n  email_contacto,\n  \n  -- Configuración técnica\n  subdomain,\n  plan_tipo,\n  features_habilitadas,\n  limite_usuarios,\n  \n  -- Configuraciones de integración (JSON)\n  configuracion_whatsapp,\n  configuracion_chatwoot,\n  configuracion_email,\n  configuracion_ia,\n  \n  -- Estado y metadata\n  activo,\n  fecha_activacion,\n  metadata_admin,\n  created_at,\n  created_by\n) VALUES (\n  $1,  -- id\n  $2,  -- nombre\n  $3,  -- rut\n  $4,  -- direccion\n  $5,  -- ciudad\n  $6,  -- region\n  $7,  -- telefono\n  $8,  -- email_contacto\n  $9,  -- subdomain\n  $10, -- plan_tipo\n  $11, -- features_habilitadas\n  $12, -- limite_usuarios\n  '{}', -- configuracion_whatsapp (vacía inicialmente)\n  '{}', -- configuracion_chatwoot (vacía inicialmente)\n  '{}', -- configuracion_email (vacía inicialmente)\n  '{}', -- configuracion_ia (vacía inicialmente)\n  true, -- activo\n  CURRENT_TIMESTAMP, -- fecha_activacion\n  $13::jsonb, -- metadata_admin\n  CURRENT_TIMESTAMP, -- created_at\n  $14  -- created_by\n) RETURNING *;",
        "additionalFields": {
          "queryParameters": "=[\n  $('Procesar Solicitud Admin').first().json.action_data.tenant_id,\n  $('Procesar Solicitud Admin').first().json.action_data.business_name,\n  $('Procesar Solicitud Admin').first().json.action_data.rut,\n  $('Procesar Solicitud Admin').first().json.action_data.address,\n  $('Procesar Solicitud Admin').first().json.action_data.city,\n  $('Procesar Solicitud Admin').first().json.action_data.region,\n  $('Procesar Solicitud Admin').first().json.action_data.contact_phone,\n  $('Procesar Solicitud Admin').first().json.action_data.contact_email,\n  $('Procesar Solicitud Admin').first().json.action_data.subdomain,\n  $('Procesar Solicitud Admin').first().json.action_data.plan_type,\n  JSON.stringify($('Procesar Solicitud Admin').first().json.action_data.features_enabled),\n  $('Procesar Solicitud Admin').first().json.action_data.initial_users,\n  JSON.stringify({\n    created_by_admin: $('Procesar Solicitud Admin').first().json.admin_user,\n    created_via: 'super_admin_portal',\n    creation_timestamp: $('Procesar Solicitud Admin').first().json.timestamp,\n    initial_config: $('Procesar Solicitud Admin').first().json.action_data\n  }),\n  $('Procesar Solicitud Admin').first().json.admin_user\n]"
        }
      },
      "id": "create-new-tenant",
      "name": "Crear Nuevo Tenant",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1350, 60]
    },
    {
      "parameters": {
        "operation": "create",
        "resource": "execution",
        "workflowId": "provision-workflows-automatica",
        "data": "={{ JSON.stringify({\n  tenant_id: $('Crear Nuevo Tenant').first().json.id,\n  tenant_name: $('Crear Nuevo Tenant').first().json.nombre,\n  features_enabled: JSON.parse($('Crear Nuevo Tenant').first().json.features_habilitadas || '[]'),\n  admin_email: $('Crear Nuevo Tenant').first().json.email_contacto,\n  provisioning_source: 'super_admin_portal',\n  priority: 'very_high'\n}) }}"
      },
      "id": "trigger-workflow-provisioning",
      "name": "Activar Provisión Workflows",
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [1570, 60]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.action }}",
              "operation": "equal",
              "value2": "get_platform_metrics"
            }
          ]
        }
      },
      "id": "check-platform-metrics",
      "name": "¿Métricas Plataforma?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [690, 400]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Obtener métricas comprehensivas de la plataforma\nWITH tenant_stats AS (\n  SELECT \n    COUNT(*) as total_tenants,\n    COUNT(*) FILTER (WHERE activo = true) as active_tenants,\n    COUNT(*) FILTER (WHERE created_at >= CURRENT_DATE - INTERVAL '30 days') as new_tenants_30d,\n    COUNT(*) FILTER (WHERE created_at >= CURRENT_DATE - INTERVAL '7 days') as new_tenants_7d\n  FROM concesionarios\n),\nuser_stats AS (\n  SELECT \n    COUNT(*) as total_users,\n    COUNT(*) FILTER (WHERE activo = true) as active_users,\n    COUNT(DISTINCT concesionario_id) as tenants_with_users\n  FROM usuarios\n),\nlead_stats AS (\n  SELECT \n    COUNT(*) as total_leads,\n    COUNT(*) FILTER (WHERE fecha_creacion >= CURRENT_DATE - INTERVAL '7 days') as leads_7d,\n    COUNT(*) FILTER (WHERE estado = 'vendido') as converted_leads,\n    ROUND(AVG(score_calidad), 2) as avg_lead_score\n  FROM leads\n  WHERE fecha_creacion >= CURRENT_DATE - INTERVAL '30 days'\n),\nsurvey_stats AS (\n  SELECT \n    COUNT(*) as total_surveys,\n    COUNT(*) FILTER (WHERE fecha_respuesta >= CURRENT_DATE - INTERVAL '7 days') as surveys_7d,\n    ROUND(AVG(recomendacion), 2) as avg_nps,\n    COUNT(*) FILTER (WHERE recomendacion >= 9) as promoters,\n    COUNT(*) FILTER (WHERE recomendacion <= 6) as detractors\n  FROM encuestas_postventa\n  WHERE fecha_respuesta IS NOT NULL\n    AND fecha_respuesta >= CURRENT_DATE - INTERVAL '30 days'\n),\ncomplaint_stats AS (\n  SELECT \n    COUNT(*) as total_complaints,\n    COUNT(*) FILTER (WHERE fecha_creacion >= CURRENT_DATE - INTERVAL '7 days') as complaints_7d,\n    COUNT(*) FILTER (WHERE estado = 'cerrado') as resolved_complaints,\n    COUNT(*) FILTER (WHERE black_alert = true) as black_alerts\n  FROM reclamos\n  WHERE fecha_creacion >= CURRENT_DATE - INTERVAL '30 days'\n)\nSELECT \n  -- Estadísticas de tenants\n  ts.total_tenants,\n  ts.active_tenants,\n  ts.new_tenants_30d,\n  ts.new_tenants_7d,\n  ROUND((ts.active_tenants::decimal / NULLIF(ts.total_tenants, 0)) * 100, 2) as tenant_activation_rate,\n  \n  -- Estadísticas de usuarios\n  us.total_users,\n  us.active_users,\n  us.tenants_with_users,\n  ROUND(us.total_users::decimal / NULLIF(ts.active_tenants, 0), 2) as avg_users_per_tenant,\n  \n  -- Estadísticas de leads\n  ls.total_leads,\n  ls.leads_7d,\n  ls.converted_leads,\n  ls.avg_lead_score,\n  ROUND((ls.converted_leads::decimal / NULLIF(ls.total_leads, 0)) * 100, 2) as lead_conversion_rate,\n  \n  -- Estadísticas de encuestas\n  ss.total_surveys,\n  ss.surveys_7d,\n  ss.avg_nps,\n  ss.promoters,\n  ss.detractors,\n  ROUND(((ss.promoters - ss.detractors)::decimal / NULLIF(ss.total_surveys, 0)) * 100, 2) as nps_score,\n  \n  -- Estadísticas de reclamos\n  cs.total_complaints,\n  cs.complaints_7d,\n  cs.resolved_complaints,\n  cs.black_alerts,\n  ROUND((cs.resolved_complaints::decimal / NULLIF(cs.total_complaints, 0)) * 100, 2) as complaint_resolution_rate,\n  \n  -- Metadata\n  CURRENT_TIMESTAMP as generated_at,\n  '{{ $json.action_data.period }}' as metrics_period\n  \nFROM tenant_stats ts\nCROSS JOIN user_stats us\nCROSS JOIN lead_stats ls\nCROSS JOIN survey_stats ss\nCROSS JOIN complaint_stats cs;",
        "additionalFields": {}
      },
      "id": "get-platform-metrics",
      "name": "Obtener Métricas Plataforma",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [910, 340]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.action }}",
              "operation": "equal",
              "value2": "get_tenant_dashboard"
            }
          ]
        }
      },
      "id": "check-tenant-dashboard",
      "name": "¿Dashboard Tenant?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [690, 600]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Obtener dashboard completo de un tenant específico\nWITH tenant_info AS (\n  SELECT \n    id,\n    nombre,\n    activo,\n    plan_tipo,\n    limite_usuarios,\n    features_habilitadas,\n    fecha_activacion,\n    created_at\n  FROM concesionarios \n  WHERE id = $1\n),\ntenant_users AS (\n  SELECT \n    COUNT(*) as total_users,\n    COUNT(*) FILTER (WHERE activo = true) as active_users,\n    COUNT(*) FILTER (WHERE ultimo_acceso >= CURRENT_DATE - INTERVAL '7 days') as recent_active_users\n  FROM usuarios \n  WHERE concesionario_id = $1\n),\ntenant_leads AS (\n  SELECT \n    COUNT(*) as total_leads,\n    COUNT(*) FILTER (WHERE fecha_creacion >= CURRENT_DATE - INTERVAL '7 days') as leads_7d,\n    COUNT(*) FILTER (WHERE estado = 'vendido') as converted_leads,\n    ROUND(AVG(score_calidad), 2) as avg_lead_score,\n    SUM(monto_cotizacion) FILTER (WHERE monto_cotizacion > 0) as total_quoted_value\n  FROM leads \n  WHERE concesionario_id = $1\n    AND fecha_creacion >= CURRENT_DATE - INTERVAL '30 days'\n),\ntenant_surveys AS (\n  SELECT \n    COUNT(*) as total_surveys,\n    COUNT(*) FILTER (WHERE fecha_respuesta >= CURRENT_DATE - INTERVAL '7 days') as surveys_7d,\n    ROUND(AVG(recomendacion), 2) as avg_nps,\n    ROUND(AVG(satisfaccion), 2) as avg_satisfaction,\n    COUNT(*) FILTER (WHERE recomendacion <= 6) as detractors_count\n  FROM encuestas_postventa \n  WHERE concesionario_id = $1\n    AND fecha_respuesta IS NOT NULL\n    AND fecha_respuesta >= CURRENT_DATE - INTERVAL '30 days'\n),\ntenant_complaints AS (\n  SELECT \n    COUNT(*) as total_complaints,\n    COUNT(*) FILTER (WHERE fecha_creacion >= CURRENT_DATE - INTERVAL '7 days') as complaints_7d,\n    COUNT(*) FILTER (WHERE estado = 'cerrado') as resolved_complaints,\n    COUNT(*) FILTER (WHERE black_alert = true) as black_alerts,\n    ROUND(AVG(EXTRACT(EPOCH FROM (COALESCE(fecha_actualizacion, CURRENT_TIMESTAMP) - fecha_creacion))/3600), 2) as avg_resolution_hours\n  FROM reclamos \n  WHERE concesionario_id = $1\n    AND fecha_creacion >= CURRENT_DATE - INTERVAL '30 days'\n)\nSELECT \n  -- Información del tenant\n  ti.id as tenant_id,\n  ti.nombre as tenant_name,\n  ti.activo as is_active,\n  ti.plan_tipo as plan_type,\n  ti.limite_usuarios as user_limit,\n  ti.features_habilitadas as enabled_features,\n  ti.fecha_activacion as activation_date,\n  ti.created_at as creation_date,\n  \n  -- Estadísticas de usuarios\n  tu.total_users,\n  tu.active_users,\n  tu.recent_active_users,\n  ROUND((tu.active_users::decimal / NULLIF(ti.limite_usuarios, 0)) * 100, 2) as user_capacity_usage,\n  \n  -- Estadísticas de leads\n  tl.total_leads,\n  tl.leads_7d,\n  tl.converted_leads,\n  tl.avg_lead_score,\n  tl.total_quoted_value,\n  ROUND((tl.converted_leads::decimal / NULLIF(tl.total_leads, 0)) * 100, 2) as conversion_rate,\n  \n  -- Estadísticas de encuestas\n  ts.total_surveys,\n  ts.surveys_7d,\n  ts.avg_nps,\n  ts.avg_satisfaction,\n  ts.detractors_count,\n  \n  -- Estadísticas de reclamos\n  tc.total_complaints,\n  tc.complaints_7d,\n  tc.resolved_complaints,\n  tc.black_alerts,\n  tc.avg_resolution_hours,\n  ROUND((tc.resolved_complaints::decimal / NULLIF(tc.total_complaints, 0)) * 100, 2) as complaint_resolution_rate,\n  \n  -- Scoring de salud del tenant (0-100)\n  LEAST(100, GREATEST(0, \n    COALESCE(tu.active_users * 20, 0) + \n    COALESCE(LEAST(30, tl.avg_lead_score * 3), 0) +\n    COALESCE(LEAST(25, ts.avg_nps * 2.5), 0) +\n    COALESCE(LEAST(25, tc.complaint_resolution_rate * 0.25), 0)\n  )) as tenant_health_score,\n  \n  -- Metadata\n  CURRENT_TIMESTAMP as dashboard_generated_at,\n  '{{ $json.action_data.metrics_period }}' as metrics_period\n  \nFROM tenant_info ti\nCROSS JOIN tenant_users tu\nCROSS JOIN tenant_leads tl\nCROSS JOIN tenant_surveys ts\nCROSS JOIN tenant_complaints tc;",
        "additionalFields": {
          "queryParameters": "=[$json.action_data.tenant_id]"
        }
      },
      "id": "get-tenant-dashboard",
      "name": "Obtener Dashboard Tenant",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [910, 540]
    },
    {
      "parameters": {
        "jsCode": "// Generar respuesta consolidada basada en la acción ejecutada\nconst adminRequest = $('Procesar Solicitud Admin').first().json;\nlet responseData = {\n  success: true,\n  action: adminRequest.action,\n  action_id: adminRequest.action_id,\n  admin_user: adminRequest.admin_user,\n  timestamp: new Date().toISOString(),\n  data: {}\n};\n\n// Procesar respuesta según el tipo de acción\nswitch (adminRequest.action) {\n  case 'create_tenant':\n    const newTenant = $('Crear Nuevo Tenant').first()?.json;\n    if (newTenant) {\n      responseData.data = {\n        tenant_created: true,\n        tenant_id: newTenant.id,\n        tenant_name: newTenant.nombre,\n        activation_date: newTenant.fecha_activacion,\n        workflows_provisioning_triggered: true,\n        next_steps: [\n          'Configurar integraciones WhatsApp Business API',\n          'Configurar SMTP para envío de emails',\n          'Crear usuarios administrativos iniciales',\n          'Configurar parámetros de IA (Gemini + Cohere)',\n          'Realizar testing de workflows provisión automática'\n        ],\n        admin_portal_url: `https://admin.optimacx.com/tenants/${newTenant.id}`,\n        tenant_url: `https://${newTenant.subdomain}.optimacx.com`\n      };\n    } else {\n      // Tenant ya existía\n      const existingTenant = $('Verificar Tenant Existente').first()?.json;\n      responseData.success = false;\n      responseData.error = 'TENANT_ALREADY_EXISTS';\n      responseData.data = {\n        existing_tenant: {\n          id: existingTenant.id,\n          name: existingTenant.nombre,\n          active: existingTenant.activo,\n          created_at: existingTenant.created_at\n        },\n        message: 'El tenant ya existe en el sistema. Use update_tenant_config para modificar configuración.'\n      };\n    }\n    break;\n    \n  case 'get_platform_metrics':\n    const platformMetrics = $('Obtener Métricas Plataforma').first()?.json;\n    if (platformMetrics) {\n      responseData.data = {\n        platform_overview: {\n          total_tenants: platformMetrics.total_tenants,\n          active_tenants: platformMetrics.active_tenants,\n          tenant_activation_rate: `${platformMetrics.tenant_activation_rate}%`,\n          new_tenants_7d: platformMetrics.new_tenants_7d\n        },\n        user_metrics: {\n          total_users: platformMetrics.total_users,\n          active_users: platformMetrics.active_users,\n          avg_users_per_tenant: platformMetrics.avg_users_per_tenant\n        },\n        business_metrics: {\n          total_leads: platformMetrics.total_leads,\n          lead_conversion_rate: `${platformMetrics.lead_conversion_rate}%`,\n          avg_lead_score: platformMetrics.avg_lead_score,\n          nps_score: platformMetrics.nps_score,\n          complaint_resolution_rate: `${platformMetrics.complaint_resolution_rate}%`,\n          black_alerts: platformMetrics.black_alerts\n        },\n        growth_trends: {\n          leads_7d: platformMetrics.leads_7d,\n          surveys_7d: platformMetrics.surveys_7d,\n          complaints_7d: platformMetrics.complaints_7d\n        },\n        platform_health: {\n          overall_score: Math.round(\n            (platformMetrics.tenant_activation_rate + \n             platformMetrics.lead_conversion_rate + \n             platformMetrics.complaint_resolution_rate + \n             (platformMetrics.nps_score > 0 ? platformMetrics.nps_score : 0)) / 4\n          ),\n          status: platformMetrics.active_tenants > 0 && platformMetrics.nps_score > 30 ? 'HEALTHY' : 'NEEDS_ATTENTION'\n        },\n        generated_at: platformMetrics.generated_at\n      };\n    }\n    break;\n    \n  case 'get_tenant_dashboard':\n    const tenantDashboard = $('Obtener Dashboard Tenant').first()?.json;\n    if (tenantDashboard) {\n      responseData.data = {\n        tenant_info: {\n          tenant_id: tenantDashboard.tenant_id,\n          tenant_name: tenantDashboard.tenant_name,\n          is_active: tenantDashboard.is_active,\n          plan_type: tenantDashboard.plan_type,\n          health_score: tenantDashboard.tenant_health_score,\n          activation_date: tenantDashboard.activation_date\n        },\n        user_analytics: {\n          total_users: tenantDashboard.total_users,\n          active_users: tenantDashboard.active_users,\n          recent_active_users: tenantDashboard.recent_active_users,\n          capacity_usage: `${tenantDashboard.user_capacity_usage}%`\n        },\n        business_performance: {\n          leads: {\n            total: tenantDashboard.total_leads,\n            this_week: tenantDashboard.leads_7d,\n            conversion_rate: `${tenantDashboard.conversion_rate}%`,\n            avg_score: tenantDashboard.avg_lead_score,\n            quoted_value: tenantDashboard.total_quoted_value\n          },\n          surveys: {\n            total: tenantDashboard.total_surveys,\n            this_week: tenantDashboard.surveys_7d,\n            nps: tenantDashboard.avg_nps,\n            satisfaction: tenantDashboard.avg_satisfaction,\n            detractors: tenantDashboard.detractors_count\n          },\n          complaints: {\n            total: tenantDashboard.total_complaints,\n            this_week: tenantDashboard.complaints_7d,\n            resolution_rate: `${tenantDashboard.complaint_resolution_rate}%`,\n            black_alerts: tenantDashboard.black_alerts,\n            avg_resolution_hours: tenantDashboard.avg_resolution_hours\n          }\n        },\n        recommendations: [],\n        generated_at: tenantDashboard.dashboard_generated_at\n      };\n      \n      // Generar recomendaciones basadas en métricas\n      if (tenantDashboard.tenant_health_score < 60) {\n        responseData.data.recommendations.push('Salud del tenant crítica - revisar configuraciones y métricas');\n      }\n      if (tenantDashboard.conversion_rate < 15) {\n        responseData.data.recommendations.push('Tasa de conversión baja - optimizar proceso de leads');\n      }\n      if (tenantDashboard.avg_nps < 7) {\n        responseData.data.recommendations.push('NPS bajo - mejorar experiencia post-venta');\n      }\n      if (tenantDashboard.black_alerts > 0) {\n        responseData.data.recommendations.push(`${tenantDashboard.black_alerts} Black Alerts activos - atención inmediata requerida`);\n      }\n    }\n    break;\n    \n  default:\n    responseData.data = {\n      message: `Acción ${adminRequest.action} procesada correctamente`,\n      request_details: adminRequest.action_data\n    };\n}\n\nconsole.log('Respuesta de Super-Admin generada:', {\n  action: responseData.action,\n  success: responseData.success,\n  admin_user: responseData.admin_user\n});\n\nreturn responseData;"
      },
      "id": "generate-admin-response",
      "name": "Generar Respuesta Admin",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1790, 400]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Registrar todas las acciones del Super-Admin para auditoría\nINSERT INTO auditoria_super_admin (\n  action_id,\n  admin_user,\n  admin_ip,\n  action_type,\n  target_tenant_id,\n  action_data,\n  success,\n  response_data,\n  timestamp,\n  created_at\n) VALUES (\n  $1,\n  $2,\n  $3,\n  $4,\n  $5,\n  $6::jsonb,\n  $7,\n  $8::jsonb,\n  $9::timestamp,\n  CURRENT_TIMESTAMP\n) RETURNING *;",
        "additionalFields": {
          "queryParameters": "=[\n  $('Procesar Solicitud Admin').first().json.action_id,\n  $('Procesar Solicitud Admin').first().json.admin_user,\n  $('Procesar Solicitud Admin').first().json.admin_ip,\n  $('Procesar Solicitud Admin').first().json.action,\n  $('Procesar Solicitud Admin').first().json.action_data.tenant_id || null,\n  JSON.stringify($('Procesar Solicitud Admin').first().json.action_data),\n  $json.success,\n  JSON.stringify($json),\n  $('Procesar Solicitud Admin').first().json.timestamp\n]"
        }
      },
      "id": "log-admin-action",
      "name": "Registrar Acción Admin",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [2010, 400]
    },
    {
      "parameters": {
        "respondWithOptions": "responseData",
        "responseData": "={{ JSON.stringify($json, null, 2) }}"
      },
      "id": "respond-admin-portal",
      "name": "Respuesta Portal Admin",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2230, 400]
    },
    {
      "parameters": {
        "respondWithOptions": "responseData",
        "responseData": "={\n  \"success\": false,\n  \"error\": \"TENANT_ALREADY_EXISTS\",\n  \"message\": \"El tenant ya existe en el sistema\",\n  \"existing_tenant\": {\n    \"id\": \"{{ $json.id }}\",\n    \"name\": \"{{ $json.nombre }}\",\n    \"active\": {{ $json.activo }},\n    \"created_at\": \"{{ $json.created_at }}\"\n  },\n  \"action_id\": \"{{ $('Procesar Solicitud Admin').first().json.action_id }}\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}"
      },
      "id": "respond-tenant-exists",
      "name": "Respuesta Tenant Existente",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1350, 220]
    }
  ],
  "connections": {
    "Webhook Portal Admin": {
      "main": [["Procesar Solicitud Admin", "type": "main", "index": 0]]
    },
    "Procesar Solicitud Admin": {
      "main": [
        [{"node": "¿Crear Tenant?", "type": "main", "index": 0}],
        [{"node": "¿Métricas Plataforma?", "type": "main", "index": 0}],
        [{"node": "¿Dashboard Tenant?", "type": "main", "index": 0}]
      ]
    },
    "¿Crear Tenant?": {
      "main": [
        [{"node": "Verificar Tenant Existente", "type": "main", "index": 0}],
        []
      ]
    },
    "Verificar Tenant Existente": {
      "main": [["¿Tenant Único?", "type": "main", "index": 0]]
    },
    "¿Tenant Único?": {
      "main": [
        [{"node": "Crear Nuevo Tenant", "type": "main", "index": 0}],
        [{"node": "Respuesta Tenant Existente", "type": "main", "index": 0}]
      ]
    },
    "Crear Nuevo Tenant": {
      "main": [["Activar Provisión Workflows", "type": "main", "index": 0]]
    },
    "Activar Provisión Workflows": {
      "main": [["Generar Respuesta Admin", "type": "main", "index": 0]]
    },
    "¿Métricas Plataforma?": {
      "main": [
        [{"node": "Obtener Métricas Plataforma", "type": "main", "index": 0}],
        []
      ]
    },
    "Obtener Métricas Plataforma": {
      "main": [["Generar Respuesta Admin", "type": "main", "index": 0]]
    },
    "¿Dashboard Tenant?": {
      "main": [
        [{"node": "Obtener Dashboard Tenant", "type": "main", "index": 0}],
        []
      ]
    },
    "Obtener Dashboard Tenant": {
      "main": [["Generar Respuesta Admin", "type": "main", "index": 0]]
    },
    "Generar Respuesta Admin": {
      "main": [["Registrar Acción Admin", "type": "main", "index": 0]]
    },
    "Registrar Acción Admin": {
      "main": [["Respuesta Portal Admin", "type": "main", "index": 0]]
    }
  },
  "settings": {
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "manejador-errores"
  },
  "staticData": {},
  "variables": {
    "PORTAL_VERSION": "1.0.0",
    "WEBHOOK_PATH": "/webhook/super-admin-portal",
    "SUPPORTED_ACTIONS": ["create_tenant", "get_platform_metrics", "get_tenant_dashboard", "update_tenant_config", "suspend_tenant", "activate_tenant", "bulk_tenant_operation"],
    "ADMIN_SECURITY": {
      "REQUIRE_TOKEN": true,
      "LOG_ALL_ACTIONS": true,
      "MAX_BULK_SIZE": 10
    },
    "TENANT_HEALTH_THRESHOLDS": {
      "CRITICAL": 40,
      "WARNING": 60,
      "GOOD": 80
    },
    "DEFAULT_FEATURES": ["leads", "surveys", "complaints"],
    "DEFAULT_USER_LIMIT": 5
  }
}