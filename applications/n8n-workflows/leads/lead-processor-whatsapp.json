{
    "name": "Lead Processor WhatsApp - Fixed",
    "nodes": [
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "webhook/whatsapp/lead",
          "responseMode": "responseNode",
          "options": {}
        },
        "id": "webhook-whatsapp-lead",
        "name": "WhatsApp Webhook",
        "type": "n8n-nodes-base.webhook",
        "typeVersion": 1,
        "position": [240, 300],
        "webhookId": "lead-whatsapp-webhook"
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "leftValue": "={{ $json.object }}",
                "rightValue": "whatsapp_business_account",
                "operator": {
                  "type": "string",
                  "operation": "equals"
                }
              },
              {
                "leftValue": "={{ $json.entry[0].changes[0].field }}",
                "rightValue": "messages",
                "operator": {
                  "type": "string",
                  "operation": "equals"
                }
              }
            ],
            "combineOperation": "all"
          }
        },
        "id": "validate-webhook",
        "name": "Validate WhatsApp Webhook",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [460, 300]
      },
      {
        "parameters": {
          "jsCode": "try {\n  // Extraer datos críticos del webhook WhatsApp\n  const webhookData = $input.first().json;\n  const entry = webhookData.entry[0];\n  const changes = entry.changes[0];\n  const value = changes.value;\n\n  // Datos del mensaje\n  const messages = value.messages || [];\n  const message = messages[0] || {};\n\n  // Extraer tenant_id desde el número de teléfono business\n  const businessPhoneNumberId = value.metadata?.phone_number_id || '';\n  const fromNumber = message.from || '';\n  const messageText = message.text?.body || '';\n  const messageType = message.type || 'text';\n  const messageId = message.id || '';\n\n  // Extraer información del contacto\n  const contacts = value.contacts || [];\n  const contact = contacts[0] || {};\n  const contactName = contact.profile?.name || 'Cliente';\n\n  // Validaciones básicas\n  if (!businessPhoneNumberId || !fromNumber || !messageText) {\n    throw new Error('Datos incompletos en webhook WhatsApp');\n  }\n\n  // TODO: Mapear phone_number_id a tenant_id\n  // En producción esto debería venir de una tabla de configuración\n  const tenantMapping = {\n    '1234567890': 'concesionario_001',\n    '0987654321': 'concesionario_002'\n  };\n\n  const tenantId = tenantMapping[businessPhoneNumberId];\n\n  if (!tenantId) {\n    throw new Error(`No tenant mapping found for phone_number_id: ${businessPhoneNumberId}`);\n  }\n\n  // Preparar datos para el siguiente nodo\n  return {\n    tenant_id: tenantId,\n    business_phone_id: businessPhoneNumberId,\n    cliente_telefono: fromNumber,\n    cliente_nombre: contactName,\n    mensaje_original: messageText,\n    mensaje_tipo: messageType,\n    mensaje_id: messageId,\n    webhook_timestamp: new Date().toISOString(),\n    raw_webhook: webhookData\n  };\n} catch (error) {\n  throw new Error(`Error extracting WhatsApp data: ${error.message}`);\n}"
        },
        "id": "extract-lead-data",
        "name": "Extract Lead Data",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [680, 300]
      },
      {
        "parameters": {
          "jsCode": "// Cache inteligente para configuraciones de tenant\nconst leadData = $input.first().json;\nconst tenantId = leadData.tenant_id;\nconst cacheKey = `tenant_config_${tenantId}`;\n\n// Verificar cache en memoria (simulado con variables globales)\nconst cacheTimeout = 5 * 60 * 1000; // 5 minutos\nconst now = Date.now();\n\n// Obtener cache del workflow static data\nconst staticData = this.getWorkflowStaticData('global');\nconst cachedData = staticData[cacheKey];\n\nif (cachedData && cachedData.timestamp && (now - cachedData.timestamp) < cacheTimeout) {\n  // Cache hit - usar datos cached\n  console.log(`Cache HIT for tenant: ${tenantId}`);\n  return {\n    ...leadData,\n    tenant_config_source: 'cache',\n    cached_config: cachedData.config\n  };\n} else {\n  // Cache miss - necesita consultar Supabase\n  console.log(`Cache MISS for tenant: ${tenantId}`);\n  return {\n    ...leadData,\n    tenant_config_source: 'database',\n    cache_key: cacheKey\n  };\n}"
        },
        "id": "check-tenant-cache",
        "name": "Check Tenant Cache",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [900, 300]
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true,
              "leftValue": "",
              "typeValidation": "strict"
            },
            "conditions": [
              {
                "leftValue": "={{ $json.tenant_config_source }}",
                "rightValue": "database",
                "operator": {
                  "type": "string",
                  "operation": "equals"
                }
              }
            ],
            "combineOperation": "all"
          }
        },
        "id": "cache-miss-condition",
        "name": "Cache Miss?",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [1120, 300]
      },
      {
        "parameters": {
          "method": "GET",
          "url": "={{ $vars.SUPABASE_URL }}/rest/v1/tenant_config",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "headers": {
            "parameters": [
              {
                "name": "apikey",
                "value": "={{ $vars.SUPABASE_ANON_KEY }}"
              },
              {
                "name": "Authorization",
                "value": "Bearer {{ $vars.SUPABASE_SERVICE_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "qs": {
            "parameters": [
              {
                "name": "concesionario_id",
                "value": "eq.{{ $json.tenant_id }}"
              },
              {
                "name": "select",
                "value": "*"
              }
            ]
          },
          "options": {
            "timeout": 10000
          }
        },
        "id": "load-tenant-config-db",
        "name": "Load Config from Database",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [1340, 200]
      },
      {
        "parameters": {
          "jsCode": "// Actualizar cache con nueva configuración\nconst leadData = $('Check Tenant Cache').first().json;\nconst dbResponse = $input.first().json;\nconst cacheKey = leadData.cache_key;\n\nif (!dbResponse || dbResponse.length === 0) {\n  throw new Error(`Tenant configuration not found for: ${leadData.tenant_id}`);\n}\n\nconst config = dbResponse[0];\n\n// Guardar en cache\nconst staticData = this.getWorkflowStaticData('global');\nstaticData[cacheKey] = {\n  config: config,\n  timestamp: Date.now()\n};\n\nconsole.log(`Cache UPDATED for tenant: ${leadData.tenant_id}`);\n\nreturn {\n  ...leadData,\n  tenant_config: config,\n  tenant_config_source: 'database_cached'\n};"
        },
        "id": "update-cache",
        "name": "Update Cache",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [1560, 200]
      },
      {
        "parameters": {
          "jsCode": "// Usar configuración desde cache\nconst leadData = $input.first().json;\nconst cachedConfig = leadData.cached_config;\n\nreturn {\n  ...leadData,\n  tenant_config: cachedConfig\n};"
        },
        "id": "use-cached-config",
        "name": "Use Cached Config",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [1340, 400]
      },
      {
        "parameters": {
          "mode": "mergeByIndex",
          "options": {}
        },
        "id": "merge-config-paths",
        "name": "Merge Config Paths",
        "type": "n8n-nodes-base.merge",
        "typeVersion": 2.1,
        "position": [1780, 300]
      },
      {
        "parameters": {
          "jsCode": "try {\n  // Validar configuración del tenant\n  const leadData = $('Extract Lead Data').first().json;\n  const tenantConfig = $input.first().json;\n\n  if (!tenantConfig || tenantConfig.length === 0) {\n    throw new Error(`Tenant configuration not found for: ${leadData.tenant_id}`);\n  }\n\n  const config = tenantConfig[0];\n\n  // Preparar prompt personalizado para análisis de IA\n  const customPrompt = `\nEres un especialista en ventas automotrices de ${config.nombre_concesionario || 'nuestro concesionario'}.\n\nContexto específico:\n- Marcas disponibles: ${config.marcas_disponibles || 'Toyota, Honda, Nissan'}\n- Productos principales: ${config.productos_principales || 'Vehículos nuevos y usados'}\n- Público objetivo: ${config.publico_objetivo || 'Familias y empresas'}\n\nAnaliza el siguiente mensaje de WhatsApp y extrae:\n\n1. INTENCIÓN (compra|informacion|servicio|cotizacion)\n2. MODELO DE INTERÉS (si menciona algún vehículo específico)\n3. URGENCIA (alta|media|baja)\n4. PRESUPUESTO ESTIMADO (si se menciona)\n5. DATOS DE CONTACTO adicionales\n6. NIVEL DE INTERÉS (1-10)\n\nMensaje del cliente: \"${leadData.mensaje_original}\"\n\nResponde ÚNICAMENTE en formato JSON válido sin markdown:\n{\n  \"intencion_detectada\": \"compra|informacion|servicio|cotizacion\",\n  \"modelo_interes\": \"modelo específico o null\",\n  \"urgencia\": \"alta|media|baja\",\n  \"presupuesto_estimado\": \"rango o null\",\n  \"nivel_interes\": 7,\n  \"datos_adicionales\": {\n    \"email\": \"email si se menciona\",\n    \"preferencias\": \"preferencias específicas\"\n  },\n  \"resumen_analisis\": \"resumen breve del análisis\"\n}\n`;\n\n  return {\n    ...leadData,\n    tenant_config: config,\n    ai_prompt: customPrompt\n  };\n} catch (error) {\n  throw new Error(`Error preparing AI analysis: ${error.message}`);\n}"
        },
        "id": "prepare-ai-analysis",
        "name": "Prepare AI Analysis",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [1120, 300]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "headers": {
            "parameters": [
              {
                "name": "x-goog-api-key",
                "value": "={{ $vars.GEMINI_API_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "body": {
            "parameters": [
              {
                "name": "contents",
                "value": "=[\n  {\n    \"parts\": [\n      {\n        \"text\": \"{{ $json.ai_prompt }}\"\n      }\n    ]\n  }\n]"
              },
              {
                "name": "generationConfig",
                "value": "={\n  \"temperature\": 0.3,\n  \"topK\": 40,\n  \"topP\": 0.95,\n  \"maxOutputTokens\": 1024\n}"
              }
            ]
          },
          "options": {
            "timeout": 15000
          }
        },
        "id": "gemini-ai-analysis",
        "name": "Gemini AI Analysis",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [1340, 300]
      },
      {
        "parameters": {
          "jsCode": "try {\n  // Procesar respuesta de Gemini y calcular scoring\n  const originalData = $('Prepare AI Analysis').first().json;\n  const geminiResponse = $input.first().json;\n\n  // Extraer texto de respuesta de Gemini\n  const responseText = geminiResponse.candidates?.[0]?.content?.parts?.[0]?.text || '{}';\n\n  // Parsear JSON de la respuesta\n  let aiAnalysis;\n  try {\n    // Limpiar respuesta en caso de que venga con markdown\n    const cleanJson = responseText.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n    aiAnalysis = JSON.parse(cleanJson);\n  } catch (parseError) {\n    console.error('Error parsing Gemini response:', responseText);\n    // Fallback en caso de error de parsing\n    aiAnalysis = {\n      intencion_detectada: 'informacion',\n      modelo_interes: null,\n      urgencia: 'media',\n      presupuesto_estimado: null,\n      nivel_interes: 5,\n      datos_adicionales: {},\n      resumen_analisis: 'Error en análisis automático - revisar manualmente'\n    };\n  }\n\n  // Calcular score de calidad del lead (1-100)\n  let scoreCalidad = 0;\n\n  // Scoring basado en intención\n  switch (aiAnalysis.intencion_detectada) {\n    case 'compra':\n      scoreCalidad += 40;\n      break;\n    case 'cotizacion':\n      scoreCalidad += 35;\n      break;\n    case 'informacion':\n      scoreCalidad += 20;\n      break;\n    case 'servicio':\n      scoreCalidad += 10;\n      break;\n    default:\n      scoreCalidad += 15;\n  }\n\n  // Scoring basado en urgencia\n  switch (aiAnalysis.urgencia) {\n    case 'alta':\n      scoreCalidad += 30;\n      break;\n    case 'media':\n      scoreCalidad += 20;\n      break;\n    case 'baja':\n      scoreCalidad += 10;\n      break;\n    default:\n      scoreCalidad += 15;\n  }\n\n  // Bonus por información específica\n  if (aiAnalysis.modelo_interes && aiAnalysis.modelo_interes !== 'null') scoreCalidad += 15;\n  if (aiAnalysis.presupuesto_estimado && aiAnalysis.presupuesto_estimado !== 'null') scoreCalidad += 10;\n  if (aiAnalysis.datos_adicionales?.email) scoreCalidad += 15;\n  if (originalData.cliente_nombre !== 'Cliente') scoreCalidad += 5;\n\n  // Nivel de interés como factor\n  const nivelInteres = aiAnalysis.nivel_interes || 5;\n  scoreCalidad += Math.round(nivelInteres * 2);\n\n  // Asegurar que esté en rango 1-100\n  scoreCalidad = Math.min(Math.max(scoreCalidad, 1), 100);\n\n  // Clasificar lead\n  let clasificacionLead;\n  if (scoreCalidad >= 70) clasificacionLead = 'alto';\n  else if (scoreCalidad >= 40) clasificacionLead = 'medio';\n  else clasificacionLead = 'bajo';\n\n  // Preparar datos completos del lead\n  return {\n    // Datos originales\n    tenant_id: originalData.tenant_id,\n    telefono_cliente: originalData.cliente_telefono,\n    nombre_cliente: originalData.cliente_nombre,\n    mensaje_original: originalData.mensaje_original,\n    \n    // Análisis de IA\n    intencion_detectada: aiAnalysis.intencion_detectada,\n    modelo_interes: aiAnalysis.modelo_interes === 'null' ? null : aiAnalysis.modelo_interes,\n    urgencia: aiAnalysis.urgencia,\n    presupuesto_estimado: aiAnalysis.presupuesto_estimado === 'null' ? null : aiAnalysis.presupuesto_estimado,\n    email_cliente: aiAnalysis.datos_adicionales?.email || null,\n    \n    // Scoring calculado\n    score_calidad: scoreCalidad,\n    nivel_interes: clasificacionLead,\n    \n    // Metadatos\n    fuente_lead: 'whatsapp',\n    estado: 'nuevo',\n    fecha_creacion: new Date().toISOString(),\n    \n    // Datos para asignación\n    resumen_analisis: aiAnalysis.resumen_analisis,\n    raw_ai_response: responseText,\n    tenant_config: originalData.tenant_config,\n    business_phone_id: originalData.business_phone_id\n  };\n} catch (error) {\n  throw new Error(`Error calculating lead score: ${error.message}`);\n}"
        },
        "id": "calculate-lead-score",
        "name": "Calculate Lead Score",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [1560, 300]
      },
      {
        "parameters": {
          "method": "GET",
          "url": "={{ $vars.SUPABASE_URL }}/rest/v1/usuarios",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "headers": {
            "parameters": [
              {
                "name": "apikey",
                "value": "={{ $vars.SUPABASE_ANON_KEY }}"
              },
              {
                "name": "Authorization",
                "value": "Bearer {{ $vars.SUPABASE_SERVICE_KEY }}"
              }
            ]
          },
          "qs": {
            "parameters": [
              {
                "name": "concesionario_id",
                "value": "eq.{{ $json.tenant_id }}"
              },
              {
                "name": "rol",
                "value": "eq.asesor_ventas"
              },
              {
                "name": "activo",
                "value": "eq.true"
              },
              {
                "name": "select",
                "value": "id,nombre,email,especialidad,carga_actual"
              }
            ]
          },
          "options": {
            "timeout": 10000
          }
        },
        "id": "get-available-advisors",
        "name": "Get Available Advisors",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [1780, 300]
      },
      {
        "parameters": {
          "jsCode": "try {\n  // Algoritmo de asignación inteligente de asesores\n  const leadData = $('Calculate Lead Score').first().json;\n  const advisors = $input.first().json;\n\n  if (!advisors || advisors.length === 0) {\n    throw new Error(`No hay asesores disponibles para el concesionario: ${leadData.tenant_id}`);\n  }\n\n  // Filtrar asesores por especialidad si se detectó modelo específico\n  let eligibleAdvisors = advisors;\n  if (leadData.modelo_interes) {\n    const specialized = advisors.filter(advisor => \n      advisor.especialidad && \n      advisor.especialidad.toLowerCase().includes(leadData.modelo_interes.toLowerCase())\n    );\n    \n    if (specialized.length > 0) {\n      eligibleAdvisors = specialized;\n    }\n  }\n\n  // Algoritmo de distribución por carga de trabajo\n  // Ordenar por menor carga actual\n  eligibleAdvisors.sort((a, b) => (a.carga_actual || 0) - (b.carga_actual || 0));\n\n  // Seleccionar asesor con menor carga\n  const selectedAdvisor = eligibleAdvisors[0];\n\n  // Preparar datos finales para inserción\n  return {\n    // Datos del lead para base de datos\n    lead_data: {\n      concesionario_id: leadData.tenant_id,\n      telefono_cliente: leadData.telefono_cliente,\n      nombre_cliente: leadData.nombre_cliente,\n      email_cliente: leadData.email_cliente,\n      intencion_detectada: leadData.intencion_detectada,\n      modelo_interes: leadData.modelo_interes,\n      mensaje_original: leadData.mensaje_original,\n      score_calidad: leadData.score_calidad,\n      nivel_interes: leadData.nivel_interes,\n      asesor_asignado_id: selectedAdvisor.id,\n      estado: 'nuevo',\n      fuente_lead: 'whatsapp',\n      fecha_creacion: new Date().toISOString(),\n      urgencia: leadData.urgencia,\n      presupuesto_estimado: leadData.presupuesto_estimado\n    },\n    \n    // Datos para notificación\n    notification_data: {\n      asesor: selectedAdvisor,\n      lead_summary: {\n        cliente: leadData.nombre_cliente,\n        telefono: leadData.telefono_cliente,\n        email: leadData.email_cliente,\n        intencion: leadData.intencion_detectada,\n        modelo: leadData.modelo_interes,\n        score: leadData.score_calidad,\n        urgencia: leadData.urgencia,\n        presupuesto: leadData.presupuesto_estimado,\n        resumen: leadData.resumen_analisis\n      },\n      tenant_config: leadData.tenant_config,\n      business_phone_id: leadData.business_phone_id\n    }\n  };\n} catch (error) {\n  throw new Error(`Error assigning advisor: ${error.message}`);\n}"
        },
        "id": "assign-advisor",
        "name": "Assign Advisor",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [2000, 300]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "={{ $vars.SUPABASE_URL }}/rest/v1/leads",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "headers": {
            "parameters": [
              {
                "name": "apikey",
                "value": "={{ $vars.SUPABASE_ANON_KEY }}"
              },
              {
                "name": "Authorization",
                "value": "Bearer {{ $vars.SUPABASE_SERVICE_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Prefer",
                "value": "return=representation"
              }
            ]
          },
          "body": {
            "parameters": [
              {
                "name": "body",
                "value": "={{ JSON.stringify($json.lead_data) }}"
              }
            ]
          },
          "options": {
            "timeout": 10000
          }
        },
        "id": "save-lead-supabase",
        "name": "Save Lead to Supabase",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [2220, 300]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "={{ $vars.SUPABASE_URL }}/rest/v1/rpc/incrementar_carga_asesor",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpHeaderAuth",
          "headers": {
            "parameters": [
              {
                "name": "apikey",
                "value": "={{ $vars.SUPABASE_ANON_KEY }}"
              },
              {
                "name": "Authorization",
                "value": "Bearer {{ $vars.SUPABASE_SERVICE_KEY }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "body": {
            "parameters": [
              {
                "name": "asesor_id",
                "value": "={{ $('Assign Advisor').first().json.notification_data.asesor.id }}"
              }
            ]
          },
          "options": {
            "timeout": 5000
          }
        },
        "id": "update-advisor-load",
        "name": "Update Advisor Load",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [2440, 300]
      },
      {
        "parameters": {
          "jsCode": "// Preparar notificación por email al asesor\nconst assignmentData = $('Assign Advisor').first().json;\nconst savedLead = $('Save Lead to Supabase').first().json;\n\nconst asesor = assignmentData.notification_data.asesor;\nconst leadSummary = assignmentData.notification_data.lead_summary;\nconst tenantConfig = assignmentData.notification_data.tenant_config;\n\n// ID del lead creado\nconst leadId = savedLead[0]?.id || 'N/A';\n\n// Template de email personalizado\nconst emailTemplate = `\n<div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n  <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px; text-align: center; margin-bottom: 30px;\">\n    <h1 style=\"margin: 0; font-size: 28px;\">🎯 Nuevo Lead Asignado</h1>\n    <h2 style=\"margin: 10px 0 0 0; opacity: 0.9; font-weight: normal;\">${tenantConfig.nombre_concesionario || 'Concesionario'}</h2>\n  </div>\n  \n  <div style=\"background: #f8fafc; padding: 25px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #4299e1;\">\n    <h3 style=\"margin: 0 0 15px 0; color: #2d3748;\">📋 Información del Cliente</h3>\n    <table style=\"width: 100%; border-collapse: collapse;\">\n      <tr><td style=\"padding: 8px 0; font-weight: bold; color: #4a5568;\">Cliente:</td><td style=\"padding: 8px 0;\">${leadSummary.cliente}</td></tr>\n      <tr><td style=\"padding: 8px 0; font-weight: bold; color: #4a5568;\">Teléfono:</td><td style=\"padding: 8px 0;\">${leadSummary.telefono}</td></tr>\n      <tr><td style=\"padding: 8px 0; font-weight: bold; color: #4a5568;\">Email:</td><td style=\"padding: 8px 0;\">${leadSummary.email || 'No proporcionado'}</td></tr>\n      <tr><td style=\"padding: 8px 0; font-weight: bold; color: #4a5568;\">Intención:</td><td style=\"padding: 8px 0;\">${leadSummary.intencion}</td></tr>\n      <tr><td style=\"padding: 8px 0; font-weight: bold; color: #4a5568;\">Modelo de interés:</td><td style=\"padding: 8px 0;\">${leadSummary.modelo || 'No especificado'}</td></tr>\n      <tr><td style=\"padding: 8px 0; font-weight: bold; color: #4a5568;\">Presupuesto:</td><td style=\"padding: 8px 0;\">${leadSummary.presupuesto || 'No especificado'}</td></tr>\n    </table>\n  </div>\n  \n  <div style=\"background: #f0fff4; padding: 25px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #48bb78;\">\n    <h3 style=\"margin: 0 0 15px 0; color: #2d3748;\">📊 Análisis Automático IA</h3>\n    <div style=\"display: flex; justify-content: space-between; margin-bottom: 15px;\">\n      <div style=\"text-align: center;\">\n        <div style=\"font-size: 24px; font-weight: bold; color: #38a169;\">${leadSummary.score}/100</div>\n        <div style=\"font-size: 12px; color: #4a5568;\">Score Calidad</div>\n      </div>\n      <div style=\"text-align: center;\">\n        <div style=\"font-size: 18px; font-weight: bold; color: #d69e2e; text-transform: uppercase;\">${leadSummary.urgencia}</div>\n        <div style=\"font-size: 12px; color: #4a5568;\">Urgencia</div>\n      </div>\n    </div>\n    <p style=\"margin: 15px 0 0 0; font-style: italic; color: #4a5568;\"><strong>Resumen IA:</strong> ${leadSummary.resumen}</p>\n  </div>\n  \n  <div style=\"background: #fffbeb; padding: 25px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #ed8936;\">\n    <h3 style=\"margin: 0 0 15px 0; color: #2d3748;\">⚡ Próximos Pasos Recomendados</h3>\n    <ol style=\"margin: 0; padding-left: 20px; color: #4a5568; line-height: 1.6;\">\n      <li><strong>Contactar inmediatamente</strong> - El cliente está esperando respuesta</li>\n      <li><strong>Personalizar conversación</strong> - Usar información del análisis IA</li>\n      <li><strong>Actualizar estado</strong> - Marcar como contactado en la plataforma</li>\n      ${leadSummary.urgencia === 'alta' ? '<li style=\"color: #c53030;\"><strong>URGENTE</strong> - Contactar en máximo 1 hora</li>' : ''}\n    </ol>\n  </div>\n  \n  <div style=\"text-align: center; margin: 30px 0;\">\n    <a href=\"${tenantConfig.dashboard_url || 'https://app.optimacx.com'}/leads/${leadId}\" \n       style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 50px; font-weight: bold; display: inline-block; box-shadow: 0 4px 15px 0 rgba(102, 126, 234, 0.4);\">\n       🚀 Ver Lead en Plataforma\n    </a>\n  </div>\n  \n  <div style=\"border-top: 1px solid #e2e8f0; padding-top: 20px; text-align: center; font-size: 12px; color: #718096;\">\n    <p style=\"margin: 0;\">Lead ID: ${leadId} | Generado automáticamente por OptimaCX</p>\n    <p style=\"margin: 5px 0 0 0;\">¿Problemas? Contacta al administrador del sistema</p>\n  </div>\n</div>\n`;\n\nreturn {\n  type: 'email_asesor',\n  to: asesor.email,\n  subject: `🎯 Nuevo Lead Asignado - Score ${leadSummary.score}/100 - ${leadSummary.cliente}`,\n  html: emailTemplate,\n  tenant_config: tenantConfig,\n  lead_id: leadId\n};"
        },
        "id": "prepare-email-notification",
        "name": "Prepare Email Notification",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [2660, 200]
      },
      {
        "parameters": {
          "jsCode": "// Preparar notificación WhatsApp automática al cliente\nconst assignmentData = $('Assign Advisor').first().json;\nconst leadSummary = assignmentData.notification_data.lead_summary;\nconst tenantConfig = assignmentData.notification_data.tenant_config;\nconst businessPhoneId = assignmentData.notification_data.business_phone_id;\n\n// Mensaje automático de confirmación personalizado\nconst whatsappMessage = `¡Hola ${leadSummary.cliente}! 👋\n\nGracias por contactar a *${tenantConfig.nombre_concesionario || 'nuestro concesionario'}*.\n\n✅ Hemos recibido tu consulta${leadSummary.modelo ? ` sobre *${leadSummary.modelo}*` : ''}\n👨‍💼 Un asesor especializado se contactará contigo muy pronto\n⏰ Tiempo estimado de respuesta: ${leadSummary.urgencia === 'alta' ? '1 hora' : '2 horas'}\n\n${leadSummary.urgencia === 'alta' ? '🚨 *NOTA:* Detectamos alta urgencia en tu consulta, te contactaremos de inmediato' : ''}\n\n¿Tienes alguna pregunta adicional? Puedes responder a este mensaje.\n\n---\n*${tenantConfig.nombre_concesionario || 'Nuestro Concesionario'}*\n${tenantConfig.direccion ? `📍 ${tenantConfig.direccion}` : ''}\n${tenantConfig.telefono_principal ? `📞 ${tenantConfig.telefono_principal}` : ''}\n${tenantConfig.horarios ? `🕒 ${tenantConfig.horarios}` : ''}`;\n\nreturn {\n  type: 'whatsapp_cliente',\n  to: leadSummary.telefono,\n  message: whatsappMessage.trim(),\n  business_phone_id: businessPhoneId\n};"
        },
        "id": "prepare-whatsapp-confirmation",
        "name": "Prepare WhatsApp Confirmation", 
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [2660, 400]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "={{ $vars.N8N_WEBHOOK_URL }}/webhook/send-email",
          "headers": {
            "parameters": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Authorization",
                "value": "Bearer {{ $vars.N8N_WEBHOOK_AUTH_TOKEN || 'default-token' }}"
              }
            ]
          },
          "body": {
            "parameters": [
              {
                "name": "to",
                "value": "={{ $json.to }}"
              },
              {
                "name": "subject", 
                "value": "={{ $json.subject }}"
              },
              {
                "name": "html",
                "value": "={{ $json.html }}"
              },
              {
                "name": "tenant_id",
                "value": "={{ $json.tenant_config.concesionario_id }}"
              },
              {
                "name": "lead_id",
                "value": "={{ $json.lead_id }}"
              }
            ]
          },
          "options": {
            "timeout": 10000
          }
        },
        "id": "send-email-notification",
        "name": "Send Email Notification",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [2880, 200]
      },
      {
        "parameters": {
          "method": "POST",
          "url": "https://graph.facebook.com/v17.0/{{ $json.business_phone_id }}/messages",
          "authentication": "genericCredentialType", 
          "genericAuthType": "httpHeaderAuth",
          "headers": {
            "parameters": [
              {
                "name": "Authorization",
                "value": "Bearer {{ $vars.WHATSAPP_ACCESS_TOKEN }}"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          },
          "body": {
            "parameters": [
              {
                "name": "messaging_product",
                "value": "whatsapp"
              },
              {
                "name": "to",
                "value": "={{ $json.to }}"
              },
              {
                "name": "type", 
                "value": "text"
              },
              {
                "name": "text",
                "value": "={ \"body\": \"{{ $json.message.replace(/\"/g, '\\\\\"') }}\" }"
              }
            ]
          },
          "options": {
            "timeout": 10000
          }
        },
        "id": "send-whatsapp-confirmation",
        "name": "Send WhatsApp Confirmation",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [2880, 400]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"status\": \"success\",\n  \"message\": \"Lead procesado correctamente\",\n  \"data\": {\n    \"lead_id\": \"{{ $('Save Lead to Supabase').first().json[0]?.id }}\",\n    \"score\": {{ $('Calculate Lead Score').first().json.score_calidad }},\n    \"nivel_interes\": \"{{ $('Calculate Lead Score').first().json.nivel_interes }}\",\n    \"asesor_asignado\": \"{{ $('Assign Advisor').first().json.notification_data.asesor.nombre }}\",\n    \"asesor_email\": \"{{ $('Assign Advisor').first().json.notification_data.asesor.email }}\",\n    \"intencion_detectada\": \"{{ $('Calculate Lead Score').first().json.intencion_detectada }}\",\n    \"urgencia\": \"{{ $('Calculate Lead Score').first().json.urgencia }}\",\n    \"modelo_interes\": \"{{ $('Calculate Lead Score').first().json.modelo_interes || 'No especificado' }}\"\n  },\n  \"timestamp\": \"{{ new Date().toISOString() }}\",\n  \"processing_time_ms\": \"{{ Date.now() - new Date($('Extract Lead Data').first().json.webhook_timestamp).getTime() }}\"\n}",
          "options": {
            "responseCode": 200
          }
        },
        "id": "webhook-response",
        "name": "Webhook Success Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [3100, 300]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"status\": \"error\",\n  \"message\": \"Webhook inválido: no es un mensaje de WhatsApp Business válido\",\n  \"error_details\": {\n    \"expected_object\": \"whatsapp_business_account\",\n    \"expected_field\": \"messages\",\n    \"received_object\": \"{{ $json.object || 'undefined' }}\",\n    \"received_field\": \"{{ $json.entry?.[0]?.changes?.[0]?.field || 'undefined' }}\"\n  },\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
          "options": {
            "responseCode": 400
          }
        },
        "id": "invalid-webhook-response",
        "name": "Invalid Webhook Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [460, 500]
      },
      {
        "parameters": {
          "respondWith": "json",
          "responseBody": "={\n  \"status\": \"error\",\n  \"message\": \"Error interno procesando el lead\",\n  \"error_details\": \"{{ $json.error?.message || 'Error desconocido' }}\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\",\n  \"support\": \"Contacte al administrador del sistema\"\n}",
          "options": {
            "responseCode": 500
          }
        },
        "id": "error-response",
        "name": "Error Response",
        "type": "n8n-nodes-base.respondToWebhook",
        "typeVersion": 1,
        "position": [1340, 500]
      }
    ],
    "connections": {
      "WhatsApp Webhook": {
        "main": [
          [
            {
              "node": "Validate WhatsApp Webhook",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Validate WhatsApp Webhook": {
        "main": [
          [
            {
              "node": "Extract Lead Data",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Invalid Webhook Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Extract Lead Data": {
        "main": [
          [
            {
              "node": "Check Tenant Cache",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Check Tenant Cache": {
        "main": [
          [
            {
              "node": "Cache Miss?",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Cache Miss?": {
        "main": [
          [
            {
              "node": "Load Config from Database",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Use Cached Config",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Load Config from Database": {
        "main": [
          [
            {
              "node": "Update Cache",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Update Cache": {
        "main": [
          [
            {
              "node": "Merge Config Paths",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Use Cached Config": {
        "main": [
          [
            {
              "node": "Merge Config Paths",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Merge Config Paths": {
        "main": [
          [
            {
              "node": "Prepare AI Analysis",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prepare AI Analysis": {
        "main": [
          [
            {
              "node": "Gemini AI Analysis",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Gemini AI Analysis": {
        "main": [
          [
            {
              "node": "Calculate Lead Score",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Calculate Lead Score": {
        "main": [
          [
            {
              "node": "Get Available Advisors",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Get Available Advisors": {
        "main": [
          [
            {
              "node": "Assign Advisor",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Assign Advisor": {
        "main": [
          [
            {
              "node": "Save Lead to Supabase",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Save Lead to Supabase": {
        "main": [
          [
            {
              "node": "Update Advisor Load",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Update Advisor Load": {
        "main": [
          [
            {
              "node": "Prepare Email Notification",
              "type": "main",
              "index": 0
            },
            {
              "node": "Prepare WhatsApp Confirmation",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prepare Email Notification": {
        "main": [
          [
            {
              "node": "Send Email Notification",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Prepare WhatsApp Confirmation": {
        "main": [
          [
            {
              "node": "Send WhatsApp Confirmation",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Send Email Notification": {
        "main": [
          [
            {
              "node": "Webhook Success Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Send WhatsApp Confirmation": {
        "main": [
          [
            {
              "node": "Webhook Success Response",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "pinData": {},
    "settings": {
      "executionOrder": "v1",
      "saveManualExecutions": true,
      "callerPolicy": "workflowsFromSameOwner",
      "errorWorkflow": ""
    },
    "staticData": null,
    "tags": [
      {
        "createdAt": "2024-01-01T00:00:00.000Z",
        "updatedAt": "2024-01-01T00:00:00.000Z",
        "id": "leads",
        "name": "leads"
      },
      {
        "createdAt": "2024-01-01T00:00:00.000Z", 
        "updatedAt": "2024-01-01T00:00:00.000Z",
        "id": "whatsapp",
        "name": "whatsapp"
      },
      {
        "createdAt": "2024-01-01T00:00:00.000Z",
        "updatedAt": "2024-01-01T00:00:00.000Z", 
        "id": "ai",
        "name": "ai"
      },
      {
        "createdAt": "2024-01-01T00:00:00.000Z",
        "updatedAt": "2024-01-01T00:00:00.000Z", 
        "id": "production-ready",
        "name": "production-ready"
      }
    ],
    "meta": {
      "templateCredsSetupCompleted": true
    },
    "id": "lead-processor-whatsapp-fixed",
    "versionId": "2.0.0"
  }