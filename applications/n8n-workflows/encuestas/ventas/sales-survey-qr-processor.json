{
  "name": "Sales Survey - QR Processor",
  "description": "Procesa encuestas de VENTAS recibidas vía código QR, valida datos, registra en tabla separada y notifica bajas calificaciones al jefe de ventas.",
  "tags": ["sales", "survey", "qr", "ventas", "notification"],
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook/sales-survey/qr",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-qr-sales-survey",
      "name": "Webhook QR Sales Survey",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "jsCode": "// Valida y normaliza los datos de la encuesta QR DE VENTAS\nconst salesSurveyData = $input.first().json;\n\n// Campos requeridos específicos para VENTAS\nconst requiredFields = [\n  'concesionario_id', 'sucursal_id', 'cliente_telefono', 'cliente_nombre',\n  'asesor_ventas_id', 'vehiculo_modelo', 'fecha_venta',\n  'recomendacion', 'atencion_asesor', 'proceso_entrega', 'satisfaccion_general'\n];\n\nfor (const field of requiredFields) {\n  if (!salesSurveyData[field]) {\n    throw new Error(`Campo requerido faltante en encuesta de VENTAS: ${field}`);\n  }\n}\n\n// Validar que las calificaciones estén en el rango 1-10 (específicas de VENTAS)\nconst scoreFields = ['recomendacion', 'atencion_asesor', 'proceso_entrega', 'satisfaccion_general'];\nfor (const field of scoreFields) {\n  const score = salesSurveyData[field];\n  if (typeof score !== 'number' || score < 1 || score > 10) {\n    throw new Error(`Calificación inválida para ${field}: ${score}. Debe ser un número entre 1 y 10.`);\n  }\n}\n\n// Validar fecha de venta\nconst fechaVenta = new Date(salesSurveyData.fecha_venta);\nif (isNaN(fechaVenta.getTime())) {\n  throw new Error('fecha_venta debe ser una fecha válida');\n}\n\n// Calcular promedio de las calificaciones DE VENTAS\nconst totalScore = scoreFields.reduce((sum, field) => sum + salesSurveyData[field], 0);\nconst averageScore = totalScore / scoreFields.length;\n\n// Preparar datos para la tabla ESPECÍFICA de encuestas de ventas\nconst processedSalesSurvey = {\n  concesionario_id: salesSurveyData.concesionario_id,\n  sucursal_id: salesSurveyData.sucursal_id,\n  cliente_nombre: salesSurveyData.cliente_nombre,\n  cliente_rut: salesSurveyData.cliente_rut || null,\n  cliente_telefono: salesSurveyData.cliente_telefono,\n  asesor_ventas_id: salesSurveyData.asesor_ventas_id,\n  vehiculo_modelo: salesSurveyData.vehiculo_modelo,\n  fecha_venta: salesSurveyData.fecha_venta,\n  \n  // Calificaciones específicas de VENTAS\n  recomendacion: salesSurveyData.recomendacion,\n  atencion_asesor: salesSurveyData.atencion_asesor,\n  proceso_entrega: salesSurveyData.proceso_entrega,\n  satisfaccion_general: salesSurveyData.satisfaccion_general,\n  \n  comentario: salesSurveyData.comentario || null,\n  origen: 'QR_VENTAS', // DIFERENCIADOR CLAVE\n  estado: 'completado',\n  fecha_creacion: new Date().toISOString(),\n  average_score: averageScore,\n  \n  // Metadatos específicos de ventas\n  survey_type: 'VENTAS',\n  department: 'VENTAS'\n};\n\nconsole.log('Encuesta de VENTAS procesada:', {\n  tipo: 'VENTAS',\n  concesionario: processedSalesSurvey.concesionario_id,\n  sucursal: processedSalesSurvey.sucursal_id,\n  asesor: processedSalesSurvey.asesor_ventas_id,\n  vehiculo: processedSalesSurvey.vehiculo_modelo,\n  promedio: processedSalesSurvey.average_score\n});\n\nreturn [{ json: processedSalesSurvey }];"
      },
      "id": "validate-and-process-sales-qr-data",
      "name": "Validar y Procesar Datos QR Ventas",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 300]
    },
    {
      "parameters": {
        "operation": "create",
        "resource": "execution",
        "workflowId": "sales-survey-response-handler",
        "data": "={{ JSON.stringify($json) }}"
      },
      "id": "trigger-sales-response-handler",
      "name": "Disparar Manejador Respuestas Ventas",
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [600, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"message\": \"Encuesta de VENTAS QR procesada exitosamente.\",\n  \"survey_type\": \"VENTAS\",\n  \"average_score\": {{ $('Validar y Procesar Datos QR Ventas').first().json.average_score }},\n  \"department\": \"VENTAS\"\n}"
      },
      "id": "success-response-sales",
      "name": "Respuesta Exitosa Ventas",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [800, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"error\",\n  \"message\": \"Error al procesar la encuesta QR de VENTAS.\",\n  \"survey_type\": \"VENTAS\",\n  \"error_details\": \"{{ $json.error?.message || 'Error desconocido' }}\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {
          "responseCode": 400
        }
      },
      "id": "error-response-sales",
      "name": "Respuesta de Error Ventas",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [600, 480]
    }
  ],
  "connections": {
    "Webhook QR Sales Survey": {
      "main": [
        [
          {
            "node": "Validar y Procesar Datos QR Ventas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar y Procesar Datos QR Ventas": {
      "main": [
        [
          {
            "node": "Disparar Manejador Respuestas Ventas",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respuesta de Error Ventas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Disparar Manejador Respuestas Ventas": {
      "main": [
        [
          {
            "node": "Respuesta Exitosa Ventas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  }
}