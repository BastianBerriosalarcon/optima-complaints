{
  "name": "Complaint Auto Assignment",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook/complaint/auto-assignment",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Auto Assignment Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "complaint-auto-assignment"
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $vars.SUPABASE_URL }}/rest/v1/usuarios",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headers": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.SUPABASE_SERVICE_KEY }}"
            }
          ]
        },
        "qs": {
          "parameters": [
            {
              "name": "concesionario_id",
              "value": "eq.{{ $json.complaint_input.tenant_id }}"
            },
            {
              "name": "or",
              "value": "(rol.eq.jefe_servicio,rol.eq.asesor_servicio,rol.eq.encargado_calidad)"
            },
            {
              "name": "activo",
              "value": "eq.true"
            },
            {
              "name": "select",
              "value": "id,nombre,email,rol,sucursal_id"
            }
          ]
        }
      },
      "id": "get-service-staff",
      "name": "Get Service Staff",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "/*** COMPLAINT AUTO ASSIGNMENT - SRP: Solo asignación y persistencia ***/\nconst assignmentData = $('Auto Assignment Trigger').first().json;\nconst serviceStaff = $('Get Service Staff').first().json;\n\nconst complaintInput = assignmentData.complaint_input;\nconst aiAnalysis = assignmentData.ai_analysis;\nconst tenantConfig = assignmentData.tenant_config;\n\n// Validar personal disponible\nif (!serviceStaff || serviceStaff.length === 0) {\n  throw new Error(`No hay personal de servicio activo para el concesionario: ${complaintInput.tenant_id}`);\n}\n\n// Filtrar por sucursal si se detectó una específica\nlet eligibleStaff = serviceStaff;\nconst sucursalDetectada = aiAnalysis.datos_extraidos?.sucursal_detectada;\nif (sucursalDetectada) {\n  const sucursalStaff = serviceStaff.filter(staff => \n    staff.sucursal_id === sucursalDetectada\n  );\n  if (sucursalStaff.length > 0) {\n    eligibleStaff = sucursalStaff;\n  }\n}\n\n// Buscar roles específicos (siguiendo patrón de asignación de encuestas)\nconst jefeServicio = eligibleStaff.find(staff => staff.rol === 'jefe_servicio');\nconst asesorServicio = eligibleStaff.find(staff => staff.rol === 'asesor_servicio');\nconst encargadoCalidad = eligibleStaff.find(staff => staff.rol === 'encargado_calidad');\n\nif (!jefeServicio && !asesorServicio) {\n  throw new Error(`No hay Jefe de Servicio ni Asesor de Servicio disponibles para: ${complaintInput.tenant_id}`);\n}\n\n// Preparar datos completos para guardar en BD (siguiendo estructura de CLAUDE.md)\nconst complaintForDB = {\n  // Identificación\n  concesionario_id: complaintInput.tenant_id,\n  \n  // Datos del cliente\n  cliente_nombre: complaintInput.cliente_nombre,\n  cliente_telefono: complaintInput.cliente_telefono,\n  cliente_email: complaintInput.cliente_email,\n  cliente_rut: complaintInput.cliente_rut,\n  \n  // Datos del vehículo (combinando input + IA)\n  vehiculo_patente: complaintInput.vehiculo_patente || aiAnalysis.datos_extraidos?.vehiculo?.patente,\n  vehiculo_vin: complaintInput.vehiculo_vin || aiAnalysis.datos_extraidos?.vehiculo?.vin,\n  vehiculo_marca: complaintInput.vehiculo_marca || aiAnalysis.datos_extraidos?.vehiculo?.marca,\n  vehiculo_modelo: complaintInput.vehiculo_modelo || aiAnalysis.datos_extraidos?.vehiculo?.modelo,\n  \n  // Clasificación IA\n  tipo_reclamo: aiAnalysis.clasificacion.tipo_reclamo,\n  categoria: aiAnalysis.clasificacion.categoria,\n  subcategoria: aiAnalysis.clasificacion.subcategoria || null,\n  urgencia: aiAnalysis.clasificacion.urgencia,\n  black_alert: aiAnalysis.clasificacion.black_alert || false,\n  \n  // Localización\n  sucursal: sucursalDetectada || complaintInput.sucursal_estimada || 'Principal',\n  taller: aiAnalysis.datos_extraidos?.taller_detectado || null,\n  \n  // Contenido\n  detalle: complaintInput.complaint_text,\n  \n  // Asignaciones automáticas\n  jefe_servicio_id: jefeServicio?.id || null,\n  asesor_servicio_id: asesorServicio?.id || null,\n  encargado_calidad_id: encargadoCalidad?.id || null,\n  \n  // Metadatos\n  canal_origen: complaintInput.canal_origen,\n  id_externo: complaintInput.id_externo,\n  fecha_incidente: aiAnalysis.datos_extraidos?.fecha_incidente || complaintInput.fecha_incidente,\n  \n  // Estados (siguiendo estructura de CLAUDE.md)\n  estado: 'pendiente', // pendiente, en_proceso, cerrado\n  tipo_reclamo_sistema: 'externo', // externo/interno\n  fecha_creacion: new Date().toISOString(),\n  fecha_actualizacion: new Date().toISOString(),\n  \n  // Análisis completo como JSON\n  analisis_ia_completo: aiAnalysis,\n  metadata_procesamiento: assignmentData.processing_metadata\n};\n\n// Preparar targets de notificación\nconst notificationTargets = [];\n\nif (jefeServicio) {\n  notificationTargets.push({\n    role: 'jefe_servicio',\n    user: jefeServicio,\n    priority: complaintForDB.urgencia === 'alta' ? 'urgent' : 'normal'\n  });\n}\n\nif (asesorServicio) {\n  notificationTargets.push({\n    role: 'asesor_servicio',\n    user: asesorServicio,\n    priority: 'normal'\n  });\n}\n\nif (encargadoCalidad) {\n  notificationTargets.push({\n    role: 'encargado_calidad',\n    user: encargadoCalidad,\n    priority: complaintForDB.black_alert ? 'urgent' : 'low'\n  });\n}\n\nreturn {\n  complaint_data: complaintForDB,\n  notification_targets: notificationTargets,\n  ai_analysis: aiAnalysis,\n  tenant_config: tenantConfig,\n  is_black_alert: complaintForDB.black_alert,\n  processing_metadata: assignmentData.processing_metadata\n};"
      },
      "id": "assign-and-prepare-data",
      "name": "Assign and Prepare Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.SUPABASE_URL }}/rest/v1/reclamos",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headers": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $vars.SUPABASE_SERVICE_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "body": {
          "parameters": [
            {
              "name": "body",
              "value": "={{ JSON.stringify($json.complaint_data) }}"
            }
          ]
        }
      },
      "id": "save-complaint-db",
      "name": "Save Complaint DB",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $('Assign and Prepare Data').first().json.is_black_alert }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combineOperation": "all"
        }
      },
      "id": "check-black-alert",
      "name": "Check Black Alert",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "operation": "create",
        "resource": "execution",
        "workflowId": "complaint-black-alert",
        "data": "={{ JSON.stringify({\n  complaint_id: $('Save Complaint DB').first().json[0].id,\n  tenant_id: $('Assign and Prepare Data').first().json.complaint_data.concesionario_id,\n  complaint_data: $('Assign and Prepare Data').first().json.complaint_data,\n  ai_analysis: $('Assign and Prepare Data').first().json.ai_analysis,\n  tenant_config: $('Assign and Prepare Data').first().json.tenant_config\n}) }}"
      },
      "id": "trigger-black-alert",
      "name": "Trigger Black Alert",
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "operation": "create",
        "resource": "execution",
        "workflowId": "complaint-notifications",
        "data": "={{ JSON.stringify({\n  complaint_id: $('Save Complaint DB').first().json[0].id,\n  notification_targets: $('Assign and Prepare Data').first().json.notification_targets,\n  complaint_data: $('Assign and Prepare Data').first().json.complaint_data,\n  ai_analysis: $('Assign and Prepare Data').first().json.ai_analysis,\n  tenant_config: $('Assign and Prepare Data').first().json.tenant_config,\n  is_black_alert: $('Assign and Prepare Data').first().json.is_black_alert\n}) }}"
      },
      "id": "trigger-notifications",
      "name": "Trigger Notifications",
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [1340, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"message\": \"Reclamo asignado y guardado correctamente\",\n  \"complaint_id\": \"{{ $('Save Complaint DB').first().json[0]?.id }}\",\n  \"assigned_to\": {\n    \"jefe_servicio\": \"{{ $('Assign and Prepare Data').first().json.notification_targets.find(t => t.role === 'jefe_servicio')?.user?.nombre }}\",\n    \"asesor_servicio\": \"{{ $('Assign and Prepare Data').first().json.notification_targets.find(t => t.role === 'asesor_servicio')?.user?.nombre }}\",\n    \"encargado_calidad\": \"{{ $('Assign and Prepare Data').first().json.notification_targets.find(t => t.role === 'encargado_calidad')?.user?.nombre }}\"\n  },\n  \"classification\": {{ JSON.stringify($('Assign and Prepare Data').first().json.ai_analysis.clasificacion) }},\n  \"black_alert_triggered\": {{ $('Assign and Prepare Data').first().json.is_black_alert }},\n  \"notifications_sent\": true,\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}"
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 300]
    }
  ],
  "connections": {
    "Auto Assignment Trigger": {
      "main": [
        [
          {
            "node": "Get Service Staff",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Service Staff": {
      "main": [
        [
          {
            "node": "Assign and Prepare Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assign and Prepare Data": {
      "main": [
        [
          {
            "node": "Save Complaint DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Complaint DB": {
      "main": [
        [
          {
            "node": "Check Black Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Black Alert": {
      "main": [
        [
          {
            "node": "Trigger Black Alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "Trigger Notifications",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Trigger Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Black Alert": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Notifications": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "srp",
      "name": "srp"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "reclamos",
      "name": "reclamos"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "assignment",
      "name": "assignment"
    }
  ],
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "complaint-auto-assignment",
  "versionId": "1.0.0"
}