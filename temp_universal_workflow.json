{
  "name": "Chatwoot Universal Webhook Handler",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chatwoot/{{$parameter.tenant_id}}",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-node",
      "name": "Webhook Universal",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=Webhook received for tenant: {{ $json.tenant_id || 'unknown' }}"
      },
      "id": "response-node",
      "name": "Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        760,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// ðŸŽ¯ Handler Universal Chatwoot â†’ N8N\n// Procesa webhooks de cualquier tenant dinÃ¡micamente\n\nconst inputData = $input.all();\nconst results = [];\n\nfor (const item of inputData) {\n  const data = item.json;\n  \n  // Extraer tenant_id del path del webhook\n  const webhookPath = $node[\"Webhook Universal\"].parameter.path;\n  const tenantMatch = webhookPath.match(/chatwoot\\/(.+)$/);\n  const tenant_id = tenantMatch ? tenantMatch[1] : 'default';\n  \n  // Datos del webhook de Chatwoot\n  const event_type = data.event || 'unknown';\n  const account_id = data.account?.id || null;\n  const conversation_id = data.conversation?.id || null;\n  const message_content = data.content || '';\n  const contact_info = data.conversation?.meta?.sender || {};\n  \n  // Preparar datos estructurados\n  const processedData = {\n    // IdentificaciÃ³n\n    tenant_id: tenant_id,\n    account_id: account_id,\n    event_type: event_type,\n    timestamp: new Date().toISOString(),\n    \n    // Datos del evento\n    conversation: {\n      id: conversation_id,\n      status: data.conversation?.status || 'open'\n    },\n    \n    // Mensaje (si aplica)\n    message: {\n      content: message_content,\n      message_type: data.message_type || 'incoming'\n    },\n    \n    // Contacto\n    contact: {\n      phone_number: contact_info.phone_number || null,\n      name: contact_info.name || null,\n      email: contact_info.email || null\n    },\n    \n    // Raw data para debugging\n    raw_webhook_data: data,\n    \n    // Flags de procesamiento\n    requires_ai_response: event_type === 'message_created' && message_content.length > 0,\n    is_customer_message: data.message_type !== 'outgoing',\n    \n    // Metadatos\n    processing_status: 'received',\n    webhook_source: 'chatwoot'\n  };\n  \n  results.push({\n    json: processedData\n  });\n}\n\nreturn results;"
      },
      "id": "process-node",
      "name": "Process Universal",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        480,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.requires_ai_response }}",
              "operation": "equal",
              "value2": "true"
            }
          ]
        }
      },
      "id": "filter-node",
      "name": "Requires AI?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        480,
        500
      ]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "webhook_logs",
        "columns": {
          "tenant_id": "={{ $json.tenant_id }}",
          "event_type": "={{ $json.event_type }}",
          "account_id": "={{ $json.account_id }}",
          "conversation_id": "={{ $json.conversation.id }}",
          "message_content": "={{ $json.message.content }}",
          "contact_phone": "={{ $json.contact.phone_number }}",
          "processing_status": "={{ $json.processing_status }}",
          "raw_data": "={{ JSON.stringify($json.raw_webhook_data) }}",
          "created_at": "={{ $json.timestamp }}"
        }
      },
      "id": "log-node",
      "name": "Log to Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        720,
        500
      ],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-creds",
          "name": "Supabase API"
        }
      }
    }
  ],
  "connections": {
    "Webhook Universal": {
      "main": [
        [
          {
            "node": "Process Universal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Universal": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Requires AI?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Requires AI?": {
      "main": [
        [
          {
            "node": "Log to Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {}
}
